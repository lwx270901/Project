
ultr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008ca0  08008ca0  00018ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e4  080090e4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  080090e4  080090e4  000190e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090ec  080090ec  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f0  080090f0  000190f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080090f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200001f0  080092e4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  080092e4  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed10  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002168  00000000  00000000  0002ef2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00031098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00031e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177e3  00000000  00000000  00032ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9d4  00000000  00000000  0004a29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb94  00000000  00000000  00059c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9803  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004afc  00000000  00000000  000e9854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c88 	.word	0x08008c88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08008c88 	.word	0x08008c88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_fmul>:
 8000290:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000294:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000298:	bf1e      	ittt	ne
 800029a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800029e:	ea92 0f0c 	teqne	r2, ip
 80002a2:	ea93 0f0c 	teqne	r3, ip
 80002a6:	d06f      	beq.n	8000388 <__aeabi_fmul+0xf8>
 80002a8:	441a      	add	r2, r3
 80002aa:	ea80 0c01 	eor.w	ip, r0, r1
 80002ae:	0240      	lsls	r0, r0, #9
 80002b0:	bf18      	it	ne
 80002b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80002b6:	d01e      	beq.n	80002f6 <__aeabi_fmul+0x66>
 80002b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80002bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80002c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80002c4:	fba0 3101 	umull	r3, r1, r0, r1
 80002c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80002cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80002d0:	bf3e      	ittt	cc
 80002d2:	0049      	lslcc	r1, r1, #1
 80002d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80002d8:	005b      	lslcc	r3, r3, #1
 80002da:	ea40 0001 	orr.w	r0, r0, r1
 80002de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80002e2:	2afd      	cmp	r2, #253	; 0xfd
 80002e4:	d81d      	bhi.n	8000322 <__aeabi_fmul+0x92>
 80002e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ee:	bf08      	it	eq
 80002f0:	f020 0001 	biceq.w	r0, r0, #1
 80002f4:	4770      	bx	lr
 80002f6:	f090 0f00 	teq	r0, #0
 80002fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002fe:	bf08      	it	eq
 8000300:	0249      	lsleq	r1, r1, #9
 8000302:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000306:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800030a:	3a7f      	subs	r2, #127	; 0x7f
 800030c:	bfc2      	ittt	gt
 800030e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000312:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000316:	4770      	bxgt	lr
 8000318:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031c:	f04f 0300 	mov.w	r3, #0
 8000320:	3a01      	subs	r2, #1
 8000322:	dc5d      	bgt.n	80003e0 <__aeabi_fmul+0x150>
 8000324:	f112 0f19 	cmn.w	r2, #25
 8000328:	bfdc      	itt	le
 800032a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800032e:	4770      	bxle	lr
 8000330:	f1c2 0200 	rsb	r2, r2, #0
 8000334:	0041      	lsls	r1, r0, #1
 8000336:	fa21 f102 	lsr.w	r1, r1, r2
 800033a:	f1c2 0220 	rsb	r2, r2, #32
 800033e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000342:	ea5f 0031 	movs.w	r0, r1, rrx
 8000346:	f140 0000 	adc.w	r0, r0, #0
 800034a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800034e:	bf08      	it	eq
 8000350:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000354:	4770      	bx	lr
 8000356:	f092 0f00 	teq	r2, #0
 800035a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800035e:	bf02      	ittt	eq
 8000360:	0040      	lsleq	r0, r0, #1
 8000362:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000366:	3a01      	subeq	r2, #1
 8000368:	d0f9      	beq.n	800035e <__aeabi_fmul+0xce>
 800036a:	ea40 000c 	orr.w	r0, r0, ip
 800036e:	f093 0f00 	teq	r3, #0
 8000372:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000376:	bf02      	ittt	eq
 8000378:	0049      	lsleq	r1, r1, #1
 800037a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800037e:	3b01      	subeq	r3, #1
 8000380:	d0f9      	beq.n	8000376 <__aeabi_fmul+0xe6>
 8000382:	ea41 010c 	orr.w	r1, r1, ip
 8000386:	e78f      	b.n	80002a8 <__aeabi_fmul+0x18>
 8000388:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800038c:	ea92 0f0c 	teq	r2, ip
 8000390:	bf18      	it	ne
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d00a      	beq.n	80003ae <__aeabi_fmul+0x11e>
 8000398:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800039c:	bf18      	it	ne
 800039e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80003a2:	d1d8      	bne.n	8000356 <__aeabi_fmul+0xc6>
 80003a4:	ea80 0001 	eor.w	r0, r0, r1
 80003a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003ac:	4770      	bx	lr
 80003ae:	f090 0f00 	teq	r0, #0
 80003b2:	bf17      	itett	ne
 80003b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80003b8:	4608      	moveq	r0, r1
 80003ba:	f091 0f00 	teqne	r1, #0
 80003be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80003c2:	d014      	beq.n	80003ee <__aeabi_fmul+0x15e>
 80003c4:	ea92 0f0c 	teq	r2, ip
 80003c8:	d101      	bne.n	80003ce <__aeabi_fmul+0x13e>
 80003ca:	0242      	lsls	r2, r0, #9
 80003cc:	d10f      	bne.n	80003ee <__aeabi_fmul+0x15e>
 80003ce:	ea93 0f0c 	teq	r3, ip
 80003d2:	d103      	bne.n	80003dc <__aeabi_fmul+0x14c>
 80003d4:	024b      	lsls	r3, r1, #9
 80003d6:	bf18      	it	ne
 80003d8:	4608      	movne	r0, r1
 80003da:	d108      	bne.n	80003ee <__aeabi_fmul+0x15e>
 80003dc:	ea80 0001 	eor.w	r0, r0, r1
 80003e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ec:	4770      	bx	lr
 80003ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_drsub>:
 80003f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	e002      	b.n	8000404 <__adddf3>
 80003fe:	bf00      	nop

08000400 <__aeabi_dsub>:
 8000400:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000404 <__adddf3>:
 8000404:	b530      	push	{r4, r5, lr}
 8000406:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800040a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	bf1f      	itttt	ne
 800041a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800041e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000422:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000426:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042a:	f000 80e2 	beq.w	80005f2 <__adddf3+0x1ee>
 800042e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000432:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000436:	bfb8      	it	lt
 8000438:	426d      	neglt	r5, r5
 800043a:	dd0c      	ble.n	8000456 <__adddf3+0x52>
 800043c:	442c      	add	r4, r5
 800043e:	ea80 0202 	eor.w	r2, r0, r2
 8000442:	ea81 0303 	eor.w	r3, r1, r3
 8000446:	ea82 0000 	eor.w	r0, r2, r0
 800044a:	ea83 0101 	eor.w	r1, r3, r1
 800044e:	ea80 0202 	eor.w	r2, r0, r2
 8000452:	ea81 0303 	eor.w	r3, r1, r3
 8000456:	2d36      	cmp	r5, #54	; 0x36
 8000458:	bf88      	it	hi
 800045a:	bd30      	pophi	{r4, r5, pc}
 800045c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000460:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000464:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000468:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800046c:	d002      	beq.n	8000474 <__adddf3+0x70>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000478:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800047c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000480:	d002      	beq.n	8000488 <__adddf3+0x84>
 8000482:	4252      	negs	r2, r2
 8000484:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000488:	ea94 0f05 	teq	r4, r5
 800048c:	f000 80a7 	beq.w	80005de <__adddf3+0x1da>
 8000490:	f1a4 0401 	sub.w	r4, r4, #1
 8000494:	f1d5 0e20 	rsbs	lr, r5, #32
 8000498:	db0d      	blt.n	80004b6 <__adddf3+0xb2>
 800049a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800049e:	fa22 f205 	lsr.w	r2, r2, r5
 80004a2:	1880      	adds	r0, r0, r2
 80004a4:	f141 0100 	adc.w	r1, r1, #0
 80004a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004ac:	1880      	adds	r0, r0, r2
 80004ae:	fa43 f305 	asr.w	r3, r3, r5
 80004b2:	4159      	adcs	r1, r3
 80004b4:	e00e      	b.n	80004d4 <__adddf3+0xd0>
 80004b6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ba:	f10e 0e20 	add.w	lr, lr, #32
 80004be:	2a01      	cmp	r2, #1
 80004c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004c4:	bf28      	it	cs
 80004c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ca:	fa43 f305 	asr.w	r3, r3, r5
 80004ce:	18c0      	adds	r0, r0, r3
 80004d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	d507      	bpl.n	80004ea <__adddf3+0xe6>
 80004da:	f04f 0e00 	mov.w	lr, #0
 80004de:	f1dc 0c00 	rsbs	ip, ip, #0
 80004e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ee:	d31b      	bcc.n	8000528 <__adddf3+0x124>
 80004f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004f4:	d30c      	bcc.n	8000510 <__adddf3+0x10c>
 80004f6:	0849      	lsrs	r1, r1, #1
 80004f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000500:	f104 0401 	add.w	r4, r4, #1
 8000504:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000508:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800050c:	f080 809a 	bcs.w	8000644 <__adddf3+0x240>
 8000510:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000514:	bf08      	it	eq
 8000516:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800051a:	f150 0000 	adcs.w	r0, r0, #0
 800051e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000522:	ea41 0105 	orr.w	r1, r1, r5
 8000526:	bd30      	pop	{r4, r5, pc}
 8000528:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800052c:	4140      	adcs	r0, r0
 800052e:	eb41 0101 	adc.w	r1, r1, r1
 8000532:	3c01      	subs	r4, #1
 8000534:	bf28      	it	cs
 8000536:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800053a:	d2e9      	bcs.n	8000510 <__adddf3+0x10c>
 800053c:	f091 0f00 	teq	r1, #0
 8000540:	bf04      	itt	eq
 8000542:	4601      	moveq	r1, r0
 8000544:	2000      	moveq	r0, #0
 8000546:	fab1 f381 	clz	r3, r1
 800054a:	bf08      	it	eq
 800054c:	3320      	addeq	r3, #32
 800054e:	f1a3 030b 	sub.w	r3, r3, #11
 8000552:	f1b3 0220 	subs.w	r2, r3, #32
 8000556:	da0c      	bge.n	8000572 <__adddf3+0x16e>
 8000558:	320c      	adds	r2, #12
 800055a:	dd08      	ble.n	800056e <__adddf3+0x16a>
 800055c:	f102 0c14 	add.w	ip, r2, #20
 8000560:	f1c2 020c 	rsb	r2, r2, #12
 8000564:	fa01 f00c 	lsl.w	r0, r1, ip
 8000568:	fa21 f102 	lsr.w	r1, r1, r2
 800056c:	e00c      	b.n	8000588 <__adddf3+0x184>
 800056e:	f102 0214 	add.w	r2, r2, #20
 8000572:	bfd8      	it	le
 8000574:	f1c2 0c20 	rsble	ip, r2, #32
 8000578:	fa01 f102 	lsl.w	r1, r1, r2
 800057c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000580:	bfdc      	itt	le
 8000582:	ea41 010c 	orrle.w	r1, r1, ip
 8000586:	4090      	lslle	r0, r2
 8000588:	1ae4      	subs	r4, r4, r3
 800058a:	bfa2      	ittt	ge
 800058c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000590:	4329      	orrge	r1, r5
 8000592:	bd30      	popge	{r4, r5, pc}
 8000594:	ea6f 0404 	mvn.w	r4, r4
 8000598:	3c1f      	subs	r4, #31
 800059a:	da1c      	bge.n	80005d6 <__adddf3+0x1d2>
 800059c:	340c      	adds	r4, #12
 800059e:	dc0e      	bgt.n	80005be <__adddf3+0x1ba>
 80005a0:	f104 0414 	add.w	r4, r4, #20
 80005a4:	f1c4 0220 	rsb	r2, r4, #32
 80005a8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ac:	fa01 f302 	lsl.w	r3, r1, r2
 80005b0:	ea40 0003 	orr.w	r0, r0, r3
 80005b4:	fa21 f304 	lsr.w	r3, r1, r4
 80005b8:	ea45 0103 	orr.w	r1, r5, r3
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	f1c4 040c 	rsb	r4, r4, #12
 80005c2:	f1c4 0220 	rsb	r2, r4, #32
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 f304 	lsl.w	r3, r1, r4
 80005ce:	ea40 0003 	orr.w	r0, r0, r3
 80005d2:	4629      	mov	r1, r5
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	fa21 f004 	lsr.w	r0, r1, r4
 80005da:	4629      	mov	r1, r5
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	f094 0f00 	teq	r4, #0
 80005e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005e6:	bf06      	itte	eq
 80005e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ec:	3401      	addeq	r4, #1
 80005ee:	3d01      	subne	r5, #1
 80005f0:	e74e      	b.n	8000490 <__adddf3+0x8c>
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf18      	it	ne
 80005f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005fc:	d029      	beq.n	8000652 <__adddf3+0x24e>
 80005fe:	ea94 0f05 	teq	r4, r5
 8000602:	bf08      	it	eq
 8000604:	ea90 0f02 	teqeq	r0, r2
 8000608:	d005      	beq.n	8000616 <__adddf3+0x212>
 800060a:	ea54 0c00 	orrs.w	ip, r4, r0
 800060e:	bf04      	itt	eq
 8000610:	4619      	moveq	r1, r3
 8000612:	4610      	moveq	r0, r2
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	ea91 0f03 	teq	r1, r3
 800061a:	bf1e      	ittt	ne
 800061c:	2100      	movne	r1, #0
 800061e:	2000      	movne	r0, #0
 8000620:	bd30      	popne	{r4, r5, pc}
 8000622:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000626:	d105      	bne.n	8000634 <__adddf3+0x230>
 8000628:	0040      	lsls	r0, r0, #1
 800062a:	4149      	adcs	r1, r1
 800062c:	bf28      	it	cs
 800062e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000638:	bf3c      	itt	cc
 800063a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800063e:	bd30      	popcc	{r4, r5, pc}
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000648:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800064c:	f04f 0000 	mov.w	r0, #0
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf1a      	itte	ne
 8000658:	4619      	movne	r1, r3
 800065a:	4610      	movne	r0, r2
 800065c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000660:	bf1c      	itt	ne
 8000662:	460b      	movne	r3, r1
 8000664:	4602      	movne	r2, r0
 8000666:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800066a:	bf06      	itte	eq
 800066c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000670:	ea91 0f03 	teqeq	r1, r3
 8000674:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop

0800067c <__aeabi_ui2d>:
 800067c:	f090 0f00 	teq	r0, #0
 8000680:	bf04      	itt	eq
 8000682:	2100      	moveq	r1, #0
 8000684:	4770      	bxeq	lr
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800068c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000690:	f04f 0500 	mov.w	r5, #0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e750      	b.n	800053c <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_i2d>:
 800069c:	f090 0f00 	teq	r0, #0
 80006a0:	bf04      	itt	eq
 80006a2:	2100      	moveq	r1, #0
 80006a4:	4770      	bxeq	lr
 80006a6:	b530      	push	{r4, r5, lr}
 80006a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006b4:	bf48      	it	mi
 80006b6:	4240      	negmi	r0, r0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e73e      	b.n	800053c <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_f2d>:
 80006c0:	0042      	lsls	r2, r0, #1
 80006c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006ce:	bf1f      	itttt	ne
 80006d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006dc:	4770      	bxne	lr
 80006de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006e2:	bf08      	it	eq
 80006e4:	4770      	bxeq	lr
 80006e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ea:	bf04      	itt	eq
 80006ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000700:	e71c      	b.n	800053c <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_ul2d>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	b530      	push	{r4, r5, lr}
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	e00a      	b.n	800072a <__aeabi_l2d+0x16>

08000714 <__aeabi_l2d>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000722:	d502      	bpl.n	800072a <__aeabi_l2d+0x16>
 8000724:	4240      	negs	r0, r0
 8000726:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800072a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800072e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000732:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000736:	f43f aed8 	beq.w	80004ea <__adddf3+0xe6>
 800073a:	f04f 0203 	mov.w	r2, #3
 800073e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000742:	bf18      	it	ne
 8000744:	3203      	addne	r2, #3
 8000746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800074a:	bf18      	it	ne
 800074c:	3203      	addne	r2, #3
 800074e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	fa00 fc03 	lsl.w	ip, r0, r3
 800075a:	fa20 f002 	lsr.w	r0, r0, r2
 800075e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000762:	ea40 000e 	orr.w	r0, r0, lr
 8000766:	fa21 f102 	lsr.w	r1, r1, r2
 800076a:	4414      	add	r4, r2
 800076c:	e6bd      	b.n	80004ea <__adddf3+0xe6>
 800076e:	bf00      	nop

08000770 <__aeabi_dmul>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8de 	bleq	800094c <__aeabi_dmul+0x1dc>
 8000790:	442c      	add	r4, r5
 8000792:	ea81 0603 	eor.w	r6, r1, r3
 8000796:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800079a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800079e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80007a2:	bf18      	it	ne
 80007a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80007a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80007b0:	d038      	beq.n	8000824 <__aeabi_dmul+0xb4>
 80007b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80007b6:	f04f 0500 	mov.w	r5, #0
 80007ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80007c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007c6:	f04f 0600 	mov.w	r6, #0
 80007ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007ce:	f09c 0f00 	teq	ip, #0
 80007d2:	bf18      	it	ne
 80007d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80007d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80007dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007e4:	d204      	bcs.n	80007f0 <__aeabi_dmul+0x80>
 80007e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007ea:	416d      	adcs	r5, r5
 80007ec:	eb46 0606 	adc.w	r6, r6, r6
 80007f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000800:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000804:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000808:	bf88      	it	hi
 800080a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800080e:	d81e      	bhi.n	800084e <__aeabi_dmul+0xde>
 8000810:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000814:	bf08      	it	eq
 8000816:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800081a:	f150 0000 	adcs.w	r0, r0, #0
 800081e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000828:	ea46 0101 	orr.w	r1, r6, r1
 800082c:	ea40 0002 	orr.w	r0, r0, r2
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000838:	bfc2      	ittt	gt
 800083a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800083e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000842:	bd70      	popgt	{r4, r5, r6, pc}
 8000844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000848:	f04f 0e00 	mov.w	lr, #0
 800084c:	3c01      	subs	r4, #1
 800084e:	f300 80ab 	bgt.w	80009a8 <__aeabi_dmul+0x238>
 8000852:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000856:	bfde      	ittt	le
 8000858:	2000      	movle	r0, #0
 800085a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800085e:	bd70      	pople	{r4, r5, r6, pc}
 8000860:	f1c4 0400 	rsb	r4, r4, #0
 8000864:	3c20      	subs	r4, #32
 8000866:	da35      	bge.n	80008d4 <__aeabi_dmul+0x164>
 8000868:	340c      	adds	r4, #12
 800086a:	dc1b      	bgt.n	80008a4 <__aeabi_dmul+0x134>
 800086c:	f104 0414 	add.w	r4, r4, #20
 8000870:	f1c4 0520 	rsb	r5, r4, #32
 8000874:	fa00 f305 	lsl.w	r3, r0, r5
 8000878:	fa20 f004 	lsr.w	r0, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea40 0002 	orr.w	r0, r0, r2
 8000884:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000888:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800088c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000890:	fa21 f604 	lsr.w	r6, r1, r4
 8000894:	eb42 0106 	adc.w	r1, r2, r6
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f1c4 040c 	rsb	r4, r4, #12
 80008a8:	f1c4 0520 	rsb	r5, r4, #32
 80008ac:	fa00 f304 	lsl.w	r3, r0, r4
 80008b0:	fa20 f005 	lsr.w	r0, r0, r5
 80008b4:	fa01 f204 	lsl.w	r2, r1, r4
 80008b8:	ea40 0002 	orr.w	r0, r0, r2
 80008bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008c4:	f141 0100 	adc.w	r1, r1, #0
 80008c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008cc:	bf08      	it	eq
 80008ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f1c4 0520 	rsb	r5, r4, #32
 80008d8:	fa00 f205 	lsl.w	r2, r0, r5
 80008dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80008e0:	fa20 f304 	lsr.w	r3, r0, r4
 80008e4:	fa01 f205 	lsl.w	r2, r1, r5
 80008e8:	ea43 0302 	orr.w	r3, r3, r2
 80008ec:	fa21 f004 	lsr.w	r0, r1, r4
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	fa21 f204 	lsr.w	r2, r1, r4
 80008f8:	ea20 0002 	bic.w	r0, r0, r2
 80008fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000900:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000904:	bf08      	it	eq
 8000906:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f094 0f00 	teq	r4, #0
 8000910:	d10f      	bne.n	8000932 <__aeabi_dmul+0x1c2>
 8000912:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000916:	0040      	lsls	r0, r0, #1
 8000918:	eb41 0101 	adc.w	r1, r1, r1
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	bf08      	it	eq
 8000922:	3c01      	subeq	r4, #1
 8000924:	d0f7      	beq.n	8000916 <__aeabi_dmul+0x1a6>
 8000926:	ea41 0106 	orr.w	r1, r1, r6
 800092a:	f095 0f00 	teq	r5, #0
 800092e:	bf18      	it	ne
 8000930:	4770      	bxne	lr
 8000932:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000936:	0052      	lsls	r2, r2, #1
 8000938:	eb43 0303 	adc.w	r3, r3, r3
 800093c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000940:	bf08      	it	eq
 8000942:	3d01      	subeq	r5, #1
 8000944:	d0f7      	beq.n	8000936 <__aeabi_dmul+0x1c6>
 8000946:	ea43 0306 	orr.w	r3, r3, r6
 800094a:	4770      	bx	lr
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000954:	bf18      	it	ne
 8000956:	ea95 0f0c 	teqne	r5, ip
 800095a:	d00c      	beq.n	8000976 <__aeabi_dmul+0x206>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	d1d1      	bne.n	800090c <__aeabi_dmul+0x19c>
 8000968:	ea81 0103 	eor.w	r1, r1, r3
 800096c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000970:	f04f 0000 	mov.w	r0, #0
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097a:	bf06      	itte	eq
 800097c:	4610      	moveq	r0, r2
 800097e:	4619      	moveq	r1, r3
 8000980:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000984:	d019      	beq.n	80009ba <__aeabi_dmul+0x24a>
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	d102      	bne.n	8000992 <__aeabi_dmul+0x222>
 800098c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000990:	d113      	bne.n	80009ba <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	d105      	bne.n	80009a4 <__aeabi_dmul+0x234>
 8000998:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800099c:	bf1c      	itt	ne
 800099e:	4610      	movne	r0, r2
 80009a0:	4619      	movne	r1, r3
 80009a2:	d10a      	bne.n	80009ba <__aeabi_dmul+0x24a>
 80009a4:	ea81 0103 	eor.w	r1, r1, r3
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
 80009ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80009be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80009c2:	bd70      	pop	{r4, r5, r6, pc}

080009c4 <__aeabi_ddiv>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80009ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009d2:	bf1d      	ittte	ne
 80009d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009d8:	ea94 0f0c 	teqne	r4, ip
 80009dc:	ea95 0f0c 	teqne	r5, ip
 80009e0:	f000 f8a7 	bleq	8000b32 <__aeabi_ddiv+0x16e>
 80009e4:	eba4 0405 	sub.w	r4, r4, r5
 80009e8:	ea81 0e03 	eor.w	lr, r1, r3
 80009ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009f4:	f000 8088 	beq.w	8000b08 <__aeabi_ddiv+0x144>
 80009f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000a00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000a1c:	429d      	cmp	r5, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4296      	cmpeq	r6, r2
 8000a22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000a26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000a2a:	d202      	bcs.n	8000a32 <__aeabi_ddiv+0x6e>
 8000a2c:	085b      	lsrs	r3, r3, #1
 8000a2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a32:	1ab6      	subs	r6, r6, r2
 8000a34:	eb65 0503 	sbc.w	r5, r5, r3
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a4e:	bf22      	ittt	cs
 8000a50:	1ab6      	subcs	r6, r6, r2
 8000a52:	4675      	movcs	r5, lr
 8000a54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a66:	bf22      	ittt	cs
 8000a68:	1ab6      	subcs	r6, r6, r2
 8000a6a:	4675      	movcs	r5, lr
 8000a6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a7e:	bf22      	ittt	cs
 8000a80:	1ab6      	subcs	r6, r6, r2
 8000a82:	4675      	movcs	r5, lr
 8000a84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a88:	085b      	lsrs	r3, r3, #1
 8000a8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a96:	bf22      	ittt	cs
 8000a98:	1ab6      	subcs	r6, r6, r2
 8000a9a:	4675      	movcs	r5, lr
 8000a9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000aa0:	ea55 0e06 	orrs.w	lr, r5, r6
 8000aa4:	d018      	beq.n	8000ad8 <__aeabi_ddiv+0x114>
 8000aa6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000aaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000aae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000ab2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ab6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000aba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000abe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ac2:	d1c0      	bne.n	8000a46 <__aeabi_ddiv+0x82>
 8000ac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ac8:	d10b      	bne.n	8000ae2 <__aeabi_ddiv+0x11e>
 8000aca:	ea41 0100 	orr.w	r1, r1, r0
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000ad6:	e7b6      	b.n	8000a46 <__aeabi_ddiv+0x82>
 8000ad8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000adc:	bf04      	itt	eq
 8000ade:	4301      	orreq	r1, r0
 8000ae0:	2000      	moveq	r0, #0
 8000ae2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ae6:	bf88      	it	hi
 8000ae8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000aec:	f63f aeaf 	bhi.w	800084e <__aeabi_dmul+0xde>
 8000af0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000af4:	bf04      	itt	eq
 8000af6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000afa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000afe:	f150 0000 	adcs.w	r0, r0, #0
 8000b02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000b0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b14:	bfc2      	ittt	gt
 8000b16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000b20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b24:	f04f 0e00 	mov.w	lr, #0
 8000b28:	3c01      	subs	r4, #1
 8000b2a:	e690      	b.n	800084e <__aeabi_dmul+0xde>
 8000b2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000b30:	e68d      	b.n	800084e <__aeabi_dmul+0xde>
 8000b32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b36:	ea94 0f0c 	teq	r4, ip
 8000b3a:	bf08      	it	eq
 8000b3c:	ea95 0f0c 	teqeq	r5, ip
 8000b40:	f43f af3b 	beq.w	80009ba <__aeabi_dmul+0x24a>
 8000b44:	ea94 0f0c 	teq	r4, ip
 8000b48:	d10a      	bne.n	8000b60 <__aeabi_ddiv+0x19c>
 8000b4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b4e:	f47f af34 	bne.w	80009ba <__aeabi_dmul+0x24a>
 8000b52:	ea95 0f0c 	teq	r5, ip
 8000b56:	f47f af25 	bne.w	80009a4 <__aeabi_dmul+0x234>
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	e72c      	b.n	80009ba <__aeabi_dmul+0x24a>
 8000b60:	ea95 0f0c 	teq	r5, ip
 8000b64:	d106      	bne.n	8000b74 <__aeabi_ddiv+0x1b0>
 8000b66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b6a:	f43f aefd 	beq.w	8000968 <__aeabi_dmul+0x1f8>
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4619      	mov	r1, r3
 8000b72:	e722      	b.n	80009ba <__aeabi_dmul+0x24a>
 8000b74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b78:	bf18      	it	ne
 8000b7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b7e:	f47f aec5 	bne.w	800090c <__aeabi_dmul+0x19c>
 8000b82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b86:	f47f af0d 	bne.w	80009a4 <__aeabi_dmul+0x234>
 8000b8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b8e:	f47f aeeb 	bne.w	8000968 <__aeabi_dmul+0x1f8>
 8000b92:	e712      	b.n	80009ba <__aeabi_dmul+0x24a>

08000b94 <__gedf2>:
 8000b94:	f04f 3cff 	mov.w	ip, #4294967295
 8000b98:	e006      	b.n	8000ba8 <__cmpdf2+0x4>
 8000b9a:	bf00      	nop

08000b9c <__ledf2>:
 8000b9c:	f04f 0c01 	mov.w	ip, #1
 8000ba0:	e002      	b.n	8000ba8 <__cmpdf2+0x4>
 8000ba2:	bf00      	nop

08000ba4 <__cmpdf2>:
 8000ba4:	f04f 0c01 	mov.w	ip, #1
 8000ba8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000bbe:	d01b      	beq.n	8000bf8 <__cmpdf2+0x54>
 8000bc0:	b001      	add	sp, #4
 8000bc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bc6:	bf0c      	ite	eq
 8000bc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bcc:	ea91 0f03 	teqne	r1, r3
 8000bd0:	bf02      	ittt	eq
 8000bd2:	ea90 0f02 	teqeq	r0, r2
 8000bd6:	2000      	moveq	r0, #0
 8000bd8:	4770      	bxeq	lr
 8000bda:	f110 0f00 	cmn.w	r0, #0
 8000bde:	ea91 0f03 	teq	r1, r3
 8000be2:	bf58      	it	pl
 8000be4:	4299      	cmppl	r1, r3
 8000be6:	bf08      	it	eq
 8000be8:	4290      	cmpeq	r0, r2
 8000bea:	bf2c      	ite	cs
 8000bec:	17d8      	asrcs	r0, r3, #31
 8000bee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bf2:	f040 0001 	orr.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c00:	d102      	bne.n	8000c08 <__cmpdf2+0x64>
 8000c02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c06:	d107      	bne.n	8000c18 <__cmpdf2+0x74>
 8000c08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c10:	d1d6      	bne.n	8000bc0 <__cmpdf2+0x1c>
 8000c12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c16:	d0d3      	beq.n	8000bc0 <__cmpdf2+0x1c>
 8000c18:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_cdrcmple>:
 8000c20:	4684      	mov	ip, r0
 8000c22:	4610      	mov	r0, r2
 8000c24:	4662      	mov	r2, ip
 8000c26:	468c      	mov	ip, r1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4663      	mov	r3, ip
 8000c2c:	e000      	b.n	8000c30 <__aeabi_cdcmpeq>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_cdcmpeq>:
 8000c30:	b501      	push	{r0, lr}
 8000c32:	f7ff ffb7 	bl	8000ba4 <__cmpdf2>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	bf48      	it	mi
 8000c3a:	f110 0f00 	cmnmi.w	r0, #0
 8000c3e:	bd01      	pop	{r0, pc}

08000c40 <__aeabi_dcmpeq>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff fff4 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c48:	bf0c      	ite	eq
 8000c4a:	2001      	moveq	r0, #1
 8000c4c:	2000      	movne	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_dcmplt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffea 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_dcmple>:
 8000c68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c6c:	f7ff ffe0 	bl	8000c30 <__aeabi_cdcmpeq>
 8000c70:	bf94      	ite	ls
 8000c72:	2001      	movls	r0, #1
 8000c74:	2000      	movhi	r0, #0
 8000c76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7a:	bf00      	nop

08000c7c <__aeabi_dcmpge>:
 8000c7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c80:	f7ff ffce 	bl	8000c20 <__aeabi_cdrcmple>
 8000c84:	bf94      	ite	ls
 8000c86:	2001      	movls	r0, #1
 8000c88:	2000      	movhi	r0, #0
 8000c8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8e:	bf00      	nop

08000c90 <__aeabi_dcmpgt>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff ffc4 	bl	8000c20 <__aeabi_cdrcmple>
 8000c98:	bf34      	ite	cc
 8000c9a:	2001      	movcc	r0, #1
 8000c9c:	2000      	movcs	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_dcmpun>:
 8000ca4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ca8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cac:	d102      	bne.n	8000cb4 <__aeabi_dcmpun+0x10>
 8000cae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cb2:	d10a      	bne.n	8000cca <__aeabi_dcmpun+0x26>
 8000cb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cbc:	d102      	bne.n	8000cc4 <__aeabi_dcmpun+0x20>
 8000cbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cc2:	d102      	bne.n	8000cca <__aeabi_dcmpun+0x26>
 8000cc4:	f04f 0000 	mov.w	r0, #0
 8000cc8:	4770      	bx	lr
 8000cca:	f04f 0001 	mov.w	r0, #1
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_d2iz>:
 8000cd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd8:	d215      	bcs.n	8000d06 <__aeabi_d2iz+0x36>
 8000cda:	d511      	bpl.n	8000d00 <__aeabi_d2iz+0x30>
 8000cdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ce0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ce4:	d912      	bls.n	8000d0c <__aeabi_d2iz+0x3c>
 8000ce6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cf2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8000cfa:	bf18      	it	ne
 8000cfc:	4240      	negne	r0, r0
 8000cfe:	4770      	bx	lr
 8000d00:	f04f 0000 	mov.w	r0, #0
 8000d04:	4770      	bx	lr
 8000d06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d0a:	d105      	bne.n	8000d18 <__aeabi_d2iz+0x48>
 8000d0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d10:	bf08      	it	eq
 8000d12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d16:	4770      	bx	lr
 8000d18:	f04f 0000 	mov.w	r0, #0
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <__aeabi_d2f>:
 8000d20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d28:	bf24      	itt	cs
 8000d2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d32:	d90d      	bls.n	8000d50 <__aeabi_d2f+0x30>
 8000d34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d48:	bf08      	it	eq
 8000d4a:	f020 0001 	biceq.w	r0, r0, #1
 8000d4e:	4770      	bx	lr
 8000d50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d54:	d121      	bne.n	8000d9a <__aeabi_d2f+0x7a>
 8000d56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d5a:	bfbc      	itt	lt
 8000d5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d60:	4770      	bxlt	lr
 8000d62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d6a:	f1c2 0218 	rsb	r2, r2, #24
 8000d6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000d72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d76:	fa20 f002 	lsr.w	r0, r0, r2
 8000d7a:	bf18      	it	ne
 8000d7c:	f040 0001 	orrne.w	r0, r0, #1
 8000d80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d8c:	ea40 000c 	orr.w	r0, r0, ip
 8000d90:	fa23 f302 	lsr.w	r3, r3, r2
 8000d94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d98:	e7cc      	b.n	8000d34 <__aeabi_d2f+0x14>
 8000d9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d9e:	d107      	bne.n	8000db0 <__aeabi_d2f+0x90>
 8000da0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000da4:	bf1e      	ittt	ne
 8000da6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000daa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000dae:	4770      	bxne	lr
 8000db0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000db4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_frsub>:
 8000dc0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dc4:	e002      	b.n	8000dcc <__addsf3>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_fsub>:
 8000dc8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dcc <__addsf3>:
 8000dcc:	0042      	lsls	r2, r0, #1
 8000dce:	bf1f      	itttt	ne
 8000dd0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dd4:	ea92 0f03 	teqne	r2, r3
 8000dd8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ddc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000de0:	d06a      	beq.n	8000eb8 <__addsf3+0xec>
 8000de2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000de6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dea:	bfc1      	itttt	gt
 8000dec:	18d2      	addgt	r2, r2, r3
 8000dee:	4041      	eorgt	r1, r0
 8000df0:	4048      	eorgt	r0, r1
 8000df2:	4041      	eorgt	r1, r0
 8000df4:	bfb8      	it	lt
 8000df6:	425b      	neglt	r3, r3
 8000df8:	2b19      	cmp	r3, #25
 8000dfa:	bf88      	it	hi
 8000dfc:	4770      	bxhi	lr
 8000dfe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e0a:	bf18      	it	ne
 8000e0c:	4240      	negne	r0, r0
 8000e0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e12:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e1a:	bf18      	it	ne
 8000e1c:	4249      	negne	r1, r1
 8000e1e:	ea92 0f03 	teq	r2, r3
 8000e22:	d03f      	beq.n	8000ea4 <__addsf3+0xd8>
 8000e24:	f1a2 0201 	sub.w	r2, r2, #1
 8000e28:	fa41 fc03 	asr.w	ip, r1, r3
 8000e2c:	eb10 000c 	adds.w	r0, r0, ip
 8000e30:	f1c3 0320 	rsb	r3, r3, #32
 8000e34:	fa01 f103 	lsl.w	r1, r1, r3
 8000e38:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__addsf3+0x78>
 8000e3e:	4249      	negs	r1, r1
 8000e40:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e48:	d313      	bcc.n	8000e72 <__addsf3+0xa6>
 8000e4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e4e:	d306      	bcc.n	8000e5e <__addsf3+0x92>
 8000e50:	0840      	lsrs	r0, r0, #1
 8000e52:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e56:	f102 0201 	add.w	r2, r2, #1
 8000e5a:	2afe      	cmp	r2, #254	; 0xfe
 8000e5c:	d251      	bcs.n	8000f02 <__addsf3+0x136>
 8000e5e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e66:	bf08      	it	eq
 8000e68:	f020 0001 	biceq.w	r0, r0, #1
 8000e6c:	ea40 0003 	orr.w	r0, r0, r3
 8000e70:	4770      	bx	lr
 8000e72:	0049      	lsls	r1, r1, #1
 8000e74:	eb40 0000 	adc.w	r0, r0, r0
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	bf28      	it	cs
 8000e7c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e80:	d2ed      	bcs.n	8000e5e <__addsf3+0x92>
 8000e82:	fab0 fc80 	clz	ip, r0
 8000e86:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e8a:	ebb2 020c 	subs.w	r2, r2, ip
 8000e8e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e92:	bfaa      	itet	ge
 8000e94:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e98:	4252      	neglt	r2, r2
 8000e9a:	4318      	orrge	r0, r3
 8000e9c:	bfbc      	itt	lt
 8000e9e:	40d0      	lsrlt	r0, r2
 8000ea0:	4318      	orrlt	r0, r3
 8000ea2:	4770      	bx	lr
 8000ea4:	f092 0f00 	teq	r2, #0
 8000ea8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000eac:	bf06      	itte	eq
 8000eae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000eb2:	3201      	addeq	r2, #1
 8000eb4:	3b01      	subne	r3, #1
 8000eb6:	e7b5      	b.n	8000e24 <__addsf3+0x58>
 8000eb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	bf18      	it	ne
 8000ec2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec6:	d021      	beq.n	8000f0c <__addsf3+0x140>
 8000ec8:	ea92 0f03 	teq	r2, r3
 8000ecc:	d004      	beq.n	8000ed8 <__addsf3+0x10c>
 8000ece:	f092 0f00 	teq	r2, #0
 8000ed2:	bf08      	it	eq
 8000ed4:	4608      	moveq	r0, r1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea90 0f01 	teq	r0, r1
 8000edc:	bf1c      	itt	ne
 8000ede:	2000      	movne	r0, #0
 8000ee0:	4770      	bxne	lr
 8000ee2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ee6:	d104      	bne.n	8000ef2 <__addsf3+0x126>
 8000ee8:	0040      	lsls	r0, r0, #1
 8000eea:	bf28      	it	cs
 8000eec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ef0:	4770      	bx	lr
 8000ef2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ef6:	bf3c      	itt	cc
 8000ef8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000efc:	4770      	bxcc	lr
 8000efe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000f02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0a:	4770      	bx	lr
 8000f0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f10:	bf16      	itet	ne
 8000f12:	4608      	movne	r0, r1
 8000f14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f18:	4601      	movne	r1, r0
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	bf06      	itte	eq
 8000f1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f22:	ea90 0f01 	teqeq	r0, r1
 8000f26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_ui2f>:
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e004      	b.n	8000f3c <__aeabi_i2f+0x8>
 8000f32:	bf00      	nop

08000f34 <__aeabi_i2f>:
 8000f34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f38:	bf48      	it	mi
 8000f3a:	4240      	negmi	r0, r0
 8000f3c:	ea5f 0c00 	movs.w	ip, r0
 8000f40:	bf08      	it	eq
 8000f42:	4770      	bxeq	lr
 8000f44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f48:	4601      	mov	r1, r0
 8000f4a:	f04f 0000 	mov.w	r0, #0
 8000f4e:	e01c      	b.n	8000f8a <__aeabi_l2f+0x2a>

08000f50 <__aeabi_ul2f>:
 8000f50:	ea50 0201 	orrs.w	r2, r0, r1
 8000f54:	bf08      	it	eq
 8000f56:	4770      	bxeq	lr
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	e00a      	b.n	8000f74 <__aeabi_l2f+0x14>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_l2f>:
 8000f60:	ea50 0201 	orrs.w	r2, r0, r1
 8000f64:	bf08      	it	eq
 8000f66:	4770      	bxeq	lr
 8000f68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	d502      	bpl.n	8000f74 <__aeabi_l2f+0x14>
 8000f6e:	4240      	negs	r0, r0
 8000f70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f74:	ea5f 0c01 	movs.w	ip, r1
 8000f78:	bf02      	ittt	eq
 8000f7a:	4684      	moveq	ip, r0
 8000f7c:	4601      	moveq	r1, r0
 8000f7e:	2000      	moveq	r0, #0
 8000f80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f84:	bf08      	it	eq
 8000f86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f8e:	fabc f28c 	clz	r2, ip
 8000f92:	3a08      	subs	r2, #8
 8000f94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f98:	db10      	blt.n	8000fbc <__aeabi_l2f+0x5c>
 8000f9a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fa4:	f1c2 0220 	rsb	r2, r2, #32
 8000fa8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fac:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb0:	eb43 0002 	adc.w	r0, r3, r2
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f102 0220 	add.w	r2, r2, #32
 8000fc0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fc4:	f1c2 0220 	rsb	r2, r2, #32
 8000fc8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fcc:	fa21 f202 	lsr.w	r2, r1, r2
 8000fd0:	eb43 0002 	adc.w	r0, r3, r2
 8000fd4:	bf08      	it	eq
 8000fd6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fda:	4770      	bx	lr

08000fdc <__gesf2>:
 8000fdc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe0:	e006      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__lesf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	e002      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__cmpsf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001000:	bf18      	it	ne
 8001002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001006:	d011      	beq.n	800102c <__cmpsf2+0x40>
 8001008:	b001      	add	sp, #4
 800100a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100e:	bf18      	it	ne
 8001010:	ea90 0f01 	teqne	r0, r1
 8001014:	bf58      	it	pl
 8001016:	ebb2 0003 	subspl.w	r0, r2, r3
 800101a:	bf88      	it	hi
 800101c:	17c8      	asrhi	r0, r1, #31
 800101e:	bf38      	it	cc
 8001020:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001024:	bf18      	it	ne
 8001026:	f040 0001 	orrne.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	d102      	bne.n	8001038 <__cmpsf2+0x4c>
 8001032:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001036:	d105      	bne.n	8001044 <__cmpsf2+0x58>
 8001038:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800103c:	d1e4      	bne.n	8001008 <__cmpsf2+0x1c>
 800103e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001042:	d0e1      	beq.n	8001008 <__cmpsf2+0x1c>
 8001044:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_cfrcmple>:
 800104c:	4684      	mov	ip, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	e7ff      	b.n	8001054 <__aeabi_cfcmpeq>

08001054 <__aeabi_cfcmpeq>:
 8001054:	b50f      	push	{r0, r1, r2, r3, lr}
 8001056:	f7ff ffc9 	bl	8000fec <__cmpsf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	bf48      	it	mi
 800105e:	f110 0f00 	cmnmi.w	r0, #0
 8001062:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001064 <__aeabi_fcmpeq>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff fff4 	bl	8001054 <__aeabi_cfcmpeq>
 800106c:	bf0c      	ite	eq
 800106e:	2001      	moveq	r0, #1
 8001070:	2000      	movne	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmplt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffea 	bl	8001054 <__aeabi_cfcmpeq>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmple>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffe0 	bl	8001054 <__aeabi_cfcmpeq>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpge>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffd2 	bl	800104c <__aeabi_cfrcmple>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpgt>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffc8 	bl	800104c <__aeabi_cfrcmple>
 80010bc:	bf34      	ite	cc
 80010be:	2001      	movcc	r0, #1
 80010c0:	2000      	movcs	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_f2iz>:
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d0:	d30f      	bcc.n	80010f2 <__aeabi_f2iz+0x2a>
 80010d2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010da:	d90d      	bls.n	80010f8 <__aeabi_f2iz+0x30>
 80010dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ec:	bf18      	it	ne
 80010ee:	4240      	negne	r0, r0
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2iz+0x3a>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d105      	bne.n	800110e <__aeabi_f2iz+0x46>
 8001102:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001106:	bf08      	it	eq
 8001108:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr

08001114 <__aeabi_uldivmod>:
 8001114:	b953      	cbnz	r3, 800112c <__aeabi_uldivmod+0x18>
 8001116:	b94a      	cbnz	r2, 800112c <__aeabi_uldivmod+0x18>
 8001118:	2900      	cmp	r1, #0
 800111a:	bf08      	it	eq
 800111c:	2800      	cmpeq	r0, #0
 800111e:	bf1c      	itt	ne
 8001120:	f04f 31ff 	movne.w	r1, #4294967295
 8001124:	f04f 30ff 	movne.w	r0, #4294967295
 8001128:	f000 b974 	b.w	8001414 <__aeabi_idiv0>
 800112c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001130:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001134:	f000 f806 	bl	8001144 <__udivmoddi4>
 8001138:	f8dd e004 	ldr.w	lr, [sp, #4]
 800113c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001140:	b004      	add	sp, #16
 8001142:	4770      	bx	lr

08001144 <__udivmoddi4>:
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	9e08      	ldr	r6, [sp, #32]
 800114a:	460d      	mov	r5, r1
 800114c:	4604      	mov	r4, r0
 800114e:	4688      	mov	r8, r1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d14d      	bne.n	80011f0 <__udivmoddi4+0xac>
 8001154:	428a      	cmp	r2, r1
 8001156:	4694      	mov	ip, r2
 8001158:	d968      	bls.n	800122c <__udivmoddi4+0xe8>
 800115a:	fab2 f282 	clz	r2, r2
 800115e:	b152      	cbz	r2, 8001176 <__udivmoddi4+0x32>
 8001160:	fa01 f302 	lsl.w	r3, r1, r2
 8001164:	f1c2 0120 	rsb	r1, r2, #32
 8001168:	fa20 f101 	lsr.w	r1, r0, r1
 800116c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001170:	ea41 0803 	orr.w	r8, r1, r3
 8001174:	4094      	lsls	r4, r2
 8001176:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800117a:	0c21      	lsrs	r1, r4, #16
 800117c:	fbb8 fef5 	udiv	lr, r8, r5
 8001180:	fa1f f78c 	uxth.w	r7, ip
 8001184:	fb05 831e 	mls	r3, r5, lr, r8
 8001188:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800118c:	fb0e f107 	mul.w	r1, lr, r7
 8001190:	4299      	cmp	r1, r3
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x68>
 8001194:	eb1c 0303 	adds.w	r3, ip, r3
 8001198:	f10e 30ff 	add.w	r0, lr, #4294967295
 800119c:	f080 811e 	bcs.w	80013dc <__udivmoddi4+0x298>
 80011a0:	4299      	cmp	r1, r3
 80011a2:	f240 811b 	bls.w	80013dc <__udivmoddi4+0x298>
 80011a6:	f1ae 0e02 	sub.w	lr, lr, #2
 80011aa:	4463      	add	r3, ip
 80011ac:	1a5b      	subs	r3, r3, r1
 80011ae:	b2a4      	uxth	r4, r4
 80011b0:	fbb3 f0f5 	udiv	r0, r3, r5
 80011b4:	fb05 3310 	mls	r3, r5, r0, r3
 80011b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011bc:	fb00 f707 	mul.w	r7, r0, r7
 80011c0:	42a7      	cmp	r7, r4
 80011c2:	d90a      	bls.n	80011da <__udivmoddi4+0x96>
 80011c4:	eb1c 0404 	adds.w	r4, ip, r4
 80011c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80011cc:	f080 8108 	bcs.w	80013e0 <__udivmoddi4+0x29c>
 80011d0:	42a7      	cmp	r7, r4
 80011d2:	f240 8105 	bls.w	80013e0 <__udivmoddi4+0x29c>
 80011d6:	4464      	add	r4, ip
 80011d8:	3802      	subs	r0, #2
 80011da:	1be4      	subs	r4, r4, r7
 80011dc:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80011e0:	2100      	movs	r1, #0
 80011e2:	b11e      	cbz	r6, 80011ec <__udivmoddi4+0xa8>
 80011e4:	40d4      	lsrs	r4, r2
 80011e6:	2300      	movs	r3, #0
 80011e8:	e9c6 4300 	strd	r4, r3, [r6]
 80011ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f0:	428b      	cmp	r3, r1
 80011f2:	d908      	bls.n	8001206 <__udivmoddi4+0xc2>
 80011f4:	2e00      	cmp	r6, #0
 80011f6:	f000 80ee 	beq.w	80013d6 <__udivmoddi4+0x292>
 80011fa:	2100      	movs	r1, #0
 80011fc:	e9c6 0500 	strd	r0, r5, [r6]
 8001200:	4608      	mov	r0, r1
 8001202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001206:	fab3 f183 	clz	r1, r3
 800120a:	2900      	cmp	r1, #0
 800120c:	d14a      	bne.n	80012a4 <__udivmoddi4+0x160>
 800120e:	42ab      	cmp	r3, r5
 8001210:	d302      	bcc.n	8001218 <__udivmoddi4+0xd4>
 8001212:	4282      	cmp	r2, r0
 8001214:	f200 80f9 	bhi.w	800140a <__udivmoddi4+0x2c6>
 8001218:	1a84      	subs	r4, r0, r2
 800121a:	eb65 0303 	sbc.w	r3, r5, r3
 800121e:	2001      	movs	r0, #1
 8001220:	4698      	mov	r8, r3
 8001222:	2e00      	cmp	r6, #0
 8001224:	d0e2      	beq.n	80011ec <__udivmoddi4+0xa8>
 8001226:	e9c6 4800 	strd	r4, r8, [r6]
 800122a:	e7df      	b.n	80011ec <__udivmoddi4+0xa8>
 800122c:	b902      	cbnz	r2, 8001230 <__udivmoddi4+0xec>
 800122e:	deff      	udf	#255	; 0xff
 8001230:	fab2 f282 	clz	r2, r2
 8001234:	2a00      	cmp	r2, #0
 8001236:	f040 8091 	bne.w	800135c <__udivmoddi4+0x218>
 800123a:	eba1 050c 	sub.w	r5, r1, ip
 800123e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001242:	fa1f fe8c 	uxth.w	lr, ip
 8001246:	2101      	movs	r1, #1
 8001248:	fbb5 f3f7 	udiv	r3, r5, r7
 800124c:	fb07 5013 	mls	r0, r7, r3, r5
 8001250:	0c25      	lsrs	r5, r4, #16
 8001252:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001256:	fb0e f003 	mul.w	r0, lr, r3
 800125a:	42a8      	cmp	r0, r5
 800125c:	d908      	bls.n	8001270 <__udivmoddi4+0x12c>
 800125e:	eb1c 0505 	adds.w	r5, ip, r5
 8001262:	f103 38ff 	add.w	r8, r3, #4294967295
 8001266:	d202      	bcs.n	800126e <__udivmoddi4+0x12a>
 8001268:	42a8      	cmp	r0, r5
 800126a:	f200 80cb 	bhi.w	8001404 <__udivmoddi4+0x2c0>
 800126e:	4643      	mov	r3, r8
 8001270:	1a2d      	subs	r5, r5, r0
 8001272:	b2a4      	uxth	r4, r4
 8001274:	fbb5 f0f7 	udiv	r0, r5, r7
 8001278:	fb07 5510 	mls	r5, r7, r0, r5
 800127c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001280:	fb0e fe00 	mul.w	lr, lr, r0
 8001284:	45a6      	cmp	lr, r4
 8001286:	d908      	bls.n	800129a <__udivmoddi4+0x156>
 8001288:	eb1c 0404 	adds.w	r4, ip, r4
 800128c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001290:	d202      	bcs.n	8001298 <__udivmoddi4+0x154>
 8001292:	45a6      	cmp	lr, r4
 8001294:	f200 80bb 	bhi.w	800140e <__udivmoddi4+0x2ca>
 8001298:	4628      	mov	r0, r5
 800129a:	eba4 040e 	sub.w	r4, r4, lr
 800129e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012a2:	e79e      	b.n	80011e2 <__udivmoddi4+0x9e>
 80012a4:	f1c1 0720 	rsb	r7, r1, #32
 80012a8:	408b      	lsls	r3, r1
 80012aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80012ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80012b2:	fa20 f407 	lsr.w	r4, r0, r7
 80012b6:	fa05 f301 	lsl.w	r3, r5, r1
 80012ba:	431c      	orrs	r4, r3
 80012bc:	40fd      	lsrs	r5, r7
 80012be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012c2:	fa00 f301 	lsl.w	r3, r0, r1
 80012c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80012ca:	0c20      	lsrs	r0, r4, #16
 80012cc:	fa1f fe8c 	uxth.w	lr, ip
 80012d0:	fb09 5518 	mls	r5, r9, r8, r5
 80012d4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80012d8:	fb08 f00e 	mul.w	r0, r8, lr
 80012dc:	42a8      	cmp	r0, r5
 80012de:	fa02 f201 	lsl.w	r2, r2, r1
 80012e2:	d90b      	bls.n	80012fc <__udivmoddi4+0x1b8>
 80012e4:	eb1c 0505 	adds.w	r5, ip, r5
 80012e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80012ec:	f080 8088 	bcs.w	8001400 <__udivmoddi4+0x2bc>
 80012f0:	42a8      	cmp	r0, r5
 80012f2:	f240 8085 	bls.w	8001400 <__udivmoddi4+0x2bc>
 80012f6:	f1a8 0802 	sub.w	r8, r8, #2
 80012fa:	4465      	add	r5, ip
 80012fc:	1a2d      	subs	r5, r5, r0
 80012fe:	b2a4      	uxth	r4, r4
 8001300:	fbb5 f0f9 	udiv	r0, r5, r9
 8001304:	fb09 5510 	mls	r5, r9, r0, r5
 8001308:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800130c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001310:	45ae      	cmp	lr, r5
 8001312:	d908      	bls.n	8001326 <__udivmoddi4+0x1e2>
 8001314:	eb1c 0505 	adds.w	r5, ip, r5
 8001318:	f100 34ff 	add.w	r4, r0, #4294967295
 800131c:	d26c      	bcs.n	80013f8 <__udivmoddi4+0x2b4>
 800131e:	45ae      	cmp	lr, r5
 8001320:	d96a      	bls.n	80013f8 <__udivmoddi4+0x2b4>
 8001322:	3802      	subs	r0, #2
 8001324:	4465      	add	r5, ip
 8001326:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800132a:	fba0 9402 	umull	r9, r4, r0, r2
 800132e:	eba5 050e 	sub.w	r5, r5, lr
 8001332:	42a5      	cmp	r5, r4
 8001334:	46c8      	mov	r8, r9
 8001336:	46a6      	mov	lr, r4
 8001338:	d356      	bcc.n	80013e8 <__udivmoddi4+0x2a4>
 800133a:	d053      	beq.n	80013e4 <__udivmoddi4+0x2a0>
 800133c:	b15e      	cbz	r6, 8001356 <__udivmoddi4+0x212>
 800133e:	ebb3 0208 	subs.w	r2, r3, r8
 8001342:	eb65 050e 	sbc.w	r5, r5, lr
 8001346:	fa05 f707 	lsl.w	r7, r5, r7
 800134a:	fa22 f301 	lsr.w	r3, r2, r1
 800134e:	40cd      	lsrs	r5, r1
 8001350:	431f      	orrs	r7, r3
 8001352:	e9c6 7500 	strd	r7, r5, [r6]
 8001356:	2100      	movs	r1, #0
 8001358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800135c:	f1c2 0320 	rsb	r3, r2, #32
 8001360:	fa20 f103 	lsr.w	r1, r0, r3
 8001364:	fa0c fc02 	lsl.w	ip, ip, r2
 8001368:	fa25 f303 	lsr.w	r3, r5, r3
 800136c:	4095      	lsls	r5, r2
 800136e:	430d      	orrs	r5, r1
 8001370:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001374:	fa1f fe8c 	uxth.w	lr, ip
 8001378:	fbb3 f1f7 	udiv	r1, r3, r7
 800137c:	fb07 3011 	mls	r0, r7, r1, r3
 8001380:	0c2b      	lsrs	r3, r5, #16
 8001382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001386:	fb01 f00e 	mul.w	r0, r1, lr
 800138a:	4298      	cmp	r0, r3
 800138c:	fa04 f402 	lsl.w	r4, r4, r2
 8001390:	d908      	bls.n	80013a4 <__udivmoddi4+0x260>
 8001392:	eb1c 0303 	adds.w	r3, ip, r3
 8001396:	f101 38ff 	add.w	r8, r1, #4294967295
 800139a:	d22f      	bcs.n	80013fc <__udivmoddi4+0x2b8>
 800139c:	4298      	cmp	r0, r3
 800139e:	d92d      	bls.n	80013fc <__udivmoddi4+0x2b8>
 80013a0:	3902      	subs	r1, #2
 80013a2:	4463      	add	r3, ip
 80013a4:	1a1b      	subs	r3, r3, r0
 80013a6:	b2ad      	uxth	r5, r5
 80013a8:	fbb3 f0f7 	udiv	r0, r3, r7
 80013ac:	fb07 3310 	mls	r3, r7, r0, r3
 80013b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80013b4:	fb00 f30e 	mul.w	r3, r0, lr
 80013b8:	42ab      	cmp	r3, r5
 80013ba:	d908      	bls.n	80013ce <__udivmoddi4+0x28a>
 80013bc:	eb1c 0505 	adds.w	r5, ip, r5
 80013c0:	f100 38ff 	add.w	r8, r0, #4294967295
 80013c4:	d216      	bcs.n	80013f4 <__udivmoddi4+0x2b0>
 80013c6:	42ab      	cmp	r3, r5
 80013c8:	d914      	bls.n	80013f4 <__udivmoddi4+0x2b0>
 80013ca:	3802      	subs	r0, #2
 80013cc:	4465      	add	r5, ip
 80013ce:	1aed      	subs	r5, r5, r3
 80013d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80013d4:	e738      	b.n	8001248 <__udivmoddi4+0x104>
 80013d6:	4631      	mov	r1, r6
 80013d8:	4630      	mov	r0, r6
 80013da:	e707      	b.n	80011ec <__udivmoddi4+0xa8>
 80013dc:	4686      	mov	lr, r0
 80013de:	e6e5      	b.n	80011ac <__udivmoddi4+0x68>
 80013e0:	4618      	mov	r0, r3
 80013e2:	e6fa      	b.n	80011da <__udivmoddi4+0x96>
 80013e4:	454b      	cmp	r3, r9
 80013e6:	d2a9      	bcs.n	800133c <__udivmoddi4+0x1f8>
 80013e8:	ebb9 0802 	subs.w	r8, r9, r2
 80013ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80013f0:	3801      	subs	r0, #1
 80013f2:	e7a3      	b.n	800133c <__udivmoddi4+0x1f8>
 80013f4:	4640      	mov	r0, r8
 80013f6:	e7ea      	b.n	80013ce <__udivmoddi4+0x28a>
 80013f8:	4620      	mov	r0, r4
 80013fa:	e794      	b.n	8001326 <__udivmoddi4+0x1e2>
 80013fc:	4641      	mov	r1, r8
 80013fe:	e7d1      	b.n	80013a4 <__udivmoddi4+0x260>
 8001400:	46d0      	mov	r8, sl
 8001402:	e77b      	b.n	80012fc <__udivmoddi4+0x1b8>
 8001404:	3b02      	subs	r3, #2
 8001406:	4465      	add	r5, ip
 8001408:	e732      	b.n	8001270 <__udivmoddi4+0x12c>
 800140a:	4608      	mov	r0, r1
 800140c:	e709      	b.n	8001222 <__udivmoddi4+0xde>
 800140e:	4464      	add	r4, ip
 8001410:	3802      	subs	r0, #2
 8001412:	e742      	b.n	800129a <__udivmoddi4+0x156>

08001414 <__aeabi_idiv0>:
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <usDelay>:
 *      Author: ADMIN
 */

#include "delay.h"
void usDelay(uint32_t uSec)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d801      	bhi.n	800142a <usDelay+0x12>
 8001426:	2302      	movs	r3, #2
 8001428:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <usDelay+0x5c>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <usDelay+0x5c>)
 8001434:	2201      	movs	r2, #1
 8001436:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <usDelay+0x5c>)
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <usDelay+0x5c>)
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <usDelay+0x5c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <usDelay+0x5c>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8001450:	bf00      	nop
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <usDelay+0x5c>)
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d1f9      	bne.n	8001452 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <usDelay+0x5c>)
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <usDelay+0x5c>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	6113      	str	r3, [r2, #16]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40014000 	.word	0x40014000

08001478 <setTimer0>:
int timer0_counter = 0;
int timer0_flag = 0;
int TIMER_CYCLE = 10;

void setTimer0(int duration)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <setTimer0+0x28>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	fb92 f3f3 	sdiv	r3, r2, r3
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <setTimer0+0x2c>)
 800148c:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <setTimer0+0x30>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000460 	.word	0x20000460
 80014a8:	20000464 	.word	0x20000464

080014ac <timer_run>:
void timer_run ()
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	if( timer0_counter > 0)
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <timer_run+0x2c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd04      	ble.n	80014c2 <timer_run+0x16>
	{
		timer0_counter --;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <timer_run+0x2c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <timer_run+0x2c>)
 80014c0:	6013      	str	r3, [r2, #0]
	}
	if( timer0_counter == 0) timer0_flag = 1;
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <timer_run+0x2c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <timer_run+0x24>
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <timer_run+0x30>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000460 	.word	0x20000460
 80014dc:	20000464 	.word	0x20000464

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e6:	f001 f8e9 	bl	80026bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ea:	f000 f931 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ee:	f000 fc01 	bl	8001cf4 <MX_GPIO_Init>
  MX_TIM5_Init();
 80014f2:	f000 fb2f 	bl	8001b54 <MX_TIM5_Init>
  MX_DMA_Init();
 80014f6:	f000 fbdd 	bl	8001cb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014fa:	f000 fbb1 	bl	8001c60 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80014fe:	f000 f98f 	bl	8001820 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001502:	f000 f9e5 	bl	80018d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001506:	f000 fa59 	bl	80019bc <MX_TIM3_Init>
  MX_TIM4_Init();
 800150a:	f000 faab 	bl	8001a64 <MX_TIM4_Init>
  MX_TIM9_Init();
 800150e:	f000 fb6f 	bl	8001bf0 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  //Interrupt
  HAL_TIM_Base_Start_IT (& htim5 );
 8001512:	487a      	ldr	r0, [pc, #488]	; (80016fc <main+0x21c>)
 8001514:	f002 fc1e 	bl	8003d54 <HAL_TIM_Base_Start_IT>
  //HCSR04



  //PID init
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001518:	2104      	movs	r1, #4
 800151a:	4879      	ldr	r0, [pc, #484]	; (8001700 <main+0x220>)
 800151c:	f002 fe28 	bl	8004170 <HAL_TIM_Encoder_Start>
  	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //start pwm
 8001520:	2100      	movs	r1, #0
 8001522:	4878      	ldr	r0, [pc, #480]	; (8001704 <main+0x224>)
 8001524:	f002 fcce 	bl	8003ec4 <HAL_TIM_PWM_Start>
  	  htim2.Instance -> CCR1 = 100;
 8001528:	4b76      	ldr	r3, [pc, #472]	; (8001704 <main+0x224>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2264      	movs	r2, #100	; 0x64
 800152e:	635a      	str	r2, [r3, #52]	; 0x34
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001536:	4874      	ldr	r0, [pc, #464]	; (8001708 <main+0x228>)
 8001538:	f001 ff4d 	bl	80033d6 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001542:	4871      	ldr	r0, [pc, #452]	; (8001708 <main+0x228>)
 8001544:	f001 ff47 	bl	80033d6 <HAL_GPIO_WritePin>

  	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001548:	2104      	movs	r1, #4
 800154a:	4870      	ldr	r0, [pc, #448]	; (800170c <main+0x22c>)
 800154c:	f002 fe10 	bl	8004170 <HAL_TIM_Encoder_Start>
  	    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //start pwm
 8001550:	2100      	movs	r1, #0
 8001552:	486f      	ldr	r0, [pc, #444]	; (8001710 <main+0x230>)
 8001554:	f002 fcb6 	bl	8003ec4 <HAL_TIM_PWM_Start>
  	    htim4.Instance -> CCR1 = 100;
 8001558:	4b6d      	ldr	r3, [pc, #436]	; (8001710 <main+0x230>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2264      	movs	r2, #100	; 0x64
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
  	    //  last = HAL_GetTick();
  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2101      	movs	r1, #1
 8001564:	4868      	ldr	r0, [pc, #416]	; (8001708 <main+0x228>)
 8001566:	f001 ff36 	bl	80033d6 <HAL_GPIO_WritePin>
  	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2102      	movs	r1, #2
 800156e:	4866      	ldr	r0, [pc, #408]	; (8001708 <main+0x228>)
 8001570:	f001 ff31 	bl	80033d6 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //READ hcsr04
	  for(int i = 0; i < HCSR04_UNITS;i++)
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	e021      	b.n	80015be <main+0xde>
	  {
		  real_distance[i] = GetDistance(i);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fcd0 	bl	8001f20 <GetDistance>
 8001580:	4602      	mov	r2, r0
 8001582:	4964      	ldr	r1, [pc, #400]	; (8001714 <main+0x234>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", real_distance[i]);
 800158a:	4a62      	ldr	r2, [pc, #392]	; (8001714 <main+0x234>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f894 	bl	80006c0 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	495e      	ldr	r1, [pc, #376]	; (8001718 <main+0x238>)
 800159e:	485f      	ldr	r0, [pc, #380]	; (800171c <main+0x23c>)
 80015a0:	f005 f90c 	bl	80067bc <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 80015a4:	485d      	ldr	r0, [pc, #372]	; (800171c <main+0x23c>)
 80015a6:	f7fe fe1b 	bl	80001e0 <strlen>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	2364      	movs	r3, #100	; 0x64
 80015b0:	495a      	ldr	r1, [pc, #360]	; (800171c <main+0x23c>)
 80015b2:	485b      	ldr	r0, [pc, #364]	; (8001720 <main+0x240>)
 80015b4:	f003 fcab 	bl	8004f0e <HAL_UART_Transmit>
	  for(int i = 0; i < HCSR04_UNITS;i++)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	ddda      	ble.n	800157a <main+0x9a>
	  }
	  //READ IR
	  ir_sensor = HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin);
 80015c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015c8:	484f      	ldr	r0, [pc, #316]	; (8001708 <main+0x228>)
 80015ca:	f001 feed 	bl	80033a8 <HAL_GPIO_ReadPin>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b54      	ldr	r3, [pc, #336]	; (8001724 <main+0x244>)
 80015d4:	601a      	str	r2, [r3, #0]
//	  real_distance = GetDistance(0);
	  //PID
	  if(HAL_GetTick() - last >= T)
 80015d6:	f001 f8d5 	bl	8002784 <HAL_GetTick>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <main+0x248>)
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	4a52      	ldr	r2, [pc, #328]	; (800172c <main+0x24c>)
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d379      	bcc.n	80016de <main+0x1fe>
	  	  {
	  		  last = HAL_GetTick();
 80015ea:	f001 f8cb 	bl	8002784 <HAL_GetTick>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <main+0x248>)
 80015f4:	601a      	str	r2, [r3, #0]
	  		  encoder_xung[MTR_LEFT] = __HAL_TIM_GET_COUNTER(&htim1);
 80015f6:	4b42      	ldr	r3, [pc, #264]	; (8001700 <main+0x220>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <main+0x250>)
 8001600:	801a      	strh	r2, [r3, #0]
	  		  encoder_xung[MTR_RIGHT] = __HAL_TIM_GET_COUNTER(&htim3);
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <main+0x22c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b49      	ldr	r3, [pc, #292]	; (8001730 <main+0x250>)
 800160c:	805a      	strh	r2, [r3, #2]
	  		  delta = encoder_xung[MTR_RIGHT] - encoder_xung[MTR_LEFT];
 800160e:	4b48      	ldr	r3, [pc, #288]	; (8001730 <main+0x250>)
 8001610:	885b      	ldrh	r3, [r3, #2]
 8001612:	461a      	mov	r2, r3
 8001614:	4b46      	ldr	r3, [pc, #280]	; (8001730 <main+0x250>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	4a46      	ldr	r2, [pc, #280]	; (8001734 <main+0x254>)
 800161c:	6013      	str	r3, [r2, #0]

	  		  tocdothuc[MTR_RIGHT] = ((encoder_xung[MTR_RIGHT]) * (60*(1000/T))) / (4 * 400);
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <main+0x24c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001626:	fb92 f3f3 	sdiv	r3, r2, r3
 800162a:	4a41      	ldr	r2, [pc, #260]	; (8001730 <main+0x250>)
 800162c:	8852      	ldrh	r2, [r2, #2]
 800162e:	fb03 f202 	mul.w	r2, r3, r2
 8001632:	4613      	mov	r3, r2
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4a3f      	ldr	r2, [pc, #252]	; (8001738 <main+0x258>)
 800163c:	fb82 1203 	smull	r1, r2, r2, r3
 8001640:	1252      	asrs	r2, r2, #9
 8001642:	17db      	asrs	r3, r3, #31
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b3c      	ldr	r3, [pc, #240]	; (800173c <main+0x25c>)
 800164a:	805a      	strh	r2, [r3, #2]
	  		  tocdothuc[MTR_LEFT]  = ((encoder_xung[MTR_LEFT]) * (60*(1000/T))) / (4 * 400);
 800164c:	4b37      	ldr	r3, [pc, #220]	; (800172c <main+0x24c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001654:	fb92 f3f3 	sdiv	r3, r2, r3
 8001658:	4a35      	ldr	r2, [pc, #212]	; (8001730 <main+0x250>)
 800165a:	8812      	ldrh	r2, [r2, #0]
 800165c:	fb03 f202 	mul.w	r2, r3, r2
 8001660:	4613      	mov	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4a33      	ldr	r2, [pc, #204]	; (8001738 <main+0x258>)
 800166a:	fb82 1203 	smull	r1, r2, r2, r3
 800166e:	1252      	asrs	r2, r2, #9
 8001670:	17db      	asrs	r3, r3, #31
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <main+0x25c>)
 8001678:	801a      	strh	r2, [r3, #0]


	  		  Output[MTR_RIGHT] = PIDLienTuc(Output[MTR_RIGHT], tocdodat[MTR_RIGHT], tocdothuc[MTR_RIGHT], MTR_RIGHT);
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <main+0x260>)
 800167c:	885b      	ldrh	r3, [r3, #2]
 800167e:	4618      	mov	r0, r3
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <main+0x264>)
 8001682:	885b      	ldrh	r3, [r3, #2]
 8001684:	4619      	mov	r1, r3
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <main+0x25c>)
 8001688:	885b      	ldrh	r3, [r3, #2]
 800168a:	461a      	mov	r2, r3
 800168c:	2301      	movs	r3, #1
 800168e:	f000 fba7 	bl	8001de0 <PIDLienTuc>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <main+0x260>)
 8001698:	805a      	strh	r2, [r3, #2]
	  		  Output[MTR_LEFT]  = PIDLienTuc(Output[MTR_LEFT],  tocdodat[MTR_LEFT],  tocdothuc[MTR_LEFT], MTR_LEFT);
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <main+0x260>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <main+0x264>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4b25      	ldr	r3, [pc, #148]	; (800173c <main+0x25c>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	f000 fb97 	bl	8001de0 <PIDLienTuc>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <main+0x260>)
 80016b8:	801a      	strh	r2, [r3, #0]
	  		  __HAL_TIM_SET_COUNTER(&htim1, 0 );
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <main+0x220>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
	  		  __HAL_TIM_SET_COUNTER(&htim3, 0 );
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <main+0x22c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
	  		  htim2.Instance->CCR1 = Output[MTR_LEFT];
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <main+0x260>)
 80016cc:	881a      	ldrh	r2, [r3, #0]
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <main+0x224>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
	  		  htim4.Instance->CCR1 = Output[MTR_RIGHT];
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <main+0x260>)
 80016d6:	885a      	ldrh	r2, [r3, #2]
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <main+0x230>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34




	  //Driving re trai pha tron bao nhieu s de ra thuat toan con ran ??
	  if( timer0_flag == 1 && retraiphai)
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <main+0x268>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	f47f af46 	bne.w	8001574 <main+0x94>
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <main+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f43f af41 	beq.w	8001574 <main+0x94>
	  {


		  setTimer0 (1000) ;
 80016f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f6:	f7ff febf 	bl	8001478 <setTimer0>
	  for(int i = 0; i < HCSR04_UNITS;i++)
 80016fa:	e73b      	b.n	8001574 <main+0x94>
 80016fc:	2000032c 	.word	0x2000032c
 8001700:	2000020c 	.word	0x2000020c
 8001704:	20000254 	.word	0x20000254
 8001708:	40020400 	.word	0x40020400
 800170c:	2000029c 	.word	0x2000029c
 8001710:	200002e4 	.word	0x200002e4
 8001714:	2000046c 	.word	0x2000046c
 8001718:	08008ca0 	.word	0x08008ca0
 800171c:	20000478 	.word	0x20000478
 8001720:	200003bc 	.word	0x200003bc
 8001724:	200004dc 	.word	0x200004dc
 8001728:	200004e0 	.word	0x200004e0
 800172c:	20000004 	.word	0x20000004
 8001730:	200004e4 	.word	0x200004e4
 8001734:	200004f0 	.word	0x200004f0
 8001738:	51eb851f 	.word	0x51eb851f
 800173c:	200004e8 	.word	0x200004e8
 8001740:	200004ec 	.word	0x200004ec
 8001744:	20000008 	.word	0x20000008
 8001748:	20000464 	.word	0x20000464
 800174c:	20000468 	.word	0x20000468

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b094      	sub	sp, #80	; 0x50
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f004 fbc8 	bl	8005ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <SystemClock_Config+0xc8>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a26      	ldr	r2, [pc, #152]	; (8001818 <SystemClock_Config+0xc8>)
 800177e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <SystemClock_Config+0xc8>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <SystemClock_Config+0xcc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a20      	ldr	r2, [pc, #128]	; (800181c <SystemClock_Config+0xcc>)
 800179a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <SystemClock_Config+0xcc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b6:	2302      	movs	r3, #2
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80017c0:	230c      	movs	r3, #12
 80017c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80017c4:	2360      	movs	r3, #96	; 0x60
 80017c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017cc:	2304      	movs	r3, #4
 80017ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 fe17 	bl	8003408 <HAL_RCC_OscConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017e0:	f000 fb98 	bl	8001f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e4:	230f      	movs	r3, #15
 80017e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e8:	2302      	movs	r3, #2
 80017ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	2103      	movs	r1, #3
 8001800:	4618      	mov	r0, r3
 8001802:	f002 f879 	bl	80038f8 <HAL_RCC_ClockConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800180c:	f000 fb82 	bl	8001f14 <Error_Handler>
  }
}
 8001810:	bf00      	nop
 8001812:	3750      	adds	r7, #80	; 0x50
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	40007000 	.word	0x40007000

08001820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	; 0x30
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2224      	movs	r2, #36	; 0x24
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f004 fb60 	bl	8005ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <MX_TIM1_Init+0xa8>)
 800183e:	4a23      	ldr	r2, [pc, #140]	; (80018cc <MX_TIM1_Init+0xac>)
 8001840:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <MX_TIM1_Init+0xa8>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_TIM1_Init+0xa8>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <MX_TIM1_Init+0xa8>)
 8001850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001854:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <MX_TIM1_Init+0xa8>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_TIM1_Init+0xa8>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <MX_TIM1_Init+0xa8>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001868:	2303      	movs	r3, #3
 800186a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001870:	2301      	movs	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <MX_TIM1_Init+0xa8>)
 8001894:	f002 fbc6 	bl	8004024 <HAL_TIM_Encoder_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800189e:	f000 fb39 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <MX_TIM1_Init+0xa8>)
 80018b0:	f003 fa62 	bl	8004d78 <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80018ba:	f000 fb2b 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	3730      	adds	r7, #48	; 0x30
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000020c 	.word	0x2000020c
 80018cc:	40010000 	.word	0x40010000

080018d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000-1;
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <MX_TIM2_Init+0xe8>)
 800190a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800190e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001918:	f240 32e7 	movw	r2, #999	; 0x3e7
 800191c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192a:	4823      	ldr	r0, [pc, #140]	; (80019b8 <MX_TIM2_Init+0xe8>)
 800192c:	f002 f9c2 	bl	8003cb4 <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001936:	f000 faed 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001944:	4619      	mov	r1, r3
 8001946:	481c      	ldr	r0, [pc, #112]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001948:	f002 fe6a 	bl	8004620 <HAL_TIM_ConfigClockSource>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001952:	f000 fadf 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001956:	4818      	ldr	r0, [pc, #96]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001958:	f002 fa5c 	bl	8003e14 <HAL_TIM_PWM_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001962:	f000 fad7 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	4619      	mov	r1, r3
 8001974:	4810      	ldr	r0, [pc, #64]	; (80019b8 <MX_TIM2_Init+0xe8>)
 8001976:	f003 f9ff 	bl	8004d78 <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001980:	f000 fac8 	bl	8001f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001984:	2360      	movs	r3, #96	; 0x60
 8001986:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	4619      	mov	r1, r3
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <MX_TIM2_Init+0xe8>)
 800199c:	f002 fd7e 	bl	800449c <HAL_TIM_PWM_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019a6:	f000 fab5 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019aa:	4803      	ldr	r0, [pc, #12]	; (80019b8 <MX_TIM2_Init+0xe8>)
 80019ac:	f000 fc6e 	bl	800228c <HAL_TIM_MspPostInit>

}
 80019b0:	bf00      	nop
 80019b2:	3738      	adds	r7, #56	; 0x38
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000254 	.word	0x20000254

080019bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08c      	sub	sp, #48	; 0x30
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	2224      	movs	r2, #36	; 0x24
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 fa92 	bl	8005ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MX_TIM3_Init+0xa0>)
 80019da:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <MX_TIM3_Init+0xa4>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <MX_TIM3_Init+0xa0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_TIM3_Init+0xa0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_TIM3_Init+0xa0>)
 80019ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_TIM3_Init+0xa0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_TIM3_Init+0xa0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019fe:	2303      	movs	r3, #3
 8001a00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a06:	2301      	movs	r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a16:	2301      	movs	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_TIM3_Init+0xa0>)
 8001a2a:	f002 fafb 	bl	8004024 <HAL_TIM_Encoder_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a34:	f000 fa6e 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_TIM3_Init+0xa0>)
 8001a46:	f003 f997 	bl	8004d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a50:	f000 fa60 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	; 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000029c 	.word	0x2000029c
 8001a60:	40000400 	.word	0x40000400

08001a64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08e      	sub	sp, #56	; 0x38
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	f107 0320 	add.w	r3, r7, #32
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001a96:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <MX_TIM4_Init+0xec>)
 8001a98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001a9c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001aa0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001aa8:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001aaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001abc:	4823      	ldr	r0, [pc, #140]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001abe:	f002 f8f9 	bl	8003cb4 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001ac8:	f000 fa24 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481c      	ldr	r0, [pc, #112]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001ada:	f002 fda1 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ae4:	f000 fa16 	bl	8001f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ae8:	4818      	ldr	r0, [pc, #96]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001aea:	f002 f993 	bl	8003e14 <HAL_TIM_PWM_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001af4:	f000 fa0e 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	4619      	mov	r1, r3
 8001b06:	4811      	ldr	r0, [pc, #68]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001b08:	f003 f936 	bl	8004d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b12:	f000 f9ff 	bl	8001f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b16:	2360      	movs	r3, #96	; 0x60
 8001b18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4807      	ldr	r0, [pc, #28]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001b2e:	f002 fcb5 	bl	800449c <HAL_TIM_PWM_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001b38:	f000 f9ec 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <MX_TIM4_Init+0xe8>)
 8001b3e:	f000 fba5 	bl	800228c <HAL_TIM_MspPostInit>

}
 8001b42:	bf00      	nop
 8001b44:	3738      	adds	r7, #56	; 0x38
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002e4 	.word	0x200002e4
 8001b50:	40000800 	.word	0x40000800

08001b54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <MX_TIM5_Init+0x94>)
 8001b72:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <MX_TIM5_Init+0x98>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000-1;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <MX_TIM5_Init+0x94>)
 8001b78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <MX_TIM5_Init+0x94>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_TIM5_Init+0x94>)
 8001b86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_TIM5_Init+0x94>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_TIM5_Init+0x94>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b98:	4813      	ldr	r0, [pc, #76]	; (8001be8 <MX_TIM5_Init+0x94>)
 8001b9a:	f002 f88b 	bl	8003cb4 <HAL_TIM_Base_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ba4:	f000 f9b6 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <MX_TIM5_Init+0x94>)
 8001bb6:	f002 fd33 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001bc0:	f000 f9a8 	bl	8001f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bcc:	463b      	mov	r3, r7
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_TIM5_Init+0x94>)
 8001bd2:	f003 f8d1 	bl	8004d78 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001bdc:	f000 f99a 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000032c 	.word	0x2000032c
 8001bec:	40000c00 	.word	0x40000c00

08001bf0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_TIM9_Init+0x68>)
 8001c04:	4a15      	ldr	r2, [pc, #84]	; (8001c5c <MX_TIM9_Init+0x6c>)
 8001c06:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <MX_TIM9_Init+0x68>)
 8001c0a:	2263      	movs	r2, #99	; 0x63
 8001c0c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_TIM9_Init+0x68>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0;
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <MX_TIM9_Init+0x68>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_TIM9_Init+0x68>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <MX_TIM9_Init+0x68>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001c26:	480c      	ldr	r0, [pc, #48]	; (8001c58 <MX_TIM9_Init+0x68>)
 8001c28:	f002 f844 	bl	8003cb4 <HAL_TIM_Base_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8001c32:	f000 f96f 	bl	8001f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_TIM9_Init+0x68>)
 8001c42:	f002 fced 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8001c4c:	f000 f962 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000374 	.word	0x20000374
 8001c5c:	40014000 	.word	0x40014000

08001c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <MX_USART2_UART_Init+0x50>)
 8001c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c86:	220c      	movs	r2, #12
 8001c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_USART2_UART_Init+0x4c>)
 8001c98:	f003 f8ec 	bl	8004e74 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca2:	f000 f937 	bl	8001f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200003bc 	.word	0x200003bc
 8001cb0:	40004400 	.word	0x40004400

08001cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_DMA_Init+0x3c>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <MX_DMA_Init+0x3c>)
 8001cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_DMA_Init+0x3c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2010      	movs	r0, #16
 8001cdc:	f000 fe33 	bl	8002946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ce0:	2010      	movs	r0, #16
 8001ce2:	f000 fe4c 	bl	800297e <HAL_NVIC_EnableIRQ>

}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <MX_GPIO_Init+0xe0>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <MX_GPIO_Init+0xe0>)
 8001d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <MX_GPIO_Init+0xe0>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <MX_GPIO_Init+0xe0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a29      	ldr	r2, [pc, #164]	; (8001dd4 <MX_GPIO_Init+0xe0>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <MX_GPIO_Init+0xe0>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <MX_GPIO_Init+0xe0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <MX_GPIO_Init+0xe0>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <MX_GPIO_Init+0xe0>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG2_Pin|TRIG_Pin|TRIG1_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f648 0120 	movw	r1, #34848	; 0x8820
 8001d64:	481c      	ldr	r0, [pc, #112]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d66:	f001 fb36 	bl	80033d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEFTCONG_Pin|LEFTTRU_Pin|IR_Pin|RIGHTCONG_Pin
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f24d 0103 	movw	r1, #53251	; 0xd003
 8001d70:	481a      	ldr	r0, [pc, #104]	; (8001ddc <MX_GPIO_Init+0xe8>)
 8001d72:	f001 fb30 	bl	80033d6 <HAL_GPIO_WritePin>
                          |RIGHTTRU_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ECHO2_Pin ECHO_Pin ECHO1_Pin */
  GPIO_InitStruct.Pin = ECHO2_Pin|ECHO_Pin|ECHO1_Pin;
 8001d76:	f244 4310 	movw	r3, #17424	; 0x4410
 8001d7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4813      	ldr	r0, [pc, #76]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001d8c:	f001 f98a 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG2_Pin TRIG_Pin TRIG1_Pin */
  GPIO_InitStruct.Pin = TRIG2_Pin|TRIG_Pin|TRIG1_Pin;
 8001d90:	f648 0320 	movw	r3, #34848	; 0x8820
 8001d94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4619      	mov	r1, r3
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <MX_GPIO_Init+0xe4>)
 8001daa:	f001 f97b 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFTCONG_Pin LEFTTRU_Pin IR_Pin RIGHTCONG_Pin
                           RIGHTTRU_Pin */
  GPIO_InitStruct.Pin = LEFTCONG_Pin|LEFTTRU_Pin|IR_Pin|RIGHTCONG_Pin
 8001dae:	f24d 0303 	movw	r3, #53251	; 0xd003
 8001db2:	60fb      	str	r3, [r7, #12]
                          |RIGHTTRU_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_GPIO_Init+0xe8>)
 8001dc8:	f001 f96c 	bl	80030a4 <HAL_GPIO_Init>

}
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020400 	.word	0x40020400

08001de0 <PIDLienTuc>:
//	usTIM->CR1 |= 1; 		//Enables the counter
//	while((usTIM->SR&0x0001) != 1);
//	usTIM->SR &= ~(0x0001);
//}

int PIDLienTuc(int Output, int tocdodat, int tocdothuc, int MOTOR){
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
	float outpid = 0;
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
	error1[MOTOR] = abs(tocdodat) - abs(tocdothuc);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001dfa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bfb8      	it	lt
 8001e04:	425b      	neglt	r3, r3
 8001e06:	1ad2      	subs	r2, r2, r3
 8001e08:	4938      	ldr	r1, [pc, #224]	; (8001eec <PIDLienTuc+0x10c>)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	outpid = (Kp * error1[MOTOR]) + (Kd * (error1[MOTOR] - last_error1[MOTOR]));
 8001e10:	4a36      	ldr	r2, [pc, #216]	; (8001eec <PIDLienTuc+0x10c>)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff f88b 	bl	8000f34 <__aeabi_i2f>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <PIDLienTuc+0x110>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f7fe fa32 	bl	8000290 <__aeabi_fmul>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461c      	mov	r4, r3
 8001e30:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <PIDLienTuc+0x10c>)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e38:	492e      	ldr	r1, [pc, #184]	; (8001ef4 <PIDLienTuc+0x114>)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f876 	bl	8000f34 <__aeabi_i2f>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <PIDLienTuc+0x118>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f7fe fa1d 	bl	8000290 <__aeabi_fmul>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7fe ffb6 	bl	8000dcc <__addsf3>
 8001e60:	4603      	mov	r3, r0
 8001e62:	617b      	str	r3, [r7, #20]
	last_error1[MOTOR] = error1[MOTOR];
 8001e64:	4a21      	ldr	r2, [pc, #132]	; (8001eec <PIDLienTuc+0x10c>)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e6c:	4921      	ldr	r1, [pc, #132]	; (8001ef4 <PIDLienTuc+0x114>)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(Output + outpid >= 999)
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff f85d 	bl	8000f34 <__aeabi_i2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6979      	ldr	r1, [r7, #20]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe ffa4 	bl	8000dcc <__addsf3>
 8001e84:	4603      	mov	r3, r0
 8001e86:	491d      	ldr	r1, [pc, #116]	; (8001efc <PIDLienTuc+0x11c>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f909 	bl	80010a0 <__aeabi_fcmpge>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <PIDLienTuc+0xbc>
	{
		Output = 999;
 8001e94:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e021      	b.n	8001ee0 <PIDLienTuc+0x100>
	}
	else if(Output + outpid <0)
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff f849 	bl	8000f34 <__aeabi_i2f>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6979      	ldr	r1, [r7, #20]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe ff90 	bl	8000dcc <__addsf3>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f8e0 	bl	8001078 <__aeabi_fcmplt>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <PIDLienTuc+0xe4>
	{
		Output = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e00d      	b.n	8001ee0 <PIDLienTuc+0x100>
	}
	else
	{
		Output = Output + outpid;
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff f835 	bl	8000f34 <__aeabi_i2f>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6979      	ldr	r1, [r7, #20]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe ff7c 	bl	8000dcc <__addsf3>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f8f6 	bl	80010c8 <__aeabi_f2iz>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
	}
	return Output;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd90      	pop	{r4, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200004f4 	.word	0x200004f4
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	200004fc 	.word	0x200004fc
 8001ef8:	20000010 	.word	0x20000010
 8001efc:	4479c000 	.word	0x4479c000

08001f00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	timer_run ();
 8001f08:	f7ff fad0 	bl	80014ac <timer_run>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f18:	b672      	cpsid	i
}
 8001f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <Error_Handler+0x8>
	...

08001f20 <GetDistance>:

const float speedOfSound = 0.0343/2;
uint32_t numTicks = 0;
float distance[HCSR04_UNITS]={0, 0};
float GetDistance(int index)
{
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(HCSR04_CfgParam[index].SR04_TRIGGER_GPIO, HCSR04_CfgParam[index].SR04_TRIGGER_Pin, GPIO_PIN_RESET);
 8001f28:	4a4f      	ldr	r2, [pc, #316]	; (8002068 <GetDistance+0x148>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	4a4d      	ldr	r2, [pc, #308]	; (8002068 <GetDistance+0x148>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4619      	mov	r1, r3
 8001f42:	f001 fa48 	bl	80033d6 <HAL_GPIO_WritePin>
	usDelay(3);
 8001f46:	2003      	movs	r0, #3
 8001f48:	f7ff fa66 	bl	8001418 <usDelay>

		  		//*** START Ultrasonic measure routine ***//
		  		//1. Output 10 usec TRIG
	HAL_GPIO_WritePin(HCSR04_CfgParam[index].SR04_TRIGGER_GPIO, HCSR04_CfgParam[index].SR04_TRIGGER_Pin, GPIO_PIN_SET);
 8001f4c:	4a46      	ldr	r2, [pc, #280]	; (8002068 <GetDistance+0x148>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	4a44      	ldr	r2, [pc, #272]	; (8002068 <GetDistance+0x148>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3304      	adds	r3, #4
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	4619      	mov	r1, r3
 8001f66:	f001 fa36 	bl	80033d6 <HAL_GPIO_WritePin>
	usDelay(10);
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f7ff fa54 	bl	8001418 <usDelay>
	HAL_GPIO_WritePin(HCSR04_CfgParam[index].SR04_TRIGGER_GPIO, HCSR04_CfgParam[index].SR04_TRIGGER_Pin, GPIO_PIN_RESET);
 8001f70:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <GetDistance+0x148>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4413      	add	r3, r2
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <GetDistance+0x148>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f001 fa24 	bl	80033d6 <HAL_GPIO_WritePin>

		  		//2. Wait for ECHO pin rising edge
		  		while(HAL_GPIO_ReadPin(HCSR04_CfgParam[index].SR04_ECHO_GPIO, HCSR04_CfgParam[index].SR04_ECHO_Pin) == GPIO_PIN_RESET);
 8001f8e:	bf00      	nop
 8001f90:	4a35      	ldr	r2, [pc, #212]	; (8002068 <GetDistance+0x148>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	4413      	add	r3, r2
 8001f98:	3308      	adds	r3, #8
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4932      	ldr	r1, [pc, #200]	; (8002068 <GetDistance+0x148>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	440b      	add	r3, r1
 8001fa4:	330c      	adds	r3, #12
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f001 f9fc 	bl	80033a8 <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0ec      	beq.n	8001f90 <GetDistance+0x70>

		  		//3. Start measuring ECHO pulse width in usec
		  		numTicks = 0;
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <GetDistance+0x14c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
		  		while(HAL_GPIO_ReadPin(HCSR04_CfgParam[index].SR04_ECHO_GPIO, HCSR04_CfgParam[index].SR04_ECHO_Pin) == GPIO_PIN_SET)
 8001fbc:	e007      	b.n	8001fce <GetDistance+0xae>
		  		{
		  			numTicks++;
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <GetDistance+0x14c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <GetDistance+0x14c>)
 8001fc6:	6013      	str	r3, [r2, #0]
		  			usDelay(2); //2.8usec
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f7ff fa25 	bl	8001418 <usDelay>
		  		while(HAL_GPIO_ReadPin(HCSR04_CfgParam[index].SR04_ECHO_GPIO, HCSR04_CfgParam[index].SR04_ECHO_Pin) == GPIO_PIN_SET)
 8001fce:	4a26      	ldr	r2, [pc, #152]	; (8002068 <GetDistance+0x148>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4923      	ldr	r1, [pc, #140]	; (8002068 <GetDistance+0x148>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	440b      	add	r3, r1
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f001 f9dd 	bl	80033a8 <HAL_GPIO_ReadPin>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d0e4      	beq.n	8001fbe <GetDistance+0x9e>
		  		};

		  		//4. Estimate distance in cm
		  		distance[index] = (numTicks + 0.0f)*2.8*speedOfSound;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <GetDistance+0x14c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe ff97 	bl	8000f2c <__aeabi_ui2f>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f04f 0100 	mov.w	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fee1 	bl	8000dcc <__addsf3>
 800200a:	4603      	mov	r3, r0
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fb57 	bl	80006c0 <__aeabi_f2d>
 8002012:	a313      	add	r3, pc, #76	; (adr r3, 8002060 <GetDistance+0x140>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	f7fe fbaa 	bl	8000770 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4614      	mov	r4, r2
 8002022:	461d      	mov	r5, r3
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <GetDistance+0x150>)
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fb4a 	bl	80006c0 <__aeabi_f2d>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	f7fe fb9c 	bl	8000770 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	f7fe fe6e 	bl	8000d20 <__aeabi_d2f>
 8002044:	4602      	mov	r2, r0
 8002046:	490b      	ldr	r1, [pc, #44]	; (8002074 <GetDistance+0x154>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  		return distance[index];
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <GetDistance+0x154>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bdb0      	pop	{r4, r5, r7, pc}
 800205e:	bf00      	nop
 8002060:	66666666 	.word	0x66666666
 8002064:	40066666 	.word	0x40066666
 8002068:	08008cb8 	.word	0x08008cb8
 800206c:	20000504 	.word	0x20000504
 8002070:	3c8c7e28 	.word	0x3c8c7e28
 8002074:	20000508 	.word	0x20000508

08002078 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_MspInit+0x48>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <HAL_MspInit+0x48>)
 8002088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_MspInit+0x48>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_MspInit+0x48>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <HAL_MspInit+0x48>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_MspInit+0x48>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40023800 	.word	0x40023800

080020c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a32      	ldr	r2, [pc, #200]	; (80021ac <HAL_TIM_Encoder_MspInit+0xe8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d12d      	bne.n	8002142 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a30      	ldr	r2, [pc, #192]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ALEFT_Pin|BLEFT_Pin;
 800211e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002130:	2301      	movs	r3, #1
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	481e      	ldr	r0, [pc, #120]	; (80021b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800213c:	f000 ffb2 	bl	80030a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002140:	e030      	b.n	80021a4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d12b      	bne.n	80021a4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6313      	str	r3, [r2, #48]	; 0x30
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xec>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARIGHT_Pin|BRIGHT_Pin;
 8002184:	23c0      	movs	r3, #192	; 0xc0
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002194:	2302      	movs	r3, #2
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80021a0:	f000 ff80 	bl	80030a4 <HAL_GPIO_Init>
}
 80021a4:	bf00      	nop
 80021a6:	3730      	adds	r7, #48	; 0x30
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40000400 	.word	0x40000400

080021bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4a29      	ldr	r2, [pc, #164]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
 80021de:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80021ea:	e042      	b.n	8002272 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a23      	ldr	r2, [pc, #140]	; (8002280 <HAL_TIM_Base_MspInit+0xc4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
}
 8002212:	e02e      	b.n	8002272 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_TIM_Base_MspInit+0xc8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d116      	bne.n	800224c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 8002228:	f043 0308 	orr.w	r3, r3, #8
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2032      	movs	r0, #50	; 0x32
 8002240:	f000 fb81 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002244:	2032      	movs	r0, #50	; 0x32
 8002246:	f000 fb9a 	bl	800297e <HAL_NVIC_EnableIRQ>
}
 800224a:	e012      	b.n	8002272 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM9)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <HAL_TIM_Base_MspInit+0xcc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10d      	bne.n	8002272 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a07      	ldr	r2, [pc, #28]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_TIM_Base_MspInit+0xc0>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40000800 	.word	0x40000800
 8002284:	40000c00 	.word	0x40000c00
 8002288:	40014000 	.word	0x40014000

0800228c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d11e      	bne.n	80022ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_TIM_MspPostInit+0xb0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a21      	ldr	r2, [pc, #132]	; (800233c <HAL_TIM_MspPostInit+0xb0>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_TIM_MspPostInit+0xb0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWMLEFT_Pin;
 80022ca:	2301      	movs	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022da:	2301      	movs	r3, #1
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMLEFT_GPIO_Port, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4816      	ldr	r0, [pc, #88]	; (8002340 <HAL_TIM_MspPostInit+0xb4>)
 80022e6:	f000 fedd 	bl	80030a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022ea:	e022      	b.n	8002332 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_TIM_MspPostInit+0xb8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d11d      	bne.n	8002332 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_TIM_MspPostInit+0xb0>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_TIM_MspPostInit+0xb0>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_TIM_MspPostInit+0xb0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMRIGHT_Pin;
 8002312:	2340      	movs	r3, #64	; 0x40
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002322:	2302      	movs	r3, #2
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMRIGHT_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	4806      	ldr	r0, [pc, #24]	; (8002348 <HAL_TIM_MspPostInit+0xbc>)
 800232e:	f000 feb9 	bl	80030a4 <HAL_GPIO_Init>
}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	; 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000
 8002344:	40000800 	.word	0x40000800
 8002348:	40020400 	.word	0x40020400

0800234c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a34      	ldr	r2, [pc, #208]	; (800243c <HAL_UART_MspInit+0xf0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d161      	bne.n	8002432 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_UART_MspInit+0xf4>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a32      	ldr	r2, [pc, #200]	; (8002440 <HAL_UART_MspInit+0xf4>)
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_UART_MspInit+0xf4>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_UART_MspInit+0xf4>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <HAL_UART_MspInit+0xf4>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_UART_MspInit+0xf4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023a6:	230c      	movs	r3, #12
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b6:	2307      	movs	r3, #7
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4820      	ldr	r0, [pc, #128]	; (8002444 <HAL_UART_MspInit+0xf8>)
 80023c2:	f000 fe6f 	bl	80030a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023c8:	4a20      	ldr	r2, [pc, #128]	; (800244c <HAL_UART_MspInit+0x100>)
 80023ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_UART_MspInit+0xfc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002406:	4810      	ldr	r0, [pc, #64]	; (8002448 <HAL_UART_MspInit+0xfc>)
 8002408:	f000 fad4 	bl	80029b4 <HAL_DMA_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002412:	f7ff fd7f 	bl	8001f14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_UART_MspInit+0xfc>)
 800241a:	639a      	str	r2, [r3, #56]	; 0x38
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_UART_MspInit+0xfc>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	2026      	movs	r0, #38	; 0x26
 8002428:	f000 fa8d 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800242c:	2026      	movs	r0, #38	; 0x26
 800242e:	f000 faa6 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40004400 	.word	0x40004400
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000
 8002448:	20000400 	.word	0x20000400
 800244c:	40026088 	.word	0x40026088

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler+0x4>

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002496:	f000 f963 	bl	8002760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <DMA1_Stream5_IRQHandler+0x10>)
 80024a6:	f000 fbc5 	bl	8002c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000400 	.word	0x20000400

080024b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <USART2_IRQHandler+0x10>)
 80024ba:	f002 fdbb 	bl	8005034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200003bc 	.word	0x200003bc

080024c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <TIM5_IRQHandler+0x10>)
 80024ce:	f001 fedd 	bl	800428c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000032c 	.word	0x2000032c

080024dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	return 1;
 80024e0:	2301      	movs	r3, #1
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <_kill>:

int _kill(int pid, int sig)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024f4:	f003 fcd4 	bl	8005ea0 <__errno>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2216      	movs	r2, #22
 80024fc:	601a      	str	r2, [r3, #0]
	return -1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_exit>:

void _exit (int status)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002512:	f04f 31ff 	mov.w	r1, #4294967295
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffe7 	bl	80024ea <_kill>
	while (1) {}		/* Make sure we hang here */
 800251c:	e7fe      	b.n	800251c <_exit+0x12>

0800251e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e00a      	b.n	8002546 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002530:	f3af 8000 	nop.w
 8002534:	4601      	mov	r1, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	60ba      	str	r2, [r7, #8]
 800253c:	b2ca      	uxtb	r2, r1
 800253e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	dbf0      	blt.n	8002530 <_read+0x12>
	}

return len;
 800254e:	687b      	ldr	r3, [r7, #4]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e009      	b.n	800257e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	60ba      	str	r2, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	429a      	cmp	r2, r3
 8002584:	dbf1      	blt.n	800256a <_write+0x12>
	}
	return len;
 8002586:	687b      	ldr	r3, [r7, #4]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_close>:

int _close(int file)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	return -1;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b6:	605a      	str	r2, [r3, #4]
	return 0;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <_isatty>:

int _isatty(int file)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	return 1;
 80025cc:	2301      	movs	r3, #1
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
	return 0;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <_sbrk+0x5c>)
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <_sbrk+0x60>)
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <_sbrk+0x64>)
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <_sbrk+0x68>)
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d207      	bcs.n	8002630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002620:	f003 fc3e 	bl	8005ea0 <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	220c      	movs	r2, #12
 8002628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	e009      	b.n	8002644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	4a05      	ldr	r2, [pc, #20]	; (8002654 <_sbrk+0x64>)
 8002640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20020000 	.word	0x20020000
 8002650:	00000400 	.word	0x00000400
 8002654:	20000514 	.word	0x20000514
 8002658:	20000530 	.word	0x20000530

0800265c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800266c:	480d      	ldr	r0, [pc, #52]	; (80026a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800266e:	490e      	ldr	r1, [pc, #56]	; (80026a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002674:	e002      	b.n	800267c <LoopCopyDataInit>

08002676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267a:	3304      	adds	r3, #4

0800267c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800267c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002680:	d3f9      	bcc.n	8002676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002684:	4c0b      	ldr	r4, [pc, #44]	; (80026b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002688:	e001      	b.n	800268e <LoopFillZerobss>

0800268a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800268c:	3204      	adds	r2, #4

0800268e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002690:	d3fb      	bcc.n	800268a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002692:	f7ff ffe3 	bl	800265c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002696:	f003 fc09 	bl	8005eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269a:	f7fe ff21 	bl	80014e0 <main>
  bx  lr    
 800269e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80026ac:	080090f4 	.word	0x080090f4
  ldr r2, =_sbss
 80026b0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80026b4:	2000052c 	.word	0x2000052c

080026b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b8:	e7fe      	b.n	80026b8 <ADC_IRQHandler>
	...

080026bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_Init+0x40>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <HAL_Init+0x40>)
 80026c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_Init+0x40>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_Init+0x40>)
 80026d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <HAL_Init+0x40>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a07      	ldr	r2, [pc, #28]	; (80026fc <HAL_Init+0x40>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e4:	2003      	movs	r0, #3
 80026e6:	f000 f923 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ea:	200f      	movs	r0, #15
 80026ec:	f000 f808 	bl	8002700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f0:	f7ff fcc2 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023c00 	.word	0x40023c00

08002700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_InitTick+0x54>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_InitTick+0x58>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002716:	fbb3 f3f1 	udiv	r3, r3, r1
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f93b 	bl	800299a <HAL_SYSTICK_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e00e      	b.n	800274c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b0f      	cmp	r3, #15
 8002732:	d80a      	bhi.n	800274a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002734:	2200      	movs	r2, #0
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f000 f903 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002740:	4a06      	ldr	r2, [pc, #24]	; (800275c <HAL_InitTick+0x5c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000014 	.word	0x20000014
 8002758:	2000001c 	.word	0x2000001c
 800275c:	20000018 	.word	0x20000018

08002760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_IncTick+0x1c>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_IncTick+0x20>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	4a03      	ldr	r2, [pc, #12]	; (8002780 <HAL_IncTick+0x20>)
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	2000001c 	.word	0x2000001c
 8002780:	20000518 	.word	0x20000518

08002784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return uwTick;
 8002788:	4b02      	ldr	r3, [pc, #8]	; (8002794 <HAL_GetTick+0x10>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	20000518 	.word	0x20000518

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4906      	ldr	r1, [pc, #24]	; (8002830 <__NVIC_EnableIRQ+0x34>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100

08002834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	2b00      	cmp	r3, #0
 8002846:	db0a      	blt.n	800285e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	490c      	ldr	r1, [pc, #48]	; (8002880 <__NVIC_SetPriority+0x4c>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	440b      	add	r3, r1
 8002858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800285c:	e00a      	b.n	8002874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4908      	ldr	r1, [pc, #32]	; (8002884 <__NVIC_SetPriority+0x50>)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	3b04      	subs	r3, #4
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	440b      	add	r3, r1
 8002872:	761a      	strb	r2, [r3, #24]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f1c3 0307 	rsb	r3, r3, #7
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	bf28      	it	cs
 80028a6:	2304      	movcs	r3, #4
 80028a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d902      	bls.n	80028b8 <NVIC_EncodePriority+0x30>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3b03      	subs	r3, #3
 80028b6:	e000      	b.n	80028ba <NVIC_EncodePriority+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d0:	f04f 31ff 	mov.w	r1, #4294967295
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43d9      	mvns	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	4313      	orrs	r3, r2
         );
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff90 	bl	8002834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff2d 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff42 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff90 	bl	8002888 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5f 	bl	8002834 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff35 	bl	80027fc <__NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffa2 	bl	80028ec <SysTick_Config>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029c0:	f7ff fee0 	bl	8002784 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e099      	b.n	8002b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f0:	e00f      	b.n	8002a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029f2:	f7ff fec7 	bl	8002784 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	d908      	bls.n	8002a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2203      	movs	r2, #3
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e078      	b.n	8002b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e8      	bne.n	80029f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_DMA_Init+0x158>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d107      	bne.n	8002a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	4313      	orrs	r3, r2
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f023 0307 	bic.w	r3, r3, #7
 8002a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d117      	bne.n	8002ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fa79 	bl	8002fb0 <DMA_CheckFifoParam>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2240      	movs	r2, #64	; 0x40
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e016      	b.n	8002b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa32 	bl	8002f48 <DMA_CalcBaseAndBitshift>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	223f      	movs	r2, #63	; 0x3f
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	f010803f 	.word	0xf010803f

08002b10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b1e:	f7ff fe31 	bl	8002784 <HAL_GetTick>
 8002b22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d008      	beq.n	8002b42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e052      	b.n	8002be8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0216 	bic.w	r2, r2, #22
 8002b50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d103      	bne.n	8002b72 <HAL_DMA_Abort+0x62>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0208 	bic.w	r2, r2, #8
 8002b80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b92:	e013      	b.n	8002bbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b94:	f7ff fdf6 	bl	8002784 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d90c      	bls.n	8002bbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2203      	movs	r2, #3
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e015      	b.n	8002be8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e4      	bne.n	8002b94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	223f      	movs	r2, #63	; 0x3f
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00c      	b.n	8002c28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2205      	movs	r2, #5
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
	...

08002c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c40:	4b8e      	ldr	r3, [pc, #568]	; (8002e7c <HAL_DMA_IRQHandler+0x248>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a8e      	ldr	r2, [pc, #568]	; (8002e80 <HAL_DMA_IRQHandler+0x24c>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	2208      	movs	r2, #8
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d01a      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d012      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f043 0202 	orr.w	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2204      	movs	r2, #4
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f043 0204 	orr.w	r2, r3, #4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	2210      	movs	r2, #16
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d043      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d03c      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	2210      	movs	r2, #16
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d018      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d024      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
 8002d62:	e01f      	b.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
 8002d74:	e016      	b.n	8002da4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0208 	bic.w	r2, r2, #8
 8002d92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	2220      	movs	r2, #32
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 808f 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8087 	beq.w	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2220      	movs	r2, #32
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d136      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0216 	bic.w	r2, r2, #22
 8002dec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x1da>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0208 	bic.w	r2, r2, #8
 8002e1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	223f      	movs	r2, #63	; 0x3f
 8002e24:	409a      	lsls	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d07e      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
        }
        return;
 8002e4a:	e079      	b.n	8002f40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01d      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d031      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
 8002e78:	e02c      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
 8002e7a:	bf00      	nop
 8002e7c:	20000014 	.word	0x20000014
 8002e80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d023      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
 8002e94:	e01e      	b.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0210 	bic.w	r2, r2, #16
 8002eb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d032      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d022      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2205      	movs	r2, #5
 8002eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3301      	adds	r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d307      	bcc.n	8002f1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f2      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x2cc>
 8002f1a:	e000      	b.n	8002f1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
 8002f3e:	e000      	b.n	8002f42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f40:	bf00      	nop
    }
  }
}
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	3b10      	subs	r3, #16
 8002f58:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <DMA_CalcBaseAndBitshift+0x60>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	091b      	lsrs	r3, r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <DMA_CalcBaseAndBitshift+0x64>)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d909      	bls.n	8002f8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	1d1a      	adds	r2, r3, #4
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	659a      	str	r2, [r3, #88]	; 0x58
 8002f88:	e007      	b.n	8002f9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f92:	f023 0303 	bic.w	r3, r3, #3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	aaaaaaab 	.word	0xaaaaaaab
 8002fac:	08008d00 	.word	0x08008d00

08002fb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d11f      	bne.n	800300a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d856      	bhi.n	800307e <DMA_CheckFifoParam+0xce>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <DMA_CheckFifoParam+0x28>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08002fe9 	.word	0x08002fe9
 8002fdc:	08002ffb 	.word	0x08002ffb
 8002fe0:	08002fe9 	.word	0x08002fe9
 8002fe4:	0800307f 	.word	0x0800307f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d046      	beq.n	8003082 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff8:	e043      	b.n	8003082 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003002:	d140      	bne.n	8003086 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003008:	e03d      	b.n	8003086 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003012:	d121      	bne.n	8003058 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d837      	bhi.n	800308a <DMA_CheckFifoParam+0xda>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <DMA_CheckFifoParam+0x70>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003031 	.word	0x08003031
 8003024:	08003037 	.word	0x08003037
 8003028:	08003031 	.word	0x08003031
 800302c:	08003049 	.word	0x08003049
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      break;
 8003034:	e030      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d025      	beq.n	800308e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003046:	e022      	b.n	800308e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003050:	d11f      	bne.n	8003092 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003056:	e01c      	b.n	8003092 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d903      	bls.n	8003066 <DMA_CheckFifoParam+0xb6>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b03      	cmp	r3, #3
 8003062:	d003      	beq.n	800306c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003064:	e018      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      break;
 800306a:	e015      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00e      	beq.n	8003096 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      break;
 800307c:	e00b      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 800307e:	bf00      	nop
 8003080:	e00a      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 8003082:	bf00      	nop
 8003084:	e008      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 8003086:	bf00      	nop
 8003088:	e006      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 800308a:	bf00      	nop
 800308c:	e004      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 800308e:	bf00      	nop
 8003090:	e002      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;   
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <DMA_CheckFifoParam+0xe8>
      break;
 8003096:	bf00      	nop
    }
  } 
  
  return status; 
 8003098:	7bfb      	ldrb	r3, [r7, #15]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	e159      	b.n	8003374 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f040 8148 	bne.w	800336e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d005      	beq.n	80030f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d130      	bne.n	8003158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2203      	movs	r2, #3
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800312c:	2201      	movs	r2, #1
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 0201 	and.w	r2, r3, #1
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b03      	cmp	r3, #3
 8003162:	d017      	beq.n	8003194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d123      	bne.n	80031e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	69b9      	ldr	r1, [r7, #24]
 80031e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	2203      	movs	r2, #3
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0203 	and.w	r2, r3, #3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a2 	beq.w	800336e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b56      	ldr	r3, [pc, #344]	; (8003388 <HAL_GPIO_Init+0x2e4>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	4a55      	ldr	r2, [pc, #340]	; (8003388 <HAL_GPIO_Init+0x2e4>)
 8003234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003238:	6453      	str	r3, [r2, #68]	; 0x44
 800323a:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_GPIO_Init+0x2e4>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003246:	4a51      	ldr	r2, [pc, #324]	; (800338c <HAL_GPIO_Init+0x2e8>)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	220f      	movs	r2, #15
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a48      	ldr	r2, [pc, #288]	; (8003390 <HAL_GPIO_Init+0x2ec>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d019      	beq.n	80032a6 <HAL_GPIO_Init+0x202>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a47      	ldr	r2, [pc, #284]	; (8003394 <HAL_GPIO_Init+0x2f0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_GPIO_Init+0x1fe>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a46      	ldr	r2, [pc, #280]	; (8003398 <HAL_GPIO_Init+0x2f4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00d      	beq.n	800329e <HAL_GPIO_Init+0x1fa>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a45      	ldr	r2, [pc, #276]	; (800339c <HAL_GPIO_Init+0x2f8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <HAL_GPIO_Init+0x1f6>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a44      	ldr	r2, [pc, #272]	; (80033a0 <HAL_GPIO_Init+0x2fc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d101      	bne.n	8003296 <HAL_GPIO_Init+0x1f2>
 8003292:	2304      	movs	r3, #4
 8003294:	e008      	b.n	80032a8 <HAL_GPIO_Init+0x204>
 8003296:	2307      	movs	r3, #7
 8003298:	e006      	b.n	80032a8 <HAL_GPIO_Init+0x204>
 800329a:	2303      	movs	r3, #3
 800329c:	e004      	b.n	80032a8 <HAL_GPIO_Init+0x204>
 800329e:	2302      	movs	r3, #2
 80032a0:	e002      	b.n	80032a8 <HAL_GPIO_Init+0x204>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_GPIO_Init+0x204>
 80032a6:	2300      	movs	r3, #0
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	f002 0203 	and.w	r2, r2, #3
 80032ae:	0092      	lsls	r2, r2, #2
 80032b0:	4093      	lsls	r3, r2
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032b8:	4934      	ldr	r1, [pc, #208]	; (800338c <HAL_GPIO_Init+0x2e8>)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	089b      	lsrs	r3, r3, #2
 80032be:	3302      	adds	r3, #2
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_GPIO_Init+0x300>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ea:	4a2e      	ldr	r2, [pc, #184]	; (80033a4 <HAL_GPIO_Init+0x300>)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032f0:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <HAL_GPIO_Init+0x300>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003314:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <HAL_GPIO_Init+0x300>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_GPIO_Init+0x300>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800333e:	4a19      	ldr	r2, [pc, #100]	; (80033a4 <HAL_GPIO_Init+0x300>)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003344:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_GPIO_Init+0x300>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_GPIO_Init+0x300>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3301      	adds	r3, #1
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	2b0f      	cmp	r3, #15
 8003378:	f67f aea2 	bls.w	80030c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	3724      	adds	r7, #36	; 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40023800 	.word	0x40023800
 800338c:	40013800 	.word	0x40013800
 8003390:	40020000 	.word	0x40020000
 8003394:	40020400 	.word	0x40020400
 8003398:	40020800 	.word	0x40020800
 800339c:	40020c00 	.word	0x40020c00
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40013c00 	.word	0x40013c00

080033a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e001      	b.n	80033ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	807b      	strh	r3, [r7, #2]
 80033e2:	4613      	mov	r3, r2
 80033e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e6:	787b      	ldrb	r3, [r7, #1]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ec:	887a      	ldrh	r2, [r7, #2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f2:	e003      	b.n	80033fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	041a      	lsls	r2, r3, #16
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
	...

08003408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e267      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d075      	beq.n	8003512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003426:	4b88      	ldr	r3, [pc, #544]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b04      	cmp	r3, #4
 8003430:	d00c      	beq.n	800344c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003432:	4b85      	ldr	r3, [pc, #532]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800343a:	2b08      	cmp	r3, #8
 800343c:	d112      	bne.n	8003464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343e:	4b82      	ldr	r3, [pc, #520]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800344a:	d10b      	bne.n	8003464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	4b7e      	ldr	r3, [pc, #504]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d05b      	beq.n	8003510 <HAL_RCC_OscConfig+0x108>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d157      	bne.n	8003510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e242      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d106      	bne.n	800347c <HAL_RCC_OscConfig+0x74>
 800346e:	4b76      	ldr	r3, [pc, #472]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a75      	ldr	r2, [pc, #468]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e01d      	b.n	80034b8 <HAL_RCC_OscConfig+0xb0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x98>
 8003486:	4b70      	ldr	r3, [pc, #448]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6f      	ldr	r2, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800348c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6c      	ldr	r2, [pc, #432]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e00b      	b.n	80034b8 <HAL_RCC_OscConfig+0xb0>
 80034a0:	4b69      	ldr	r3, [pc, #420]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a68      	ldr	r2, [pc, #416]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b66      	ldr	r3, [pc, #408]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a65      	ldr	r2, [pc, #404]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d013      	beq.n	80034e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7ff f960 	bl	8002784 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c8:	f7ff f95c 	bl	8002784 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e207      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	4b5b      	ldr	r3, [pc, #364]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0xc0>
 80034e6:	e014      	b.n	8003512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7ff f94c 	bl	8002784 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f0:	f7ff f948 	bl	8002784 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1f3      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	4b51      	ldr	r3, [pc, #324]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0xe8>
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d063      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351e:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352a:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003532:	2b08      	cmp	r3, #8
 8003534:	d11c      	bne.n	8003570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003536:	4b44      	ldr	r3, [pc, #272]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d116      	bne.n	8003570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_RCC_OscConfig+0x152>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d001      	beq.n	800355a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e1c7      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4937      	ldr	r1, [pc, #220]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	e03a      	b.n	80035e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003578:	4b34      	ldr	r3, [pc, #208]	; (800364c <HAL_RCC_OscConfig+0x244>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7ff f901 	bl	8002784 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003586:	f7ff f8fd 	bl	8002784 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e1a8      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003598:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4b28      	ldr	r3, [pc, #160]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4925      	ldr	r1, [pc, #148]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]
 80035b8:	e015      	b.n	80035e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <HAL_RCC_OscConfig+0x244>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7ff f8e0 	bl	8002784 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c8:	f7ff f8dc 	bl	8002784 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e187      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d036      	beq.n	8003660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_RCC_OscConfig+0x248>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7ff f8c0 	bl	8002784 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003608:	f7ff f8bc 	bl	8002784 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e167      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x200>
 8003626:	e01b      	b.n	8003660 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003628:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_OscConfig+0x248>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362e:	f7ff f8a9 	bl	8002784 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	e00e      	b.n	8003654 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003636:	f7ff f8a5 	bl	8002784 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d907      	bls.n	8003654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e150      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
 8003648:	40023800 	.word	0x40023800
 800364c:	42470000 	.word	0x42470000
 8003650:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ea      	bne.n	8003636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8097 	beq.w	800379c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003672:	4b81      	ldr	r3, [pc, #516]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10f      	bne.n	800369e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	4b7d      	ldr	r3, [pc, #500]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a7c      	ldr	r2, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b7a      	ldr	r3, [pc, #488]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b77      	ldr	r3, [pc, #476]	; (800387c <HAL_RCC_OscConfig+0x474>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d118      	bne.n	80036dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036aa:	4b74      	ldr	r3, [pc, #464]	; (800387c <HAL_RCC_OscConfig+0x474>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a73      	ldr	r2, [pc, #460]	; (800387c <HAL_RCC_OscConfig+0x474>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b6:	f7ff f865 	bl	8002784 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036be:	f7ff f861 	bl	8002784 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e10c      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	4b6a      	ldr	r3, [pc, #424]	; (800387c <HAL_RCC_OscConfig+0x474>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x2ea>
 80036e4:	4b64      	ldr	r3, [pc, #400]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a63      	ldr	r2, [pc, #396]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
 80036f0:	e01c      	b.n	800372c <HAL_RCC_OscConfig+0x324>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b05      	cmp	r3, #5
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x30c>
 80036fa:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a5e      	ldr	r2, [pc, #376]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
 8003706:	4b5c      	ldr	r3, [pc, #368]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	4a5b      	ldr	r2, [pc, #364]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6713      	str	r3, [r2, #112]	; 0x70
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0x324>
 8003714:	4b58      	ldr	r3, [pc, #352]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003718:	4a57      	ldr	r2, [pc, #348]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	6713      	str	r3, [r2, #112]	; 0x70
 8003720:	4b55      	ldr	r3, [pc, #340]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a54      	ldr	r2, [pc, #336]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003726:	f023 0304 	bic.w	r3, r3, #4
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d015      	beq.n	8003760 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7ff f826 	bl	8002784 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7ff f822 	bl	8002784 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0cb      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003752:	4b49      	ldr	r3, [pc, #292]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0ee      	beq.n	800373c <HAL_RCC_OscConfig+0x334>
 800375e:	e014      	b.n	800378a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003760:	f7ff f810 	bl	8002784 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003766:	e00a      	b.n	800377e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003768:	f7ff f80c 	bl	8002784 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	; 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0b5      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377e:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ee      	bne.n	8003768 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a1 	beq.w	80038e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a6:	4b34      	ldr	r3, [pc, #208]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d05c      	beq.n	800386c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d141      	bne.n	800383e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b31      	ldr	r3, [pc, #196]	; (8003880 <HAL_RCC_OscConfig+0x478>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fe ffe0 	bl	8002784 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fe ffdc 	bl	8002784 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e087      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	019b      	lsls	r3, r3, #6
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	3b01      	subs	r3, #1
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	061b      	lsls	r3, r3, #24
 800380a:	491b      	ldr	r1, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003810:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <HAL_RCC_OscConfig+0x478>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003816:	f7fe ffb5 	bl	8002784 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381e:	f7fe ffb1 	bl	8002784 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e05c      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x416>
 800383c:	e054      	b.n	80038e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <HAL_RCC_OscConfig+0x478>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe ff9e 	bl	8002784 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384c:	f7fe ff9a 	bl	8002784 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e045      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x444>
 800386a:	e03d      	b.n	80038e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e038      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
 8003878:	40023800 	.word	0x40023800
 800387c:	40007000 	.word	0x40007000
 8003880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_RCC_OscConfig+0x4ec>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d028      	beq.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d121      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d11a      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038bc:	4293      	cmp	r3, r2
 80038be:	d111      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	3b01      	subs	r3, #1
 80038ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d107      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800

080038f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0cc      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800390c:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d90c      	bls.n	8003934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b65      	ldr	r3, [pc, #404]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0b8      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d020      	beq.n	8003982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800394c:	4b59      	ldr	r3, [pc, #356]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a58      	ldr	r2, [pc, #352]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003964:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a52      	ldr	r2, [pc, #328]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800396e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003970:	4b50      	ldr	r3, [pc, #320]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	494d      	ldr	r1, [pc, #308]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d044      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d119      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e07f      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b6:	4b3f      	ldr	r3, [pc, #252]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06f      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c6:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e067      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d6:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f023 0203 	bic.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4934      	ldr	r1, [pc, #208]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e8:	f7fe fecc 	bl	8002784 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f0:	f7fe fec8 	bl	8002784 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e04f      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 020c 	and.w	r2, r3, #12
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d1eb      	bne.n	80039f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d20c      	bcs.n	8003a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e032      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a4c:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4916      	ldr	r1, [pc, #88]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	490e      	ldr	r1, [pc, #56]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a7e:	f000 f821 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003a82:	4602      	mov	r2, r0
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	490a      	ldr	r1, [pc, #40]	; (8003ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	5ccb      	ldrb	r3, [r1, r3]
 8003a92:	fa22 f303 	lsr.w	r3, r2, r3
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe fe2e 	bl	8002700 <HAL_InitTick>

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023c00 	.word	0x40023c00
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	08008ce8 	.word	0x08008ce8
 8003abc:	20000014 	.word	0x20000014
 8003ac0:	20000018 	.word	0x20000018

08003ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac8:	b090      	sub	sp, #64	; 0x40
 8003aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003adc:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d00d      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x40>
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	f200 80a2 	bhi.w	8003c32 <HAL_RCC_GetSysClockFreq+0x16e>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x34>
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0x3a>
 8003af6:	e09c      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af8:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003afa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003afc:	e09c      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003afe:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b02:	e099      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b04:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b0e:	4b4d      	ldr	r3, [pc, #308]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d027      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	099b      	lsrs	r3, r3, #6
 8003b20:	2200      	movs	r2, #0
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	627a      	str	r2, [r7, #36]	; 0x24
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b30:	fb03 f201 	mul.w	r2, r3, r1
 8003b34:	2300      	movs	r3, #0
 8003b36:	fb00 f303 	mul.w	r3, r0, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	4a43      	ldr	r2, [pc, #268]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b3e:	fba0 2102 	umull	r2, r1, r0, r2
 8003b42:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b44:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b48:	4413      	add	r3, r2
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	61fa      	str	r2, [r7, #28]
 8003b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b58:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b5c:	f7fd fada 	bl	8001114 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b68:	e055      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6a:	4b36      	ldr	r3, [pc, #216]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	099b      	lsrs	r3, r3, #6
 8003b70:	2200      	movs	r2, #0
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	617a      	str	r2, [r7, #20]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b7c:	f04f 0b00 	mov.w	fp, #0
 8003b80:	4652      	mov	r2, sl
 8003b82:	465b      	mov	r3, fp
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	0159      	lsls	r1, r3, #5
 8003b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b92:	0150      	lsls	r0, r2, #5
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	ebb2 080a 	subs.w	r8, r2, sl
 8003b9c:	eb63 090b 	sbc.w	r9, r3, fp
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bac:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bb0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bb4:	ebb2 0408 	subs.w	r4, r2, r8
 8003bb8:	eb63 0509 	sbc.w	r5, r3, r9
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	00eb      	lsls	r3, r5, #3
 8003bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bca:	00e2      	lsls	r2, r4, #3
 8003bcc:	4614      	mov	r4, r2
 8003bce:	461d      	mov	r5, r3
 8003bd0:	eb14 030a 	adds.w	r3, r4, sl
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	eb45 030b 	adc.w	r3, r5, fp
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003be8:	4629      	mov	r1, r5
 8003bea:	028b      	lsls	r3, r1, #10
 8003bec:	4620      	mov	r0, r4
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	028a      	lsls	r2, r1, #10
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	2200      	movs	r2, #0
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	60fa      	str	r2, [r7, #12]
 8003c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c0a:	f7fd fa83 	bl	8001114 <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4613      	mov	r3, r2
 8003c14:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	3301      	adds	r3, #1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c30:	e002      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3740      	adds	r7, #64	; 0x40
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	017d7840 	.word	0x017d7840

08003c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	20000014 	.word	0x20000014

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff2 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	08008cf8 	.word	0x08008cf8

08003c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c90:	f7ff ffde 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	0b5b      	lsrs	r3, r3, #13
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	08008cf8 	.word	0x08008cf8

08003cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e041      	b.n	8003d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fe fa6e 	bl	80021bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f000 fd80 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d001      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e044      	b.n	8003df6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_TIM_Base_Start_IT+0xac>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d018      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d96:	d013      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <HAL_TIM_Base_Start_IT+0xb4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <HAL_TIM_Base_Start_IT+0xb8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x6c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <HAL_TIM_Base_Start_IT+0xbc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d111      	bne.n	8003de4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d010      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de2:	e007      	b.n	8003df4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40014000 	.word	0x40014000

08003e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e041      	b.n	8003eaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d106      	bne.n	8003e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f839 	bl	8003eb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f000 fcd0 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_TIM_PWM_Start+0x24>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e022      	b.n	8003f2e <HAL_TIM_PWM_Start+0x6a>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d109      	bne.n	8003f02 <HAL_TIM_PWM_Start+0x3e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e015      	b.n	8003f2e <HAL_TIM_PWM_Start+0x6a>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d109      	bne.n	8003f1c <HAL_TIM_PWM_Start+0x58>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e008      	b.n	8003f2e <HAL_TIM_PWM_Start+0x6a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	bf14      	ite	ne
 8003f28:	2301      	movne	r3, #1
 8003f2a:	2300      	moveq	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e068      	b.n	8004008 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <HAL_TIM_PWM_Start+0x82>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f44:	e013      	b.n	8003f6e <HAL_TIM_PWM_Start+0xaa>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_PWM_Start+0x92>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f54:	e00b      	b.n	8003f6e <HAL_TIM_PWM_Start+0xaa>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start+0xa2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f64:	e003      	b.n	8003f6e <HAL_TIM_PWM_Start+0xaa>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2201      	movs	r2, #1
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 feda 	bl	8004d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a23      	ldr	r2, [pc, #140]	; (8004010 <HAL_TIM_PWM_Start+0x14c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d107      	bne.n	8003f96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	; (8004010 <HAL_TIM_PWM_Start+0x14c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x10e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d013      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x10e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a19      	ldr	r2, [pc, #100]	; (8004014 <HAL_TIM_PWM_Start+0x150>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x10e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_TIM_PWM_Start+0x154>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x10e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a16      	ldr	r2, [pc, #88]	; (800401c <HAL_TIM_PWM_Start+0x158>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x10e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <HAL_TIM_PWM_Start+0x15c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d111      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b06      	cmp	r3, #6
 8003fe2:	d010      	beq.n	8004006 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff4:	e007      	b.n	8004006 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40010000 	.word	0x40010000
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	40000c00 	.word	0x40000c00
 8004020:	40014000 	.word	0x40014000

08004024 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e097      	b.n	8004168 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7fe f839 	bl	80020c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004068:	f023 0307 	bic.w	r3, r3, #7
 800406c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f000 fbbd 	bl	80047f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4313      	orrs	r3, r2
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80040c4:	f023 030c 	bic.w	r3, r3, #12
 80040c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	4313      	orrs	r3, r2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	011a      	lsls	r2, r3, #4
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	031b      	lsls	r3, r3, #12
 80040f4:	4313      	orrs	r3, r2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	4313      	orrs	r3, r2
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004180:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004188:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004190:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004198:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d110      	bne.n	80041c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d102      	bne.n	80041ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041a6:	7b7b      	ldrb	r3, [r7, #13]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d001      	beq.n	80041b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e069      	b.n	8004284 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c0:	e031      	b.n	8004226 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d110      	bne.n	80041ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ce:	7b3b      	ldrb	r3, [r7, #12]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e055      	b.n	8004284 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041e8:	e01d      	b.n	8004226 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d108      	bne.n	8004202 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d105      	bne.n	8004202 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f6:	7b7b      	ldrb	r3, [r7, #13]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d102      	bne.n	8004202 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041fc:	7b3b      	ldrb	r3, [r7, #12]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d001      	beq.n	8004206 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e03e      	b.n	8004284 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_TIM_Encoder_Start+0xc4>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b04      	cmp	r3, #4
 8004230:	d008      	beq.n	8004244 <HAL_TIM_Encoder_Start+0xd4>
 8004232:	e00f      	b.n	8004254 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2201      	movs	r2, #1
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fd77 	bl	8004d30 <TIM_CCxChannelCmd>
      break;
 8004242:	e016      	b.n	8004272 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2201      	movs	r2, #1
 800424a:	2104      	movs	r1, #4
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fd6f 	bl	8004d30 <TIM_CCxChannelCmd>
      break;
 8004252:	e00e      	b.n	8004272 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fd67 	bl	8004d30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	2104      	movs	r1, #4
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fd60 	bl	8004d30 <TIM_CCxChannelCmd>
      break;
 8004270:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d122      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d11b      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0202 	mvn.w	r2, #2
 80042b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa76 	bl	80047c0 <HAL_TIM_IC_CaptureCallback>
 80042d4:	e005      	b.n	80042e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa69 	bl	80047ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fa78 	bl	80047d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0204 	mvn.w	r2, #4
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa4c 	bl	80047c0 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa3f 	bl	80047ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fa4e 	bl	80047d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b08      	cmp	r3, #8
 8004348:	d122      	bne.n	8004390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d11b      	bne.n	8004390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0208 	mvn.w	r2, #8
 8004360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2204      	movs	r2, #4
 8004366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa22 	bl	80047c0 <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa15 	bl	80047ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fa24 	bl	80047d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b10      	cmp	r3, #16
 800439c:	d122      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d11b      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0210 	mvn.w	r2, #16
 80043b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2208      	movs	r2, #8
 80043ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f9f8 	bl	80047c0 <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9eb 	bl	80047ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f9fa 	bl	80047d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d10e      	bne.n	8004410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0201 	mvn.w	r2, #1
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fd fd78 	bl	8001f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	2b80      	cmp	r3, #128	; 0x80
 800441c:	d10e      	bne.n	800443c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d107      	bne.n	800443c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fd13 	bl	8004e62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f9be 	bl	80047e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b20      	cmp	r3, #32
 8004474:	d10e      	bne.n	8004494 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b20      	cmp	r3, #32
 8004482:	d107      	bne.n	8004494 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0220 	mvn.w	r2, #32
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fcde 	bl	8004e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004494:	bf00      	nop
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e0ae      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b0c      	cmp	r3, #12
 80044c6:	f200 809f 	bhi.w	8004608 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ca:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	08004505 	.word	0x08004505
 80044d4:	08004609 	.word	0x08004609
 80044d8:	08004609 	.word	0x08004609
 80044dc:	08004609 	.word	0x08004609
 80044e0:	08004545 	.word	0x08004545
 80044e4:	08004609 	.word	0x08004609
 80044e8:	08004609 	.word	0x08004609
 80044ec:	08004609 	.word	0x08004609
 80044f0:	08004587 	.word	0x08004587
 80044f4:	08004609 	.word	0x08004609
 80044f8:	08004609 	.word	0x08004609
 80044fc:	08004609 	.word	0x08004609
 8004500:	080045c7 	.word	0x080045c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f9f2 	bl	80048f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0208 	orr.w	r2, r2, #8
 800451e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0204 	bic.w	r2, r2, #4
 800452e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6999      	ldr	r1, [r3, #24]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	619a      	str	r2, [r3, #24]
      break;
 8004542:	e064      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fa38 	bl	80049c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800455e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6999      	ldr	r1, [r3, #24]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	021a      	lsls	r2, r3, #8
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	619a      	str	r2, [r3, #24]
      break;
 8004584:	e043      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fa81 	bl	8004a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0208 	orr.w	r2, r2, #8
 80045a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0204 	bic.w	r2, r2, #4
 80045b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69d9      	ldr	r1, [r3, #28]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	61da      	str	r2, [r3, #28]
      break;
 80045c4:	e023      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 facb 	bl	8004b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69d9      	ldr	r1, [r3, #28]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	021a      	lsls	r2, r3, #8
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	61da      	str	r2, [r3, #28]
      break;
 8004606:	e002      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
      break;
 800460c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIM_ConfigClockSource+0x1c>
 8004638:	2302      	movs	r3, #2
 800463a:	e0b4      	b.n	80047a6 <HAL_TIM_ConfigClockSource+0x186>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800465a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004674:	d03e      	beq.n	80046f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467a:	f200 8087 	bhi.w	800478c <HAL_TIM_ConfigClockSource+0x16c>
 800467e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004682:	f000 8086 	beq.w	8004792 <HAL_TIM_ConfigClockSource+0x172>
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	d87f      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d01a      	beq.n	80046c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004690:	2b70      	cmp	r3, #112	; 0x70
 8004692:	d87b      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b60      	cmp	r3, #96	; 0x60
 8004696:	d050      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x11a>
 8004698:	2b60      	cmp	r3, #96	; 0x60
 800469a:	d877      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b50      	cmp	r3, #80	; 0x50
 800469e:	d03c      	beq.n	800471a <HAL_TIM_ConfigClockSource+0xfa>
 80046a0:	2b50      	cmp	r3, #80	; 0x50
 80046a2:	d873      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d058      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x13a>
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d86f      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d064      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x15a>
 80046b0:	2b30      	cmp	r3, #48	; 0x30
 80046b2:	d86b      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d060      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x15a>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d867      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d05c      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x15a>
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d05a      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	e062      	b.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6899      	ldr	r1, [r3, #8]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f000 fb0c 	bl	8004cf2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	609a      	str	r2, [r3, #8]
      break;
 80046f2:	e04f      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	6899      	ldr	r1, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f000 faf5 	bl	8004cf2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004716:	609a      	str	r2, [r3, #8]
      break;
 8004718:	e03c      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	461a      	mov	r2, r3
 8004728:	f000 fa6c 	bl	8004c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2150      	movs	r1, #80	; 0x50
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fac3 	bl	8004cbe <TIM_ITRx_SetConfig>
      break;
 8004738:	e02c      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f000 fa8a 	bl	8004c60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2160      	movs	r1, #96	; 0x60
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fab3 	bl	8004cbe <TIM_ITRx_SetConfig>
      break;
 8004758:	e01c      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	f000 fa4c 	bl	8004c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2140      	movs	r1, #64	; 0x40
 8004772:	4618      	mov	r0, r3
 8004774:	f000 faa3 	bl	8004cbe <TIM_ITRx_SetConfig>
      break;
 8004778:	e00c      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f000 fa9a 	bl	8004cbe <TIM_ITRx_SetConfig>
      break;
 800478a:	e003      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      break;
 8004790:	e000      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
	...

080047f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a33      	ldr	r2, [pc, #204]	; (80048d8 <TIM_Base_SetConfig+0xe0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00f      	beq.n	8004830 <TIM_Base_SetConfig+0x38>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d00b      	beq.n	8004830 <TIM_Base_SetConfig+0x38>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a30      	ldr	r2, [pc, #192]	; (80048dc <TIM_Base_SetConfig+0xe4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d007      	beq.n	8004830 <TIM_Base_SetConfig+0x38>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a2f      	ldr	r2, [pc, #188]	; (80048e0 <TIM_Base_SetConfig+0xe8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_Base_SetConfig+0x38>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a2e      	ldr	r2, [pc, #184]	; (80048e4 <TIM_Base_SetConfig+0xec>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d108      	bne.n	8004842 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a24      	ldr	r2, [pc, #144]	; (80048d8 <TIM_Base_SetConfig+0xe0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01b      	beq.n	8004882 <TIM_Base_SetConfig+0x8a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004850:	d017      	beq.n	8004882 <TIM_Base_SetConfig+0x8a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a21      	ldr	r2, [pc, #132]	; (80048dc <TIM_Base_SetConfig+0xe4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <TIM_Base_SetConfig+0x8a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <TIM_Base_SetConfig+0xe8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_Base_SetConfig+0x8a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <TIM_Base_SetConfig+0xec>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_Base_SetConfig+0x8a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <TIM_Base_SetConfig+0xf0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_Base_SetConfig+0x8a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a1d      	ldr	r2, [pc, #116]	; (80048ec <TIM_Base_SetConfig+0xf4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <TIM_Base_SetConfig+0xf8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a07      	ldr	r2, [pc, #28]	; (80048d8 <TIM_Base_SetConfig+0xe0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d103      	bne.n	80048c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	615a      	str	r2, [r3, #20]
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40014400 	.word	0x40014400
 80048f0:	40014800 	.word	0x40014800

080048f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f023 0201 	bic.w	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0303 	bic.w	r3, r3, #3
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f023 0302 	bic.w	r3, r3, #2
 800493c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <TIM_OC1_SetConfig+0xc8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10c      	bne.n	800496a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0308 	bic.w	r3, r3, #8
 8004956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f023 0304 	bic.w	r3, r3, #4
 8004968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a13      	ldr	r2, [pc, #76]	; (80049bc <TIM_OC1_SetConfig+0xc8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000

080049c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0210 	bic.w	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0320 	bic.w	r3, r3, #32
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <TIM_OC2_SetConfig+0xd0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d10d      	bne.n	8004a3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a14      	ldr	r2, [pc, #80]	; (8004a90 <TIM_OC2_SetConfig+0xd0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d113      	bne.n	8004a6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	40010000 	.word	0x40010000

08004a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <TIM_OC3_SetConfig+0xd0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d10d      	bne.n	8004b0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <TIM_OC3_SetConfig+0xd0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d113      	bne.n	8004b3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000

08004b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	031b      	lsls	r3, r3, #12
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a0f      	ldr	r2, [pc, #60]	; (8004c00 <TIM_OC4_SetConfig+0x98>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d109      	bne.n	8004bdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	019b      	lsls	r3, r3, #6
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr
 8004c00:	40010000 	.word	0x40010000

08004c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f023 0201 	bic.w	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f023 030a 	bic.w	r3, r3, #10
 8004c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f023 0210 	bic.w	r2, r3, #16
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	031b      	lsls	r3, r3, #12
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	621a      	str	r2, [r3, #32]
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f043 0307 	orr.w	r3, r3, #7
 8004ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr

08004cf2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
 8004cfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	021a      	lsls	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	609a      	str	r2, [r3, #8]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2201      	movs	r2, #1
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1a      	ldr	r2, [r3, #32]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	401a      	ands	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	fa01 f303 	lsl.w	r3, r1, r3
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e050      	b.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d018      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ddc:	d013      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10c      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40014000 	.word	0x40014000

08004e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr

08004e62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e03f      	b.n	8004f06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fd fa56 	bl	800234c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	; 0x24
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fd75 	bl	80059a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b08a      	sub	sp, #40	; 0x28
 8004f12:	af02      	add	r7, sp, #8
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d17c      	bne.n	8005028 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_UART_Transmit+0x2c>
 8004f34:	88fb      	ldrh	r3, [r7, #6]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e075      	b.n	800502a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Transmit+0x3e>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e06e      	b.n	800502a <HAL_UART_Transmit+0x11c>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2221      	movs	r2, #33	; 0x21
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f62:	f7fd fc0f 	bl	8002784 <HAL_GetTick>
 8004f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	88fa      	ldrh	r2, [r7, #6]
 8004f72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7c:	d108      	bne.n	8004f90 <HAL_UART_Transmit+0x82>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d104      	bne.n	8004f90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e003      	b.n	8004f98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fa0:	e02a      	b.n	8004ff8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2180      	movs	r1, #128	; 0x80
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 faf5 	bl	800559c <UART_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e036      	b.n	800502a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10b      	bne.n	8004fda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	3302      	adds	r3, #2
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	e007      	b.n	8004fea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1cf      	bne.n	8004fa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	2140      	movs	r1, #64	; 0x40
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fac5 	bl	800559c <UART_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e006      	b.n	800502a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	e000      	b.n	800502a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005028:	2302      	movs	r3, #2
  }
}
 800502a:	4618      	mov	r0, r3
 800502c:	3720      	adds	r7, #32
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b0ba      	sub	sp, #232	; 0xe8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800505a:	2300      	movs	r3, #0
 800505c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <HAL_UART_IRQHandler+0x66>
 8005086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fbcd 	bl	8005832 <UART_Receive_IT>
      return;
 8005098:	e256      	b.n	8005548 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800509a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80de 	beq.w	8005260 <HAL_UART_IRQHandler+0x22c>
 80050a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d106      	bne.n	80050be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80d1 	beq.w	8005260 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00b      	beq.n	80050e2 <HAL_UART_IRQHandler+0xae>
 80050ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f043 0201 	orr.w	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <HAL_UART_IRQHandler+0xd2>
 80050ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f043 0202 	orr.w	r2, r3, #2
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_UART_IRQHandler+0xf6>
 8005112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f043 0204 	orr.w	r2, r3, #4
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800512a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d011      	beq.n	800515a <HAL_UART_IRQHandler+0x126>
 8005136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d105      	bne.n	800514e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f043 0208 	orr.w	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 81ed 	beq.w	800553e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_UART_IRQHandler+0x14e>
 8005170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fb58 	bl	8005832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	bf0c      	ite	eq
 8005190:	2301      	moveq	r3, #1
 8005192:	2300      	movne	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <HAL_UART_IRQHandler+0x17a>
 80051a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d04f      	beq.n	800524e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fa62 	bl	8005678 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d141      	bne.n	8005246 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3314      	adds	r3, #20
 80051c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1d9      	bne.n	80051c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	2b00      	cmp	r3, #0
 8005214:	d013      	beq.n	800523e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	4a7d      	ldr	r2, [pc, #500]	; (8005410 <HAL_UART_IRQHandler+0x3dc>)
 800521c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	4618      	mov	r0, r3
 8005224:	f7fd fce4 	bl	8002bf0 <HAL_DMA_Abort_IT>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005238:	4610      	mov	r0, r2
 800523a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	e00e      	b.n	800525c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f998 	bl	8005574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005244:	e00a      	b.n	800525c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f994 	bl	8005574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524c:	e006      	b.n	800525c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f990 	bl	8005574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800525a:	e170      	b.n	800553e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525c:	bf00      	nop
    return;
 800525e:	e16e      	b.n	800553e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	2b01      	cmp	r3, #1
 8005266:	f040 814a 	bne.w	80054fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 8143 	beq.w	80054fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 813c 	beq.w	80054fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a6:	2b40      	cmp	r3, #64	; 0x40
 80052a8:	f040 80b4 	bne.w	8005414 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8140 	beq.w	8005542 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ca:	429a      	cmp	r2, r3
 80052cc:	f080 8139 	bcs.w	8005542 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e2:	f000 8088 	beq.w	80053f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005312:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800531e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800532a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1d9      	bne.n	80052e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3314      	adds	r3, #20
 8005338:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3314      	adds	r3, #20
 8005352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005356:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800535a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800535e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e1      	bne.n	8005332 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3314      	adds	r3, #20
 8005374:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800537e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3314      	adds	r3, #20
 800538e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005392:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005394:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e3      	bne.n	800536e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80053da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e3      	bne.n	80053b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fd fb8d 	bl	8002b10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	b29b      	uxth	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8bd 	bl	8005586 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800540c:	e099      	b.n	8005542 <HAL_UART_IRQHandler+0x50e>
 800540e:	bf00      	nop
 8005410:	0800573d 	.word	0x0800573d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800541c:	b29b      	uxth	r3, r3
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 808b 	beq.w	8005546 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8086 	beq.w	8005546 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005450:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800545e:	647a      	str	r2, [r7, #68]	; 0x44
 8005460:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e3      	bne.n	800543a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	623b      	str	r3, [r7, #32]
   return(result);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005496:	633a      	str	r2, [r7, #48]	; 0x30
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800549c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e3      	bne.n	8005472 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054dc:	61fa      	str	r2, [r7, #28]
 80054de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e3      	bne.n	80054b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f845 	bl	8005586 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054fc:	e023      	b.n	8005546 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_UART_IRQHandler+0x4ea>
 800550a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f924 	bl	8005764 <UART_Transmit_IT>
    return;
 800551c:	e014      	b.n	8005548 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00e      	beq.n	8005548 <HAL_UART_IRQHandler+0x514>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f963 	bl	8005802 <UART_EndTransmit_IT>
    return;
 800553c:	e004      	b.n	8005548 <HAL_UART_IRQHandler+0x514>
    return;
 800553e:	bf00      	nop
 8005540:	e002      	b.n	8005548 <HAL_UART_IRQHandler+0x514>
      return;
 8005542:	bf00      	nop
 8005544:	e000      	b.n	8005548 <HAL_UART_IRQHandler+0x514>
      return;
 8005546:	bf00      	nop
  }
}
 8005548:	37e8      	adds	r7, #232	; 0xe8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop

08005550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	bc80      	pop	{r7}
 8005560:	4770      	bx	lr

08005562 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr

08005586 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b090      	sub	sp, #64	; 0x40
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ac:	e050      	b.n	8005650 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d04c      	beq.n	8005650 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d007      	beq.n	80055cc <UART_WaitOnFlagUntilTimeout+0x30>
 80055bc:	f7fd f8e2 	bl	8002784 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d241      	bcs.n	8005650 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055ec:	637a      	str	r2, [r7, #52]	; 0x34
 80055ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3314      	adds	r3, #20
 8005606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	613b      	str	r3, [r7, #16]
   return(result);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	63bb      	str	r3, [r7, #56]	; 0x38
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005620:	623a      	str	r2, [r7, #32]
 8005622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	69f9      	ldr	r1, [r7, #28]
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	61bb      	str	r3, [r7, #24]
   return(result);
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e5      	bne.n	8005600 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e00f      	b.n	8005670 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4013      	ands	r3, r2
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	429a      	cmp	r2, r3
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	429a      	cmp	r2, r3
 800566c:	d09f      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3740      	adds	r7, #64	; 0x40
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b095      	sub	sp, #84	; 0x54
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056a0:	643a      	str	r2, [r7, #64]	; 0x40
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e5      	bne.n	8005680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f023 0301 	bic.w	r3, r3, #1
 80056ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e5      	bne.n	80056b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d119      	bne.n	8005724 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	647b      	str	r3, [r7, #68]	; 0x44
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005710:	61ba      	str	r2, [r7, #24]
 8005712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6979      	ldr	r1, [r7, #20]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	613b      	str	r3, [r7, #16]
   return(result);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e5      	bne.n	80056f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005732:	bf00      	nop
 8005734:	3754      	adds	r7, #84	; 0x54
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr

0800573c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff ff0c 	bl	8005574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b21      	cmp	r3, #33	; 0x21
 8005776:	d13e      	bne.n	80057f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005780:	d114      	bne.n	80057ac <UART_Transmit_IT+0x48>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d110      	bne.n	80057ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	1c9a      	adds	r2, r3, #2
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	621a      	str	r2, [r3, #32]
 80057aa:	e008      	b.n	80057be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	1c59      	adds	r1, r3, #1
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6211      	str	r1, [r2, #32]
 80057b6:	781a      	ldrb	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4619      	mov	r1, r3
 80057cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10f      	bne.n	80057f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68da      	ldr	r2, [r3, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e000      	b.n	80057f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
  }
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff fe94 	bl	8005550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b08c      	sub	sp, #48	; 0x30
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b22      	cmp	r3, #34	; 0x22
 8005844:	f040 80ab 	bne.w	800599e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005850:	d117      	bne.n	8005882 <UART_Receive_IT+0x50>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d113      	bne.n	8005882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005870:	b29a      	uxth	r2, r3
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28
 8005880:	e026      	b.n	80058d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005888:	2300      	movs	r3, #0
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005894:	d007      	beq.n	80058a6 <UART_Receive_IT+0x74>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <UART_Receive_IT+0x82>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e008      	b.n	80058c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29b      	uxth	r3, r3
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4619      	mov	r1, r3
 80058de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d15a      	bne.n	800599a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0220 	bic.w	r2, r2, #32
 80058f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0201 	bic.w	r2, r2, #1
 8005912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	2b01      	cmp	r3, #1
 8005922:	d135      	bne.n	8005990 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	613b      	str	r3, [r7, #16]
   return(result);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f023 0310 	bic.w	r3, r3, #16
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594a:	623a      	str	r2, [r7, #32]
 800594c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	69f9      	ldr	r1, [r7, #28]
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	61bb      	str	r3, [r7, #24]
   return(result);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e5      	bne.n	800592a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b10      	cmp	r3, #16
 800596a:	d10a      	bne.n	8005982 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fdfc 	bl	8005586 <HAL_UARTEx_RxEventCallback>
 800598e:	e002      	b.n	8005996 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fde6 	bl	8005562 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e002      	b.n	80059a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3730      	adds	r7, #48	; 0x30
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059ac:	b0c0      	sub	sp, #256	; 0x100
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c4:	68d9      	ldr	r1, [r3, #12]
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	ea40 0301 	orr.w	r3, r0, r1
 80059d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	431a      	orrs	r2, r3
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a00:	f021 010c 	bic.w	r1, r1, #12
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a22:	6999      	ldr	r1, [r3, #24]
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	ea40 0301 	orr.w	r3, r0, r1
 8005a2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b91      	ldr	r3, [pc, #580]	; (8005c7c <UART_SetConfig+0x2d4>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d005      	beq.n	8005a48 <UART_SetConfig+0xa0>
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b8f      	ldr	r3, [pc, #572]	; (8005c80 <UART_SetConfig+0x2d8>)
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d104      	bne.n	8005a52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a48:	f7fe f920 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8005a4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a50:	e003      	b.n	8005a5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a52:	f7fe f907 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005a56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a64:	f040 8110 	bne.w	8005c88 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	1891      	adds	r1, r2, r2
 8005a80:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a82:	415b      	adcs	r3, r3
 8005a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4604      	mov	r4, r0
 8005a90:	eb12 0804 	adds.w	r8, r2, r4
 8005a94:	460c      	mov	r4, r1
 8005a96:	eb43 0904 	adc.w	r9, r3, r4
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aae:	4690      	mov	r8, r2
 8005ab0:	4699      	mov	r9, r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	eb18 0303 	adds.w	r3, r8, r3
 8005ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005abc:	460b      	mov	r3, r1
 8005abe:	eb49 0303 	adc.w	r3, r9, r3
 8005ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ada:	460b      	mov	r3, r1
 8005adc:	18db      	adds	r3, r3, r3
 8005ade:	653b      	str	r3, [r7, #80]	; 0x50
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	eb42 0303 	adc.w	r3, r2, r3
 8005ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005af0:	f7fb fb10 	bl	8001114 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4b62      	ldr	r3, [pc, #392]	; (8005c84 <UART_SetConfig+0x2dc>)
 8005afa:	fba3 2302 	umull	r2, r3, r3, r2
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	011c      	lsls	r4, r3, #4
 8005b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	1891      	adds	r1, r2, r2
 8005b1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b1c:	415b      	adcs	r3, r3
 8005b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b24:	4645      	mov	r5, r8
 8005b26:	eb12 0a05 	adds.w	sl, r2, r5
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	460d      	mov	r5, r1
 8005b30:	eb43 0b05 	adc.w	fp, r3, r5
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b48:	4692      	mov	sl, r2
 8005b4a:	469b      	mov	fp, r3
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b56:	460b      	mov	r3, r1
 8005b58:	eb4b 0303 	adc.w	r3, fp, r3
 8005b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b74:	460b      	mov	r3, r1
 8005b76:	18db      	adds	r3, r3, r3
 8005b78:	643b      	str	r3, [r7, #64]	; 0x40
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	eb42 0303 	adc.w	r3, r2, r3
 8005b80:	647b      	str	r3, [r7, #68]	; 0x44
 8005b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b8a:	f7fb fac3 	bl	8001114 <__aeabi_uldivmod>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	4b3b      	ldr	r3, [pc, #236]	; (8005c84 <UART_SetConfig+0x2dc>)
 8005b96:	fba3 2301 	umull	r2, r3, r3, r1
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2264      	movs	r2, #100	; 0x64
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	1acb      	subs	r3, r1, r3
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005baa:	4b36      	ldr	r3, [pc, #216]	; (8005c84 <UART_SetConfig+0x2dc>)
 8005bac:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bb8:	441c      	add	r4, r3
 8005bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bcc:	4642      	mov	r2, r8
 8005bce:	464b      	mov	r3, r9
 8005bd0:	1891      	adds	r1, r2, r2
 8005bd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bd4:	415b      	adcs	r3, r3
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bdc:	4641      	mov	r1, r8
 8005bde:	1851      	adds	r1, r2, r1
 8005be0:	6339      	str	r1, [r7, #48]	; 0x30
 8005be2:	4649      	mov	r1, r9
 8005be4:	414b      	adcs	r3, r1
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	00cb      	lsls	r3, r1, #3
 8005bf8:	4655      	mov	r5, sl
 8005bfa:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005bfe:	4651      	mov	r1, sl
 8005c00:	00ca      	lsls	r2, r1, #3
 8005c02:	4610      	mov	r0, r2
 8005c04:	4619      	mov	r1, r3
 8005c06:	4603      	mov	r3, r0
 8005c08:	4642      	mov	r2, r8
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c10:	464b      	mov	r3, r9
 8005c12:	460a      	mov	r2, r1
 8005c14:	eb42 0303 	adc.w	r3, r2, r3
 8005c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c30:	460b      	mov	r3, r1
 8005c32:	18db      	adds	r3, r3, r3
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c36:	4613      	mov	r3, r2
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c46:	f7fb fa65 	bl	8001114 <__aeabi_uldivmod>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <UART_SetConfig+0x2dc>)
 8005c50:	fba3 1302 	umull	r1, r3, r3, r2
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	2164      	movs	r1, #100	; 0x64
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	3332      	adds	r3, #50	; 0x32
 8005c62:	4a08      	ldr	r2, [pc, #32]	; (8005c84 <UART_SetConfig+0x2dc>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	f003 0207 	and.w	r2, r3, #7
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4422      	add	r2, r4
 8005c76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c78:	e109      	b.n	8005e8e <UART_SetConfig+0x4e6>
 8005c7a:	bf00      	nop
 8005c7c:	40011000 	.word	0x40011000
 8005c80:	40011400 	.word	0x40011400
 8005c84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	1891      	adds	r1, r2, r2
 8005ca0:	6239      	str	r1, [r7, #32]
 8005ca2:	415b      	adcs	r3, r3
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005caa:	4641      	mov	r1, r8
 8005cac:	1854      	adds	r4, r2, r1
 8005cae:	46cc      	mov	ip, r9
 8005cb0:	eb43 050c 	adc.w	r5, r3, ip
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	00eb      	lsls	r3, r5, #3
 8005cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cc2:	00e2      	lsls	r2, r4, #3
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	4640      	mov	r0, r8
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4603      	mov	r3, r0
 8005cce:	18e3      	adds	r3, r4, r3
 8005cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	eb45 0303 	adc.w	r3, r5, r3
 8005cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	008b      	lsls	r3, r1, #2
 8005cfe:	4620      	mov	r0, r4
 8005d00:	4629      	mov	r1, r5
 8005d02:	4604      	mov	r4, r0
 8005d04:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005d08:	4601      	mov	r1, r0
 8005d0a:	008a      	lsls	r2, r1, #2
 8005d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d10:	f7fb fa00 	bl	8001114 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4b60      	ldr	r3, [pc, #384]	; (8005e9c <UART_SetConfig+0x4f4>)
 8005d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	011c      	lsls	r4, r3, #4
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d34:	4642      	mov	r2, r8
 8005d36:	464b      	mov	r3, r9
 8005d38:	1891      	adds	r1, r2, r2
 8005d3a:	61b9      	str	r1, [r7, #24]
 8005d3c:	415b      	adcs	r3, r3
 8005d3e:	61fb      	str	r3, [r7, #28]
 8005d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d44:	4641      	mov	r1, r8
 8005d46:	1851      	adds	r1, r2, r1
 8005d48:	6139      	str	r1, [r7, #16]
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	414b      	adcs	r3, r1
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	00cb      	lsls	r3, r1, #3
 8005d60:	4655      	mov	r5, sl
 8005d62:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005d66:	4651      	mov	r1, sl
 8005d68:	00ca      	lsls	r2, r1, #3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4642      	mov	r2, r8
 8005d72:	189b      	adds	r3, r3, r2
 8005d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d78:	464b      	mov	r3, r9
 8005d7a:	460a      	mov	r2, r1
 8005d7c:	eb42 0303 	adc.w	r3, r2, r3
 8005d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	008b      	lsls	r3, r1, #2
 8005da0:	4645      	mov	r5, r8
 8005da2:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8005da6:	4641      	mov	r1, r8
 8005da8:	008a      	lsls	r2, r1, #2
 8005daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dae:	f7fb f9b1 	bl	8001114 <__aeabi_uldivmod>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <UART_SetConfig+0x4f4>)
 8005db8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	2164      	movs	r1, #100	; 0x64
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	3332      	adds	r3, #50	; 0x32
 8005dca:	4a34      	ldr	r2, [pc, #208]	; (8005e9c <UART_SetConfig+0x4f4>)
 8005dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd6:	441c      	add	r4, r3
 8005dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ddc:	2200      	movs	r2, #0
 8005dde:	673b      	str	r3, [r7, #112]	; 0x70
 8005de0:	677a      	str	r2, [r7, #116]	; 0x74
 8005de2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005de6:	4642      	mov	r2, r8
 8005de8:	464b      	mov	r3, r9
 8005dea:	1891      	adds	r1, r2, r2
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	415b      	adcs	r3, r3
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005df6:	4641      	mov	r1, r8
 8005df8:	1851      	adds	r1, r2, r1
 8005dfa:	6039      	str	r1, [r7, #0]
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	414b      	adcs	r3, r1
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e0e:	4659      	mov	r1, fp
 8005e10:	00cb      	lsls	r3, r1, #3
 8005e12:	4655      	mov	r5, sl
 8005e14:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005e18:	4651      	mov	r1, sl
 8005e1a:	00ca      	lsls	r2, r1, #3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4603      	mov	r3, r0
 8005e22:	4642      	mov	r2, r8
 8005e24:	189b      	adds	r3, r3, r2
 8005e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e28:	464b      	mov	r3, r9
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	eb42 0303 	adc.w	r3, r2, r3
 8005e30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e3c:	667a      	str	r2, [r7, #100]	; 0x64
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	008b      	lsls	r3, r1, #2
 8005e4e:	4645      	mov	r5, r8
 8005e50:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8005e54:	4641      	mov	r1, r8
 8005e56:	008a      	lsls	r2, r1, #2
 8005e58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e5c:	f7fb f95a 	bl	8001114 <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <UART_SetConfig+0x4f4>)
 8005e66:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	2164      	movs	r1, #100	; 0x64
 8005e6e:	fb01 f303 	mul.w	r3, r1, r3
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	3332      	adds	r3, #50	; 0x32
 8005e78:	4a08      	ldr	r2, [pc, #32]	; (8005e9c <UART_SetConfig+0x4f4>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4422      	add	r2, r4
 8005e8c:	609a      	str	r2, [r3, #8]
}
 8005e8e:	bf00      	nop
 8005e90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e94:	46bd      	mov	sp, r7
 8005e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e9a:	bf00      	nop
 8005e9c:	51eb851f 	.word	0x51eb851f

08005ea0 <__errno>:
 8005ea0:	4b01      	ldr	r3, [pc, #4]	; (8005ea8 <__errno+0x8>)
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000020 	.word	0x20000020

08005eac <__libc_init_array>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	4d0d      	ldr	r5, [pc, #52]	; (8005ee4 <__libc_init_array+0x38>)
 8005eb0:	4c0d      	ldr	r4, [pc, #52]	; (8005ee8 <__libc_init_array+0x3c>)
 8005eb2:	1b64      	subs	r4, r4, r5
 8005eb4:	10a4      	asrs	r4, r4, #2
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	42a6      	cmp	r6, r4
 8005eba:	d109      	bne.n	8005ed0 <__libc_init_array+0x24>
 8005ebc:	4d0b      	ldr	r5, [pc, #44]	; (8005eec <__libc_init_array+0x40>)
 8005ebe:	4c0c      	ldr	r4, [pc, #48]	; (8005ef0 <__libc_init_array+0x44>)
 8005ec0:	f002 fee2 	bl	8008c88 <_init>
 8005ec4:	1b64      	subs	r4, r4, r5
 8005ec6:	10a4      	asrs	r4, r4, #2
 8005ec8:	2600      	movs	r6, #0
 8005eca:	42a6      	cmp	r6, r4
 8005ecc:	d105      	bne.n	8005eda <__libc_init_array+0x2e>
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed4:	4798      	blx	r3
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7ee      	b.n	8005eb8 <__libc_init_array+0xc>
 8005eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ede:	4798      	blx	r3
 8005ee0:	3601      	adds	r6, #1
 8005ee2:	e7f2      	b.n	8005eca <__libc_init_array+0x1e>
 8005ee4:	080090ec 	.word	0x080090ec
 8005ee8:	080090ec 	.word	0x080090ec
 8005eec:	080090ec 	.word	0x080090ec
 8005ef0:	080090f0 	.word	0x080090f0

08005ef4 <memset>:
 8005ef4:	4402      	add	r2, r0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d100      	bne.n	8005efe <memset+0xa>
 8005efc:	4770      	bx	lr
 8005efe:	f803 1b01 	strb.w	r1, [r3], #1
 8005f02:	e7f9      	b.n	8005ef8 <memset+0x4>

08005f04 <__cvt>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	b088      	sub	sp, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	461f      	mov	r7, r3
 8005f0e:	4614      	mov	r4, r2
 8005f10:	bfb8      	it	lt
 8005f12:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005f16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f18:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005f1a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005f1e:	bfb6      	itet	lt
 8005f20:	461f      	movlt	r7, r3
 8005f22:	2300      	movge	r3, #0
 8005f24:	232d      	movlt	r3, #45	; 0x2d
 8005f26:	7013      	strb	r3, [r2, #0]
 8005f28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f2a:	f023 0820 	bic.w	r8, r3, #32
 8005f2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f32:	d005      	beq.n	8005f40 <__cvt+0x3c>
 8005f34:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f38:	d100      	bne.n	8005f3c <__cvt+0x38>
 8005f3a:	3501      	adds	r5, #1
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e000      	b.n	8005f42 <__cvt+0x3e>
 8005f40:	2303      	movs	r3, #3
 8005f42:	aa07      	add	r2, sp, #28
 8005f44:	9204      	str	r2, [sp, #16]
 8005f46:	aa06      	add	r2, sp, #24
 8005f48:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005f4c:	e9cd 3500 	strd	r3, r5, [sp]
 8005f50:	4622      	mov	r2, r4
 8005f52:	463b      	mov	r3, r7
 8005f54:	f000 fcdc 	bl	8006910 <_dtoa_r>
 8005f58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	d102      	bne.n	8005f66 <__cvt+0x62>
 8005f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f62:	07db      	lsls	r3, r3, #31
 8005f64:	d522      	bpl.n	8005fac <__cvt+0xa8>
 8005f66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f6a:	eb06 0905 	add.w	r9, r6, r5
 8005f6e:	d110      	bne.n	8005f92 <__cvt+0x8e>
 8005f70:	7833      	ldrb	r3, [r6, #0]
 8005f72:	2b30      	cmp	r3, #48	; 0x30
 8005f74:	d10a      	bne.n	8005f8c <__cvt+0x88>
 8005f76:	2200      	movs	r2, #0
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	f7fa fe5f 	bl	8000c40 <__aeabi_dcmpeq>
 8005f82:	b918      	cbnz	r0, 8005f8c <__cvt+0x88>
 8005f84:	f1c5 0501 	rsb	r5, r5, #1
 8005f88:	f8ca 5000 	str.w	r5, [sl]
 8005f8c:	f8da 3000 	ldr.w	r3, [sl]
 8005f90:	4499      	add	r9, r3
 8005f92:	2200      	movs	r2, #0
 8005f94:	2300      	movs	r3, #0
 8005f96:	4620      	mov	r0, r4
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa fe51 	bl	8000c40 <__aeabi_dcmpeq>
 8005f9e:	b108      	cbz	r0, 8005fa4 <__cvt+0xa0>
 8005fa0:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fa4:	2230      	movs	r2, #48	; 0x30
 8005fa6:	9b07      	ldr	r3, [sp, #28]
 8005fa8:	454b      	cmp	r3, r9
 8005faa:	d307      	bcc.n	8005fbc <__cvt+0xb8>
 8005fac:	9b07      	ldr	r3, [sp, #28]
 8005fae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fb0:	1b9b      	subs	r3, r3, r6
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	b008      	add	sp, #32
 8005fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbc:	1c59      	adds	r1, r3, #1
 8005fbe:	9107      	str	r1, [sp, #28]
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	e7f0      	b.n	8005fa6 <__cvt+0xa2>

08005fc4 <__exponent>:
 8005fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	bfb8      	it	lt
 8005fcc:	4249      	neglt	r1, r1
 8005fce:	f803 2b02 	strb.w	r2, [r3], #2
 8005fd2:	bfb4      	ite	lt
 8005fd4:	222d      	movlt	r2, #45	; 0x2d
 8005fd6:	222b      	movge	r2, #43	; 0x2b
 8005fd8:	2909      	cmp	r1, #9
 8005fda:	7042      	strb	r2, [r0, #1]
 8005fdc:	dd2a      	ble.n	8006034 <__exponent+0x70>
 8005fde:	f10d 0407 	add.w	r4, sp, #7
 8005fe2:	46a4      	mov	ip, r4
 8005fe4:	270a      	movs	r7, #10
 8005fe6:	46a6      	mov	lr, r4
 8005fe8:	460a      	mov	r2, r1
 8005fea:	fb91 f6f7 	sdiv	r6, r1, r7
 8005fee:	fb07 1516 	mls	r5, r7, r6, r1
 8005ff2:	3530      	adds	r5, #48	; 0x30
 8005ff4:	2a63      	cmp	r2, #99	; 0x63
 8005ff6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ffa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ffe:	4631      	mov	r1, r6
 8006000:	dcf1      	bgt.n	8005fe6 <__exponent+0x22>
 8006002:	3130      	adds	r1, #48	; 0x30
 8006004:	f1ae 0502 	sub.w	r5, lr, #2
 8006008:	f804 1c01 	strb.w	r1, [r4, #-1]
 800600c:	1c44      	adds	r4, r0, #1
 800600e:	4629      	mov	r1, r5
 8006010:	4561      	cmp	r1, ip
 8006012:	d30a      	bcc.n	800602a <__exponent+0x66>
 8006014:	f10d 0209 	add.w	r2, sp, #9
 8006018:	eba2 020e 	sub.w	r2, r2, lr
 800601c:	4565      	cmp	r5, ip
 800601e:	bf88      	it	hi
 8006020:	2200      	movhi	r2, #0
 8006022:	4413      	add	r3, r2
 8006024:	1a18      	subs	r0, r3, r0
 8006026:	b003      	add	sp, #12
 8006028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800602e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006032:	e7ed      	b.n	8006010 <__exponent+0x4c>
 8006034:	2330      	movs	r3, #48	; 0x30
 8006036:	3130      	adds	r1, #48	; 0x30
 8006038:	7083      	strb	r3, [r0, #2]
 800603a:	70c1      	strb	r1, [r0, #3]
 800603c:	1d03      	adds	r3, r0, #4
 800603e:	e7f1      	b.n	8006024 <__exponent+0x60>

08006040 <_printf_float>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	b091      	sub	sp, #68	; 0x44
 8006046:	460c      	mov	r4, r1
 8006048:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800604c:	4616      	mov	r6, r2
 800604e:	461f      	mov	r7, r3
 8006050:	4605      	mov	r5, r0
 8006052:	f001 fa4b 	bl	80074ec <_localeconv_r>
 8006056:	6803      	ldr	r3, [r0, #0]
 8006058:	9309      	str	r3, [sp, #36]	; 0x24
 800605a:	4618      	mov	r0, r3
 800605c:	f7fa f8c0 	bl	80001e0 <strlen>
 8006060:	2300      	movs	r3, #0
 8006062:	930e      	str	r3, [sp, #56]	; 0x38
 8006064:	f8d8 3000 	ldr.w	r3, [r8]
 8006068:	900a      	str	r0, [sp, #40]	; 0x28
 800606a:	3307      	adds	r3, #7
 800606c:	f023 0307 	bic.w	r3, r3, #7
 8006070:	f103 0208 	add.w	r2, r3, #8
 8006074:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006078:	f8d4 b000 	ldr.w	fp, [r4]
 800607c:	f8c8 2000 	str.w	r2, [r8]
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006088:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800608c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006090:	930b      	str	r3, [sp, #44]	; 0x2c
 8006092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006094:	4b9c      	ldr	r3, [pc, #624]	; (8006308 <_printf_float+0x2c8>)
 8006096:	f04f 32ff 	mov.w	r2, #4294967295
 800609a:	4640      	mov	r0, r8
 800609c:	f7fa fe02 	bl	8000ca4 <__aeabi_dcmpun>
 80060a0:	bb70      	cbnz	r0, 8006100 <_printf_float+0xc0>
 80060a2:	4b99      	ldr	r3, [pc, #612]	; (8006308 <_printf_float+0x2c8>)
 80060a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060a6:	f04f 32ff 	mov.w	r2, #4294967295
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7fa fddc 	bl	8000c68 <__aeabi_dcmple>
 80060b0:	bb30      	cbnz	r0, 8006100 <_printf_float+0xc0>
 80060b2:	2200      	movs	r2, #0
 80060b4:	2300      	movs	r3, #0
 80060b6:	4640      	mov	r0, r8
 80060b8:	4651      	mov	r1, sl
 80060ba:	f7fa fdcb 	bl	8000c54 <__aeabi_dcmplt>
 80060be:	b110      	cbz	r0, 80060c6 <_printf_float+0x86>
 80060c0:	232d      	movs	r3, #45	; 0x2d
 80060c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c6:	4b91      	ldr	r3, [pc, #580]	; (800630c <_printf_float+0x2cc>)
 80060c8:	4891      	ldr	r0, [pc, #580]	; (8006310 <_printf_float+0x2d0>)
 80060ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80060ce:	bf94      	ite	ls
 80060d0:	4698      	movls	r8, r3
 80060d2:	4680      	movhi	r8, r0
 80060d4:	2303      	movs	r3, #3
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	f02b 0304 	bic.w	r3, fp, #4
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	f04f 0a00 	mov.w	sl, #0
 80060e2:	9700      	str	r7, [sp, #0]
 80060e4:	4633      	mov	r3, r6
 80060e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80060e8:	4621      	mov	r1, r4
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 f9d2 	bl	8006494 <_printf_common>
 80060f0:	3001      	adds	r0, #1
 80060f2:	f040 808f 	bne.w	8006214 <_printf_float+0x1d4>
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	b011      	add	sp, #68	; 0x44
 80060fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006100:	4642      	mov	r2, r8
 8006102:	4653      	mov	r3, sl
 8006104:	4640      	mov	r0, r8
 8006106:	4651      	mov	r1, sl
 8006108:	f7fa fdcc 	bl	8000ca4 <__aeabi_dcmpun>
 800610c:	b140      	cbz	r0, 8006120 <_printf_float+0xe0>
 800610e:	f1ba 0f00 	cmp.w	sl, #0
 8006112:	bfbc      	itt	lt
 8006114:	232d      	movlt	r3, #45	; 0x2d
 8006116:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800611a:	487e      	ldr	r0, [pc, #504]	; (8006314 <_printf_float+0x2d4>)
 800611c:	4b7e      	ldr	r3, [pc, #504]	; (8006318 <_printf_float+0x2d8>)
 800611e:	e7d4      	b.n	80060ca <_printf_float+0x8a>
 8006120:	6863      	ldr	r3, [r4, #4]
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006128:	d142      	bne.n	80061b0 <_printf_float+0x170>
 800612a:	2306      	movs	r3, #6
 800612c:	6063      	str	r3, [r4, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	9206      	str	r2, [sp, #24]
 8006132:	aa0e      	add	r2, sp, #56	; 0x38
 8006134:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006138:	aa0d      	add	r2, sp, #52	; 0x34
 800613a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800613e:	9203      	str	r2, [sp, #12]
 8006140:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006144:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	6863      	ldr	r3, [r4, #4]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	4642      	mov	r2, r8
 8006150:	4653      	mov	r3, sl
 8006152:	4628      	mov	r0, r5
 8006154:	910b      	str	r1, [sp, #44]	; 0x2c
 8006156:	f7ff fed5 	bl	8005f04 <__cvt>
 800615a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800615c:	2947      	cmp	r1, #71	; 0x47
 800615e:	4680      	mov	r8, r0
 8006160:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006162:	d108      	bne.n	8006176 <_printf_float+0x136>
 8006164:	1cc8      	adds	r0, r1, #3
 8006166:	db02      	blt.n	800616e <_printf_float+0x12e>
 8006168:	6863      	ldr	r3, [r4, #4]
 800616a:	4299      	cmp	r1, r3
 800616c:	dd40      	ble.n	80061f0 <_printf_float+0x1b0>
 800616e:	f1a9 0902 	sub.w	r9, r9, #2
 8006172:	fa5f f989 	uxtb.w	r9, r9
 8006176:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800617a:	d81f      	bhi.n	80061bc <_printf_float+0x17c>
 800617c:	3901      	subs	r1, #1
 800617e:	464a      	mov	r2, r9
 8006180:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006184:	910d      	str	r1, [sp, #52]	; 0x34
 8006186:	f7ff ff1d 	bl	8005fc4 <__exponent>
 800618a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800618c:	1813      	adds	r3, r2, r0
 800618e:	2a01      	cmp	r2, #1
 8006190:	4682      	mov	sl, r0
 8006192:	6123      	str	r3, [r4, #16]
 8006194:	dc02      	bgt.n	800619c <_printf_float+0x15c>
 8006196:	6822      	ldr	r2, [r4, #0]
 8006198:	07d2      	lsls	r2, r2, #31
 800619a:	d501      	bpl.n	80061a0 <_printf_float+0x160>
 800619c:	3301      	adds	r3, #1
 800619e:	6123      	str	r3, [r4, #16]
 80061a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d09c      	beq.n	80060e2 <_printf_float+0xa2>
 80061a8:	232d      	movs	r3, #45	; 0x2d
 80061aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ae:	e798      	b.n	80060e2 <_printf_float+0xa2>
 80061b0:	2947      	cmp	r1, #71	; 0x47
 80061b2:	d1bc      	bne.n	800612e <_printf_float+0xee>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1ba      	bne.n	800612e <_printf_float+0xee>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e7b7      	b.n	800612c <_printf_float+0xec>
 80061bc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80061c0:	d118      	bne.n	80061f4 <_printf_float+0x1b4>
 80061c2:	2900      	cmp	r1, #0
 80061c4:	6863      	ldr	r3, [r4, #4]
 80061c6:	dd0b      	ble.n	80061e0 <_printf_float+0x1a0>
 80061c8:	6121      	str	r1, [r4, #16]
 80061ca:	b913      	cbnz	r3, 80061d2 <_printf_float+0x192>
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	07d0      	lsls	r0, r2, #31
 80061d0:	d502      	bpl.n	80061d8 <_printf_float+0x198>
 80061d2:	3301      	adds	r3, #1
 80061d4:	440b      	add	r3, r1
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	65a1      	str	r1, [r4, #88]	; 0x58
 80061da:	f04f 0a00 	mov.w	sl, #0
 80061de:	e7df      	b.n	80061a0 <_printf_float+0x160>
 80061e0:	b913      	cbnz	r3, 80061e8 <_printf_float+0x1a8>
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	07d2      	lsls	r2, r2, #31
 80061e6:	d501      	bpl.n	80061ec <_printf_float+0x1ac>
 80061e8:	3302      	adds	r3, #2
 80061ea:	e7f4      	b.n	80061d6 <_printf_float+0x196>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e7f2      	b.n	80061d6 <_printf_float+0x196>
 80061f0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80061f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061f6:	4299      	cmp	r1, r3
 80061f8:	db05      	blt.n	8006206 <_printf_float+0x1c6>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	6121      	str	r1, [r4, #16]
 80061fe:	07d8      	lsls	r0, r3, #31
 8006200:	d5ea      	bpl.n	80061d8 <_printf_float+0x198>
 8006202:	1c4b      	adds	r3, r1, #1
 8006204:	e7e7      	b.n	80061d6 <_printf_float+0x196>
 8006206:	2900      	cmp	r1, #0
 8006208:	bfd4      	ite	le
 800620a:	f1c1 0202 	rsble	r2, r1, #2
 800620e:	2201      	movgt	r2, #1
 8006210:	4413      	add	r3, r2
 8006212:	e7e0      	b.n	80061d6 <_printf_float+0x196>
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	055a      	lsls	r2, r3, #21
 8006218:	d407      	bmi.n	800622a <_printf_float+0x1ea>
 800621a:	6923      	ldr	r3, [r4, #16]
 800621c:	4642      	mov	r2, r8
 800621e:	4631      	mov	r1, r6
 8006220:	4628      	mov	r0, r5
 8006222:	47b8      	blx	r7
 8006224:	3001      	adds	r0, #1
 8006226:	d12b      	bne.n	8006280 <_printf_float+0x240>
 8006228:	e765      	b.n	80060f6 <_printf_float+0xb6>
 800622a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800622e:	f240 80dc 	bls.w	80063ea <_printf_float+0x3aa>
 8006232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006236:	2200      	movs	r2, #0
 8006238:	2300      	movs	r3, #0
 800623a:	f7fa fd01 	bl	8000c40 <__aeabi_dcmpeq>
 800623e:	2800      	cmp	r0, #0
 8006240:	d033      	beq.n	80062aa <_printf_float+0x26a>
 8006242:	4a36      	ldr	r2, [pc, #216]	; (800631c <_printf_float+0x2dc>)
 8006244:	2301      	movs	r3, #1
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f af52 	beq.w	80060f6 <_printf_float+0xb6>
 8006252:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006256:	429a      	cmp	r2, r3
 8006258:	db02      	blt.n	8006260 <_printf_float+0x220>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	07d8      	lsls	r0, r3, #31
 800625e:	d50f      	bpl.n	8006280 <_printf_float+0x240>
 8006260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f af43 	beq.w	80060f6 <_printf_float+0xb6>
 8006270:	f04f 0800 	mov.w	r8, #0
 8006274:	f104 091a 	add.w	r9, r4, #26
 8006278:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800627a:	3b01      	subs	r3, #1
 800627c:	4543      	cmp	r3, r8
 800627e:	dc09      	bgt.n	8006294 <_printf_float+0x254>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	079b      	lsls	r3, r3, #30
 8006284:	f100 8101 	bmi.w	800648a <_printf_float+0x44a>
 8006288:	68e0      	ldr	r0, [r4, #12]
 800628a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800628c:	4298      	cmp	r0, r3
 800628e:	bfb8      	it	lt
 8006290:	4618      	movlt	r0, r3
 8006292:	e732      	b.n	80060fa <_printf_float+0xba>
 8006294:	2301      	movs	r3, #1
 8006296:	464a      	mov	r2, r9
 8006298:	4631      	mov	r1, r6
 800629a:	4628      	mov	r0, r5
 800629c:	47b8      	blx	r7
 800629e:	3001      	adds	r0, #1
 80062a0:	f43f af29 	beq.w	80060f6 <_printf_float+0xb6>
 80062a4:	f108 0801 	add.w	r8, r8, #1
 80062a8:	e7e6      	b.n	8006278 <_printf_float+0x238>
 80062aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	dc37      	bgt.n	8006320 <_printf_float+0x2e0>
 80062b0:	4a1a      	ldr	r2, [pc, #104]	; (800631c <_printf_float+0x2dc>)
 80062b2:	2301      	movs	r3, #1
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b8      	blx	r7
 80062ba:	3001      	adds	r0, #1
 80062bc:	f43f af1b 	beq.w	80060f6 <_printf_float+0xb6>
 80062c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062c4:	4313      	orrs	r3, r2
 80062c6:	d102      	bne.n	80062ce <_printf_float+0x28e>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	07d9      	lsls	r1, r3, #31
 80062cc:	d5d8      	bpl.n	8006280 <_printf_float+0x240>
 80062ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062d2:	4631      	mov	r1, r6
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	f43f af0c 	beq.w	80060f6 <_printf_float+0xb6>
 80062de:	f04f 0900 	mov.w	r9, #0
 80062e2:	f104 0a1a 	add.w	sl, r4, #26
 80062e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062e8:	425b      	negs	r3, r3
 80062ea:	454b      	cmp	r3, r9
 80062ec:	dc01      	bgt.n	80062f2 <_printf_float+0x2b2>
 80062ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f0:	e794      	b.n	800621c <_printf_float+0x1dc>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4652      	mov	r2, sl
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f aefa 	beq.w	80060f6 <_printf_float+0xb6>
 8006302:	f109 0901 	add.w	r9, r9, #1
 8006306:	e7ee      	b.n	80062e6 <_printf_float+0x2a6>
 8006308:	7fefffff 	.word	0x7fefffff
 800630c:	08008d0c 	.word	0x08008d0c
 8006310:	08008d10 	.word	0x08008d10
 8006314:	08008d18 	.word	0x08008d18
 8006318:	08008d14 	.word	0x08008d14
 800631c:	08008d1c 	.word	0x08008d1c
 8006320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006322:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006324:	429a      	cmp	r2, r3
 8006326:	bfa8      	it	ge
 8006328:	461a      	movge	r2, r3
 800632a:	2a00      	cmp	r2, #0
 800632c:	4691      	mov	r9, r2
 800632e:	dc37      	bgt.n	80063a0 <_printf_float+0x360>
 8006330:	f04f 0b00 	mov.w	fp, #0
 8006334:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006338:	f104 021a 	add.w	r2, r4, #26
 800633c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006340:	ebaa 0309 	sub.w	r3, sl, r9
 8006344:	455b      	cmp	r3, fp
 8006346:	dc33      	bgt.n	80063b0 <_printf_float+0x370>
 8006348:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800634c:	429a      	cmp	r2, r3
 800634e:	db3b      	blt.n	80063c8 <_printf_float+0x388>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	07da      	lsls	r2, r3, #31
 8006354:	d438      	bmi.n	80063c8 <_printf_float+0x388>
 8006356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006358:	990d      	ldr	r1, [sp, #52]	; 0x34
 800635a:	eba3 020a 	sub.w	r2, r3, sl
 800635e:	eba3 0901 	sub.w	r9, r3, r1
 8006362:	4591      	cmp	r9, r2
 8006364:	bfa8      	it	ge
 8006366:	4691      	movge	r9, r2
 8006368:	f1b9 0f00 	cmp.w	r9, #0
 800636c:	dc34      	bgt.n	80063d8 <_printf_float+0x398>
 800636e:	f04f 0800 	mov.w	r8, #0
 8006372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006376:	f104 0a1a 	add.w	sl, r4, #26
 800637a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	eba3 0309 	sub.w	r3, r3, r9
 8006384:	4543      	cmp	r3, r8
 8006386:	f77f af7b 	ble.w	8006280 <_printf_float+0x240>
 800638a:	2301      	movs	r3, #1
 800638c:	4652      	mov	r2, sl
 800638e:	4631      	mov	r1, r6
 8006390:	4628      	mov	r0, r5
 8006392:	47b8      	blx	r7
 8006394:	3001      	adds	r0, #1
 8006396:	f43f aeae 	beq.w	80060f6 <_printf_float+0xb6>
 800639a:	f108 0801 	add.w	r8, r8, #1
 800639e:	e7ec      	b.n	800637a <_printf_float+0x33a>
 80063a0:	4613      	mov	r3, r2
 80063a2:	4631      	mov	r1, r6
 80063a4:	4642      	mov	r2, r8
 80063a6:	4628      	mov	r0, r5
 80063a8:	47b8      	blx	r7
 80063aa:	3001      	adds	r0, #1
 80063ac:	d1c0      	bne.n	8006330 <_printf_float+0x2f0>
 80063ae:	e6a2      	b.n	80060f6 <_printf_float+0xb6>
 80063b0:	2301      	movs	r3, #1
 80063b2:	4631      	mov	r1, r6
 80063b4:	4628      	mov	r0, r5
 80063b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80063b8:	47b8      	blx	r7
 80063ba:	3001      	adds	r0, #1
 80063bc:	f43f ae9b 	beq.w	80060f6 <_printf_float+0xb6>
 80063c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063c2:	f10b 0b01 	add.w	fp, fp, #1
 80063c6:	e7b9      	b.n	800633c <_printf_float+0x2fc>
 80063c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063cc:	4631      	mov	r1, r6
 80063ce:	4628      	mov	r0, r5
 80063d0:	47b8      	blx	r7
 80063d2:	3001      	adds	r0, #1
 80063d4:	d1bf      	bne.n	8006356 <_printf_float+0x316>
 80063d6:	e68e      	b.n	80060f6 <_printf_float+0xb6>
 80063d8:	464b      	mov	r3, r9
 80063da:	eb08 020a 	add.w	r2, r8, sl
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	d1c2      	bne.n	800636e <_printf_float+0x32e>
 80063e8:	e685      	b.n	80060f6 <_printf_float+0xb6>
 80063ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063ec:	2a01      	cmp	r2, #1
 80063ee:	dc01      	bgt.n	80063f4 <_printf_float+0x3b4>
 80063f0:	07db      	lsls	r3, r3, #31
 80063f2:	d537      	bpl.n	8006464 <_printf_float+0x424>
 80063f4:	2301      	movs	r3, #1
 80063f6:	4642      	mov	r2, r8
 80063f8:	4631      	mov	r1, r6
 80063fa:	4628      	mov	r0, r5
 80063fc:	47b8      	blx	r7
 80063fe:	3001      	adds	r0, #1
 8006400:	f43f ae79 	beq.w	80060f6 <_printf_float+0xb6>
 8006404:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006408:	4631      	mov	r1, r6
 800640a:	4628      	mov	r0, r5
 800640c:	47b8      	blx	r7
 800640e:	3001      	adds	r0, #1
 8006410:	f43f ae71 	beq.w	80060f6 <_printf_float+0xb6>
 8006414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006418:	2200      	movs	r2, #0
 800641a:	2300      	movs	r3, #0
 800641c:	f7fa fc10 	bl	8000c40 <__aeabi_dcmpeq>
 8006420:	b9d8      	cbnz	r0, 800645a <_printf_float+0x41a>
 8006422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006424:	f108 0201 	add.w	r2, r8, #1
 8006428:	3b01      	subs	r3, #1
 800642a:	4631      	mov	r1, r6
 800642c:	4628      	mov	r0, r5
 800642e:	47b8      	blx	r7
 8006430:	3001      	adds	r0, #1
 8006432:	d10e      	bne.n	8006452 <_printf_float+0x412>
 8006434:	e65f      	b.n	80060f6 <_printf_float+0xb6>
 8006436:	2301      	movs	r3, #1
 8006438:	464a      	mov	r2, r9
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	47b8      	blx	r7
 8006440:	3001      	adds	r0, #1
 8006442:	f43f ae58 	beq.w	80060f6 <_printf_float+0xb6>
 8006446:	f108 0801 	add.w	r8, r8, #1
 800644a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800644c:	3b01      	subs	r3, #1
 800644e:	4543      	cmp	r3, r8
 8006450:	dcf1      	bgt.n	8006436 <_printf_float+0x3f6>
 8006452:	4653      	mov	r3, sl
 8006454:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006458:	e6e1      	b.n	800621e <_printf_float+0x1de>
 800645a:	f04f 0800 	mov.w	r8, #0
 800645e:	f104 091a 	add.w	r9, r4, #26
 8006462:	e7f2      	b.n	800644a <_printf_float+0x40a>
 8006464:	2301      	movs	r3, #1
 8006466:	4642      	mov	r2, r8
 8006468:	e7df      	b.n	800642a <_printf_float+0x3ea>
 800646a:	2301      	movs	r3, #1
 800646c:	464a      	mov	r2, r9
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	f43f ae3e 	beq.w	80060f6 <_printf_float+0xb6>
 800647a:	f108 0801 	add.w	r8, r8, #1
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006482:	1a5b      	subs	r3, r3, r1
 8006484:	4543      	cmp	r3, r8
 8006486:	dcf0      	bgt.n	800646a <_printf_float+0x42a>
 8006488:	e6fe      	b.n	8006288 <_printf_float+0x248>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	f104 0919 	add.w	r9, r4, #25
 8006492:	e7f4      	b.n	800647e <_printf_float+0x43e>

08006494 <_printf_common>:
 8006494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	4616      	mov	r6, r2
 800649a:	4699      	mov	r9, r3
 800649c:	688a      	ldr	r2, [r1, #8]
 800649e:	690b      	ldr	r3, [r1, #16]
 80064a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064a4:	4293      	cmp	r3, r2
 80064a6:	bfb8      	it	lt
 80064a8:	4613      	movlt	r3, r2
 80064aa:	6033      	str	r3, [r6, #0]
 80064ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064b0:	4607      	mov	r7, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	b10a      	cbz	r2, 80064ba <_printf_common+0x26>
 80064b6:	3301      	adds	r3, #1
 80064b8:	6033      	str	r3, [r6, #0]
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	0699      	lsls	r1, r3, #26
 80064be:	bf42      	ittt	mi
 80064c0:	6833      	ldrmi	r3, [r6, #0]
 80064c2:	3302      	addmi	r3, #2
 80064c4:	6033      	strmi	r3, [r6, #0]
 80064c6:	6825      	ldr	r5, [r4, #0]
 80064c8:	f015 0506 	ands.w	r5, r5, #6
 80064cc:	d106      	bne.n	80064dc <_printf_common+0x48>
 80064ce:	f104 0a19 	add.w	sl, r4, #25
 80064d2:	68e3      	ldr	r3, [r4, #12]
 80064d4:	6832      	ldr	r2, [r6, #0]
 80064d6:	1a9b      	subs	r3, r3, r2
 80064d8:	42ab      	cmp	r3, r5
 80064da:	dc26      	bgt.n	800652a <_printf_common+0x96>
 80064dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064e0:	1e13      	subs	r3, r2, #0
 80064e2:	6822      	ldr	r2, [r4, #0]
 80064e4:	bf18      	it	ne
 80064e6:	2301      	movne	r3, #1
 80064e8:	0692      	lsls	r2, r2, #26
 80064ea:	d42b      	bmi.n	8006544 <_printf_common+0xb0>
 80064ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064f0:	4649      	mov	r1, r9
 80064f2:	4638      	mov	r0, r7
 80064f4:	47c0      	blx	r8
 80064f6:	3001      	adds	r0, #1
 80064f8:	d01e      	beq.n	8006538 <_printf_common+0xa4>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	68e5      	ldr	r5, [r4, #12]
 80064fe:	6832      	ldr	r2, [r6, #0]
 8006500:	f003 0306 	and.w	r3, r3, #6
 8006504:	2b04      	cmp	r3, #4
 8006506:	bf08      	it	eq
 8006508:	1aad      	subeq	r5, r5, r2
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	6922      	ldr	r2, [r4, #16]
 800650e:	bf0c      	ite	eq
 8006510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006514:	2500      	movne	r5, #0
 8006516:	4293      	cmp	r3, r2
 8006518:	bfc4      	itt	gt
 800651a:	1a9b      	subgt	r3, r3, r2
 800651c:	18ed      	addgt	r5, r5, r3
 800651e:	2600      	movs	r6, #0
 8006520:	341a      	adds	r4, #26
 8006522:	42b5      	cmp	r5, r6
 8006524:	d11a      	bne.n	800655c <_printf_common+0xc8>
 8006526:	2000      	movs	r0, #0
 8006528:	e008      	b.n	800653c <_printf_common+0xa8>
 800652a:	2301      	movs	r3, #1
 800652c:	4652      	mov	r2, sl
 800652e:	4649      	mov	r1, r9
 8006530:	4638      	mov	r0, r7
 8006532:	47c0      	blx	r8
 8006534:	3001      	adds	r0, #1
 8006536:	d103      	bne.n	8006540 <_printf_common+0xac>
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006540:	3501      	adds	r5, #1
 8006542:	e7c6      	b.n	80064d2 <_printf_common+0x3e>
 8006544:	18e1      	adds	r1, r4, r3
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	2030      	movs	r0, #48	; 0x30
 800654a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800654e:	4422      	add	r2, r4
 8006550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006558:	3302      	adds	r3, #2
 800655a:	e7c7      	b.n	80064ec <_printf_common+0x58>
 800655c:	2301      	movs	r3, #1
 800655e:	4622      	mov	r2, r4
 8006560:	4649      	mov	r1, r9
 8006562:	4638      	mov	r0, r7
 8006564:	47c0      	blx	r8
 8006566:	3001      	adds	r0, #1
 8006568:	d0e6      	beq.n	8006538 <_printf_common+0xa4>
 800656a:	3601      	adds	r6, #1
 800656c:	e7d9      	b.n	8006522 <_printf_common+0x8e>
	...

08006570 <_printf_i>:
 8006570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	7e0f      	ldrb	r7, [r1, #24]
 8006576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006578:	2f78      	cmp	r7, #120	; 0x78
 800657a:	4691      	mov	r9, r2
 800657c:	4680      	mov	r8, r0
 800657e:	460c      	mov	r4, r1
 8006580:	469a      	mov	sl, r3
 8006582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006586:	d807      	bhi.n	8006598 <_printf_i+0x28>
 8006588:	2f62      	cmp	r7, #98	; 0x62
 800658a:	d80a      	bhi.n	80065a2 <_printf_i+0x32>
 800658c:	2f00      	cmp	r7, #0
 800658e:	f000 80d8 	beq.w	8006742 <_printf_i+0x1d2>
 8006592:	2f58      	cmp	r7, #88	; 0x58
 8006594:	f000 80a3 	beq.w	80066de <_printf_i+0x16e>
 8006598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800659c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065a0:	e03a      	b.n	8006618 <_printf_i+0xa8>
 80065a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065a6:	2b15      	cmp	r3, #21
 80065a8:	d8f6      	bhi.n	8006598 <_printf_i+0x28>
 80065aa:	a101      	add	r1, pc, #4	; (adr r1, 80065b0 <_printf_i+0x40>)
 80065ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065b0:	08006609 	.word	0x08006609
 80065b4:	0800661d 	.word	0x0800661d
 80065b8:	08006599 	.word	0x08006599
 80065bc:	08006599 	.word	0x08006599
 80065c0:	08006599 	.word	0x08006599
 80065c4:	08006599 	.word	0x08006599
 80065c8:	0800661d 	.word	0x0800661d
 80065cc:	08006599 	.word	0x08006599
 80065d0:	08006599 	.word	0x08006599
 80065d4:	08006599 	.word	0x08006599
 80065d8:	08006599 	.word	0x08006599
 80065dc:	08006729 	.word	0x08006729
 80065e0:	0800664d 	.word	0x0800664d
 80065e4:	0800670b 	.word	0x0800670b
 80065e8:	08006599 	.word	0x08006599
 80065ec:	08006599 	.word	0x08006599
 80065f0:	0800674b 	.word	0x0800674b
 80065f4:	08006599 	.word	0x08006599
 80065f8:	0800664d 	.word	0x0800664d
 80065fc:	08006599 	.word	0x08006599
 8006600:	08006599 	.word	0x08006599
 8006604:	08006713 	.word	0x08006713
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	1d1a      	adds	r2, r3, #4
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	602a      	str	r2, [r5, #0]
 8006610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006618:	2301      	movs	r3, #1
 800661a:	e0a3      	b.n	8006764 <_printf_i+0x1f4>
 800661c:	6820      	ldr	r0, [r4, #0]
 800661e:	6829      	ldr	r1, [r5, #0]
 8006620:	0606      	lsls	r6, r0, #24
 8006622:	f101 0304 	add.w	r3, r1, #4
 8006626:	d50a      	bpl.n	800663e <_printf_i+0xce>
 8006628:	680e      	ldr	r6, [r1, #0]
 800662a:	602b      	str	r3, [r5, #0]
 800662c:	2e00      	cmp	r6, #0
 800662e:	da03      	bge.n	8006638 <_printf_i+0xc8>
 8006630:	232d      	movs	r3, #45	; 0x2d
 8006632:	4276      	negs	r6, r6
 8006634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006638:	485e      	ldr	r0, [pc, #376]	; (80067b4 <_printf_i+0x244>)
 800663a:	230a      	movs	r3, #10
 800663c:	e019      	b.n	8006672 <_printf_i+0x102>
 800663e:	680e      	ldr	r6, [r1, #0]
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006646:	bf18      	it	ne
 8006648:	b236      	sxthne	r6, r6
 800664a:	e7ef      	b.n	800662c <_printf_i+0xbc>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	6820      	ldr	r0, [r4, #0]
 8006650:	1d19      	adds	r1, r3, #4
 8006652:	6029      	str	r1, [r5, #0]
 8006654:	0601      	lsls	r1, r0, #24
 8006656:	d501      	bpl.n	800665c <_printf_i+0xec>
 8006658:	681e      	ldr	r6, [r3, #0]
 800665a:	e002      	b.n	8006662 <_printf_i+0xf2>
 800665c:	0646      	lsls	r6, r0, #25
 800665e:	d5fb      	bpl.n	8006658 <_printf_i+0xe8>
 8006660:	881e      	ldrh	r6, [r3, #0]
 8006662:	4854      	ldr	r0, [pc, #336]	; (80067b4 <_printf_i+0x244>)
 8006664:	2f6f      	cmp	r7, #111	; 0x6f
 8006666:	bf0c      	ite	eq
 8006668:	2308      	moveq	r3, #8
 800666a:	230a      	movne	r3, #10
 800666c:	2100      	movs	r1, #0
 800666e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006672:	6865      	ldr	r5, [r4, #4]
 8006674:	60a5      	str	r5, [r4, #8]
 8006676:	2d00      	cmp	r5, #0
 8006678:	bfa2      	ittt	ge
 800667a:	6821      	ldrge	r1, [r4, #0]
 800667c:	f021 0104 	bicge.w	r1, r1, #4
 8006680:	6021      	strge	r1, [r4, #0]
 8006682:	b90e      	cbnz	r6, 8006688 <_printf_i+0x118>
 8006684:	2d00      	cmp	r5, #0
 8006686:	d04d      	beq.n	8006724 <_printf_i+0x1b4>
 8006688:	4615      	mov	r5, r2
 800668a:	fbb6 f1f3 	udiv	r1, r6, r3
 800668e:	fb03 6711 	mls	r7, r3, r1, r6
 8006692:	5dc7      	ldrb	r7, [r0, r7]
 8006694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006698:	4637      	mov	r7, r6
 800669a:	42bb      	cmp	r3, r7
 800669c:	460e      	mov	r6, r1
 800669e:	d9f4      	bls.n	800668a <_printf_i+0x11a>
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d10b      	bne.n	80066bc <_printf_i+0x14c>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	07de      	lsls	r6, r3, #31
 80066a8:	d508      	bpl.n	80066bc <_printf_i+0x14c>
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	6861      	ldr	r1, [r4, #4]
 80066ae:	4299      	cmp	r1, r3
 80066b0:	bfde      	ittt	le
 80066b2:	2330      	movle	r3, #48	; 0x30
 80066b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066bc:	1b52      	subs	r2, r2, r5
 80066be:	6122      	str	r2, [r4, #16]
 80066c0:	f8cd a000 	str.w	sl, [sp]
 80066c4:	464b      	mov	r3, r9
 80066c6:	aa03      	add	r2, sp, #12
 80066c8:	4621      	mov	r1, r4
 80066ca:	4640      	mov	r0, r8
 80066cc:	f7ff fee2 	bl	8006494 <_printf_common>
 80066d0:	3001      	adds	r0, #1
 80066d2:	d14c      	bne.n	800676e <_printf_i+0x1fe>
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295
 80066d8:	b004      	add	sp, #16
 80066da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066de:	4835      	ldr	r0, [pc, #212]	; (80067b4 <_printf_i+0x244>)
 80066e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066e4:	6829      	ldr	r1, [r5, #0]
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80066ec:	6029      	str	r1, [r5, #0]
 80066ee:	061d      	lsls	r5, r3, #24
 80066f0:	d514      	bpl.n	800671c <_printf_i+0x1ac>
 80066f2:	07df      	lsls	r7, r3, #31
 80066f4:	bf44      	itt	mi
 80066f6:	f043 0320 	orrmi.w	r3, r3, #32
 80066fa:	6023      	strmi	r3, [r4, #0]
 80066fc:	b91e      	cbnz	r6, 8006706 <_printf_i+0x196>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	f023 0320 	bic.w	r3, r3, #32
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	2310      	movs	r3, #16
 8006708:	e7b0      	b.n	800666c <_printf_i+0xfc>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	f043 0320 	orr.w	r3, r3, #32
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	2378      	movs	r3, #120	; 0x78
 8006714:	4828      	ldr	r0, [pc, #160]	; (80067b8 <_printf_i+0x248>)
 8006716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800671a:	e7e3      	b.n	80066e4 <_printf_i+0x174>
 800671c:	0659      	lsls	r1, r3, #25
 800671e:	bf48      	it	mi
 8006720:	b2b6      	uxthmi	r6, r6
 8006722:	e7e6      	b.n	80066f2 <_printf_i+0x182>
 8006724:	4615      	mov	r5, r2
 8006726:	e7bb      	b.n	80066a0 <_printf_i+0x130>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	6826      	ldr	r6, [r4, #0]
 800672c:	6961      	ldr	r1, [r4, #20]
 800672e:	1d18      	adds	r0, r3, #4
 8006730:	6028      	str	r0, [r5, #0]
 8006732:	0635      	lsls	r5, r6, #24
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	d501      	bpl.n	800673c <_printf_i+0x1cc>
 8006738:	6019      	str	r1, [r3, #0]
 800673a:	e002      	b.n	8006742 <_printf_i+0x1d2>
 800673c:	0670      	lsls	r0, r6, #25
 800673e:	d5fb      	bpl.n	8006738 <_printf_i+0x1c8>
 8006740:	8019      	strh	r1, [r3, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	4615      	mov	r5, r2
 8006748:	e7ba      	b.n	80066c0 <_printf_i+0x150>
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	1d1a      	adds	r2, r3, #4
 800674e:	602a      	str	r2, [r5, #0]
 8006750:	681d      	ldr	r5, [r3, #0]
 8006752:	6862      	ldr	r2, [r4, #4]
 8006754:	2100      	movs	r1, #0
 8006756:	4628      	mov	r0, r5
 8006758:	f7f9 fd4a 	bl	80001f0 <memchr>
 800675c:	b108      	cbz	r0, 8006762 <_printf_i+0x1f2>
 800675e:	1b40      	subs	r0, r0, r5
 8006760:	6060      	str	r0, [r4, #4]
 8006762:	6863      	ldr	r3, [r4, #4]
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	2300      	movs	r3, #0
 8006768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800676c:	e7a8      	b.n	80066c0 <_printf_i+0x150>
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	462a      	mov	r2, r5
 8006772:	4649      	mov	r1, r9
 8006774:	4640      	mov	r0, r8
 8006776:	47d0      	blx	sl
 8006778:	3001      	adds	r0, #1
 800677a:	d0ab      	beq.n	80066d4 <_printf_i+0x164>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	079b      	lsls	r3, r3, #30
 8006780:	d413      	bmi.n	80067aa <_printf_i+0x23a>
 8006782:	68e0      	ldr	r0, [r4, #12]
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	4298      	cmp	r0, r3
 8006788:	bfb8      	it	lt
 800678a:	4618      	movlt	r0, r3
 800678c:	e7a4      	b.n	80066d8 <_printf_i+0x168>
 800678e:	2301      	movs	r3, #1
 8006790:	4632      	mov	r2, r6
 8006792:	4649      	mov	r1, r9
 8006794:	4640      	mov	r0, r8
 8006796:	47d0      	blx	sl
 8006798:	3001      	adds	r0, #1
 800679a:	d09b      	beq.n	80066d4 <_printf_i+0x164>
 800679c:	3501      	adds	r5, #1
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	9903      	ldr	r1, [sp, #12]
 80067a2:	1a5b      	subs	r3, r3, r1
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dcf2      	bgt.n	800678e <_printf_i+0x21e>
 80067a8:	e7eb      	b.n	8006782 <_printf_i+0x212>
 80067aa:	2500      	movs	r5, #0
 80067ac:	f104 0619 	add.w	r6, r4, #25
 80067b0:	e7f5      	b.n	800679e <_printf_i+0x22e>
 80067b2:	bf00      	nop
 80067b4:	08008d1e 	.word	0x08008d1e
 80067b8:	08008d2f 	.word	0x08008d2f

080067bc <siprintf>:
 80067bc:	b40e      	push	{r1, r2, r3}
 80067be:	b500      	push	{lr}
 80067c0:	b09c      	sub	sp, #112	; 0x70
 80067c2:	ab1d      	add	r3, sp, #116	; 0x74
 80067c4:	9002      	str	r0, [sp, #8]
 80067c6:	9006      	str	r0, [sp, #24]
 80067c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067cc:	4809      	ldr	r0, [pc, #36]	; (80067f4 <siprintf+0x38>)
 80067ce:	9107      	str	r1, [sp, #28]
 80067d0:	9104      	str	r1, [sp, #16]
 80067d2:	4909      	ldr	r1, [pc, #36]	; (80067f8 <siprintf+0x3c>)
 80067d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d8:	9105      	str	r1, [sp, #20]
 80067da:	6800      	ldr	r0, [r0, #0]
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	a902      	add	r1, sp, #8
 80067e0:	f001 fb6a 	bl	8007eb8 <_svfiprintf_r>
 80067e4:	9b02      	ldr	r3, [sp, #8]
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	b01c      	add	sp, #112	; 0x70
 80067ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f0:	b003      	add	sp, #12
 80067f2:	4770      	bx	lr
 80067f4:	20000020 	.word	0x20000020
 80067f8:	ffff0208 	.word	0xffff0208

080067fc <quorem>:
 80067fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	6903      	ldr	r3, [r0, #16]
 8006802:	690c      	ldr	r4, [r1, #16]
 8006804:	42a3      	cmp	r3, r4
 8006806:	4607      	mov	r7, r0
 8006808:	db7d      	blt.n	8006906 <quorem+0x10a>
 800680a:	3c01      	subs	r4, #1
 800680c:	f101 0814 	add.w	r8, r1, #20
 8006810:	f100 0514 	add.w	r5, r0, #20
 8006814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800681e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006822:	3301      	adds	r3, #1
 8006824:	429a      	cmp	r2, r3
 8006826:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800682a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800682e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006832:	d32e      	bcc.n	8006892 <quorem+0x96>
 8006834:	f04f 0e00 	mov.w	lr, #0
 8006838:	4640      	mov	r0, r8
 800683a:	46ac      	mov	ip, r5
 800683c:	46f2      	mov	sl, lr
 800683e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006842:	b293      	uxth	r3, r2
 8006844:	fb06 e303 	mla	r3, r6, r3, lr
 8006848:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800684c:	0c12      	lsrs	r2, r2, #16
 800684e:	b29b      	uxth	r3, r3
 8006850:	fb06 e202 	mla	r2, r6, r2, lr
 8006854:	ebaa 0303 	sub.w	r3, sl, r3
 8006858:	f8dc a000 	ldr.w	sl, [ip]
 800685c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006860:	b292      	uxth	r2, r2
 8006862:	fa13 f38a 	uxtah	r3, r3, sl
 8006866:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800686a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800686e:	b29b      	uxth	r3, r3
 8006870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006874:	4581      	cmp	r9, r0
 8006876:	f84c 3b04 	str.w	r3, [ip], #4
 800687a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800687e:	d2de      	bcs.n	800683e <quorem+0x42>
 8006880:	f855 300b 	ldr.w	r3, [r5, fp]
 8006884:	b92b      	cbnz	r3, 8006892 <quorem+0x96>
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	3b04      	subs	r3, #4
 800688a:	429d      	cmp	r5, r3
 800688c:	461a      	mov	r2, r3
 800688e:	d32e      	bcc.n	80068ee <quorem+0xf2>
 8006890:	613c      	str	r4, [r7, #16]
 8006892:	4638      	mov	r0, r7
 8006894:	f001 f8c2 	bl	8007a1c <__mcmp>
 8006898:	2800      	cmp	r0, #0
 800689a:	db24      	blt.n	80068e6 <quorem+0xea>
 800689c:	3601      	adds	r6, #1
 800689e:	4628      	mov	r0, r5
 80068a0:	f04f 0c00 	mov.w	ip, #0
 80068a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80068a8:	f8d0 e000 	ldr.w	lr, [r0]
 80068ac:	b293      	uxth	r3, r2
 80068ae:	ebac 0303 	sub.w	r3, ip, r3
 80068b2:	0c12      	lsrs	r2, r2, #16
 80068b4:	fa13 f38e 	uxtah	r3, r3, lr
 80068b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068c6:	45c1      	cmp	r9, r8
 80068c8:	f840 3b04 	str.w	r3, [r0], #4
 80068cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068d0:	d2e8      	bcs.n	80068a4 <quorem+0xa8>
 80068d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068da:	b922      	cbnz	r2, 80068e6 <quorem+0xea>
 80068dc:	3b04      	subs	r3, #4
 80068de:	429d      	cmp	r5, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	d30a      	bcc.n	80068fa <quorem+0xfe>
 80068e4:	613c      	str	r4, [r7, #16]
 80068e6:	4630      	mov	r0, r6
 80068e8:	b003      	add	sp, #12
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d1cc      	bne.n	8006890 <quorem+0x94>
 80068f6:	3c01      	subs	r4, #1
 80068f8:	e7c7      	b.n	800688a <quorem+0x8e>
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	3b04      	subs	r3, #4
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d1f0      	bne.n	80068e4 <quorem+0xe8>
 8006902:	3c01      	subs	r4, #1
 8006904:	e7eb      	b.n	80068de <quorem+0xe2>
 8006906:	2000      	movs	r0, #0
 8006908:	e7ee      	b.n	80068e8 <quorem+0xec>
 800690a:	0000      	movs	r0, r0
 800690c:	0000      	movs	r0, r0
	...

08006910 <_dtoa_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006916:	b099      	sub	sp, #100	; 0x64
 8006918:	4616      	mov	r6, r2
 800691a:	461f      	mov	r7, r3
 800691c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006920:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006924:	4605      	mov	r5, r0
 8006926:	b974      	cbnz	r4, 8006946 <_dtoa_r+0x36>
 8006928:	2010      	movs	r0, #16
 800692a:	f000 fde3 	bl	80074f4 <malloc>
 800692e:	4602      	mov	r2, r0
 8006930:	6268      	str	r0, [r5, #36]	; 0x24
 8006932:	b920      	cbnz	r0, 800693e <_dtoa_r+0x2e>
 8006934:	4ba8      	ldr	r3, [pc, #672]	; (8006bd8 <_dtoa_r+0x2c8>)
 8006936:	21ea      	movs	r1, #234	; 0xea
 8006938:	48a8      	ldr	r0, [pc, #672]	; (8006bdc <_dtoa_r+0x2cc>)
 800693a:	f001 fbcd 	bl	80080d8 <__assert_func>
 800693e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006942:	6004      	str	r4, [r0, #0]
 8006944:	60c4      	str	r4, [r0, #12]
 8006946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006948:	6819      	ldr	r1, [r3, #0]
 800694a:	b151      	cbz	r1, 8006962 <_dtoa_r+0x52>
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	604a      	str	r2, [r1, #4]
 8006950:	2301      	movs	r3, #1
 8006952:	4093      	lsls	r3, r2
 8006954:	608b      	str	r3, [r1, #8]
 8006956:	4628      	mov	r0, r5
 8006958:	f000 fe22 	bl	80075a0 <_Bfree>
 800695c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	1e3b      	subs	r3, r7, #0
 8006964:	bfb9      	ittee	lt
 8006966:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800696a:	9305      	strlt	r3, [sp, #20]
 800696c:	2300      	movge	r3, #0
 800696e:	f8c8 3000 	strge.w	r3, [r8]
 8006972:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006976:	4b9a      	ldr	r3, [pc, #616]	; (8006be0 <_dtoa_r+0x2d0>)
 8006978:	bfbc      	itt	lt
 800697a:	2201      	movlt	r2, #1
 800697c:	f8c8 2000 	strlt.w	r2, [r8]
 8006980:	ea33 0309 	bics.w	r3, r3, r9
 8006984:	d119      	bne.n	80069ba <_dtoa_r+0xaa>
 8006986:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006988:	f242 730f 	movw	r3, #9999	; 0x270f
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006992:	4333      	orrs	r3, r6
 8006994:	f000 8580 	beq.w	8007498 <_dtoa_r+0xb88>
 8006998:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800699a:	b953      	cbnz	r3, 80069b2 <_dtoa_r+0xa2>
 800699c:	4b91      	ldr	r3, [pc, #580]	; (8006be4 <_dtoa_r+0x2d4>)
 800699e:	e022      	b.n	80069e6 <_dtoa_r+0xd6>
 80069a0:	4b91      	ldr	r3, [pc, #580]	; (8006be8 <_dtoa_r+0x2d8>)
 80069a2:	9303      	str	r3, [sp, #12]
 80069a4:	3308      	adds	r3, #8
 80069a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	9803      	ldr	r0, [sp, #12]
 80069ac:	b019      	add	sp, #100	; 0x64
 80069ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b2:	4b8c      	ldr	r3, [pc, #560]	; (8006be4 <_dtoa_r+0x2d4>)
 80069b4:	9303      	str	r3, [sp, #12]
 80069b6:	3303      	adds	r3, #3
 80069b8:	e7f5      	b.n	80069a6 <_dtoa_r+0x96>
 80069ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80069be:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80069c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069c6:	2200      	movs	r2, #0
 80069c8:	2300      	movs	r3, #0
 80069ca:	f7fa f939 	bl	8000c40 <__aeabi_dcmpeq>
 80069ce:	4680      	mov	r8, r0
 80069d0:	b158      	cbz	r0, 80069ea <_dtoa_r+0xda>
 80069d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069d4:	2301      	movs	r3, #1
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8559 	beq.w	8007492 <_dtoa_r+0xb82>
 80069e0:	4882      	ldr	r0, [pc, #520]	; (8006bec <_dtoa_r+0x2dc>)
 80069e2:	6018      	str	r0, [r3, #0]
 80069e4:	1e43      	subs	r3, r0, #1
 80069e6:	9303      	str	r3, [sp, #12]
 80069e8:	e7df      	b.n	80069aa <_dtoa_r+0x9a>
 80069ea:	ab16      	add	r3, sp, #88	; 0x58
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	ab17      	add	r3, sp, #92	; 0x5c
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	4628      	mov	r0, r5
 80069f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80069f8:	f001 f8b4 	bl	8007b64 <__d2b>
 80069fc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006a00:	4683      	mov	fp, r0
 8006a02:	2c00      	cmp	r4, #0
 8006a04:	d07e      	beq.n	8006b04 <_dtoa_r+0x1f4>
 8006a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a14:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006a18:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006a1c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006a20:	4b73      	ldr	r3, [pc, #460]	; (8006bf0 <_dtoa_r+0x2e0>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	f7f9 fcec 	bl	8000400 <__aeabi_dsub>
 8006a28:	a365      	add	r3, pc, #404	; (adr r3, 8006bc0 <_dtoa_r+0x2b0>)
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f7f9 fe9f 	bl	8000770 <__aeabi_dmul>
 8006a32:	a365      	add	r3, pc, #404	; (adr r3, 8006bc8 <_dtoa_r+0x2b8>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f7f9 fce4 	bl	8000404 <__adddf3>
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	4620      	mov	r0, r4
 8006a40:	460f      	mov	r7, r1
 8006a42:	f7f9 fe2b 	bl	800069c <__aeabi_i2d>
 8006a46:	a362      	add	r3, pc, #392	; (adr r3, 8006bd0 <_dtoa_r+0x2c0>)
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f7f9 fe90 	bl	8000770 <__aeabi_dmul>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4630      	mov	r0, r6
 8006a56:	4639      	mov	r1, r7
 8006a58:	f7f9 fcd4 	bl	8000404 <__adddf3>
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	460f      	mov	r7, r1
 8006a60:	f7fa f936 	bl	8000cd0 <__aeabi_d2iz>
 8006a64:	2200      	movs	r2, #0
 8006a66:	4682      	mov	sl, r0
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	4639      	mov	r1, r7
 8006a6e:	f7fa f8f1 	bl	8000c54 <__aeabi_dcmplt>
 8006a72:	b148      	cbz	r0, 8006a88 <_dtoa_r+0x178>
 8006a74:	4650      	mov	r0, sl
 8006a76:	f7f9 fe11 	bl	800069c <__aeabi_i2d>
 8006a7a:	4632      	mov	r2, r6
 8006a7c:	463b      	mov	r3, r7
 8006a7e:	f7fa f8df 	bl	8000c40 <__aeabi_dcmpeq>
 8006a82:	b908      	cbnz	r0, 8006a88 <_dtoa_r+0x178>
 8006a84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a88:	f1ba 0f16 	cmp.w	sl, #22
 8006a8c:	d857      	bhi.n	8006b3e <_dtoa_r+0x22e>
 8006a8e:	4b59      	ldr	r3, [pc, #356]	; (8006bf4 <_dtoa_r+0x2e4>)
 8006a90:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a9c:	f7fa f8da 	bl	8000c54 <__aeabi_dcmplt>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d04e      	beq.n	8006b42 <_dtoa_r+0x232>
 8006aa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006aae:	1b1c      	subs	r4, r3, r4
 8006ab0:	1e63      	subs	r3, r4, #1
 8006ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab4:	bf45      	ittet	mi
 8006ab6:	f1c4 0301 	rsbmi	r3, r4, #1
 8006aba:	9306      	strmi	r3, [sp, #24]
 8006abc:	2300      	movpl	r3, #0
 8006abe:	2300      	movmi	r3, #0
 8006ac0:	bf4c      	ite	mi
 8006ac2:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006ac4:	9306      	strpl	r3, [sp, #24]
 8006ac6:	f1ba 0f00 	cmp.w	sl, #0
 8006aca:	db3c      	blt.n	8006b46 <_dtoa_r+0x236>
 8006acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ace:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006ad2:	4453      	add	r3, sl
 8006ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8006ada:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006adc:	2b09      	cmp	r3, #9
 8006ade:	f200 808d 	bhi.w	8006bfc <_dtoa_r+0x2ec>
 8006ae2:	2b05      	cmp	r3, #5
 8006ae4:	bfc4      	itt	gt
 8006ae6:	3b04      	subgt	r3, #4
 8006ae8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aec:	f1a3 0302 	sub.w	r3, r3, #2
 8006af0:	bfcc      	ite	gt
 8006af2:	2400      	movgt	r4, #0
 8006af4:	2401      	movle	r4, #1
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	f200 808c 	bhi.w	8006c14 <_dtoa_r+0x304>
 8006afc:	e8df f003 	tbb	[pc, r3]
 8006b00:	5b4d4f2d 	.word	0x5b4d4f2d
 8006b04:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006b08:	441c      	add	r4, r3
 8006b0a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	bfc3      	ittte	gt
 8006b12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b16:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006b1a:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b1e:	f1c3 0320 	rsble	r3, r3, #32
 8006b22:	bfc6      	itte	gt
 8006b24:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b28:	4318      	orrgt	r0, r3
 8006b2a:	fa06 f003 	lslle.w	r0, r6, r3
 8006b2e:	f7f9 fda5 	bl	800067c <__aeabi_ui2d>
 8006b32:	2301      	movs	r3, #1
 8006b34:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006b38:	3c01      	subs	r4, #1
 8006b3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b3c:	e770      	b.n	8006a20 <_dtoa_r+0x110>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e7b3      	b.n	8006aaa <_dtoa_r+0x19a>
 8006b42:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b44:	e7b2      	b.n	8006aac <_dtoa_r+0x19c>
 8006b46:	9b06      	ldr	r3, [sp, #24]
 8006b48:	eba3 030a 	sub.w	r3, r3, sl
 8006b4c:	9306      	str	r3, [sp, #24]
 8006b4e:	f1ca 0300 	rsb	r3, sl, #0
 8006b52:	930a      	str	r3, [sp, #40]	; 0x28
 8006b54:	2300      	movs	r3, #0
 8006b56:	930e      	str	r3, [sp, #56]	; 0x38
 8006b58:	e7bf      	b.n	8006ada <_dtoa_r+0x1ca>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	dc5a      	bgt.n	8006c1a <_dtoa_r+0x30a>
 8006b64:	f04f 0901 	mov.w	r9, #1
 8006b68:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006b72:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006b74:	2200      	movs	r2, #0
 8006b76:	6042      	str	r2, [r0, #4]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	f102 0614 	add.w	r6, r2, #20
 8006b7e:	429e      	cmp	r6, r3
 8006b80:	6841      	ldr	r1, [r0, #4]
 8006b82:	d950      	bls.n	8006c26 <_dtoa_r+0x316>
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 fccb 	bl	8007520 <_Balloc>
 8006b8a:	9003      	str	r0, [sp, #12]
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d14e      	bne.n	8006c2e <_dtoa_r+0x31e>
 8006b90:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <_dtoa_r+0x2e8>)
 8006b92:	4602      	mov	r2, r0
 8006b94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b98:	e6ce      	b.n	8006938 <_dtoa_r+0x28>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e7de      	b.n	8006b5c <_dtoa_r+0x24c>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ba4:	eb0a 0903 	add.w	r9, sl, r3
 8006ba8:	f109 0301 	add.w	r3, r9, #1
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	9308      	str	r3, [sp, #32]
 8006bb0:	bfb8      	it	lt
 8006bb2:	2301      	movlt	r3, #1
 8006bb4:	e7dd      	b.n	8006b72 <_dtoa_r+0x262>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e7f2      	b.n	8006ba0 <_dtoa_r+0x290>
 8006bba:	bf00      	nop
 8006bbc:	f3af 8000 	nop.w
 8006bc0:	636f4361 	.word	0x636f4361
 8006bc4:	3fd287a7 	.word	0x3fd287a7
 8006bc8:	8b60c8b3 	.word	0x8b60c8b3
 8006bcc:	3fc68a28 	.word	0x3fc68a28
 8006bd0:	509f79fb 	.word	0x509f79fb
 8006bd4:	3fd34413 	.word	0x3fd34413
 8006bd8:	08008d4d 	.word	0x08008d4d
 8006bdc:	08008d64 	.word	0x08008d64
 8006be0:	7ff00000 	.word	0x7ff00000
 8006be4:	08008d49 	.word	0x08008d49
 8006be8:	08008d40 	.word	0x08008d40
 8006bec:	08008d1d 	.word	0x08008d1d
 8006bf0:	3ff80000 	.word	0x3ff80000
 8006bf4:	08008e58 	.word	0x08008e58
 8006bf8:	08008dbf 	.word	0x08008dbf
 8006bfc:	2401      	movs	r4, #1
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9322      	str	r3, [sp, #136]	; 0x88
 8006c02:	940b      	str	r4, [sp, #44]	; 0x2c
 8006c04:	f04f 39ff 	mov.w	r9, #4294967295
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8cd 9020 	str.w	r9, [sp, #32]
 8006c0e:	2312      	movs	r3, #18
 8006c10:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c12:	e7ae      	b.n	8006b72 <_dtoa_r+0x262>
 8006c14:	2301      	movs	r3, #1
 8006c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c18:	e7f4      	b.n	8006c04 <_dtoa_r+0x2f4>
 8006c1a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006c1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006c22:	464b      	mov	r3, r9
 8006c24:	e7a5      	b.n	8006b72 <_dtoa_r+0x262>
 8006c26:	3101      	adds	r1, #1
 8006c28:	6041      	str	r1, [r0, #4]
 8006c2a:	0052      	lsls	r2, r2, #1
 8006c2c:	e7a5      	b.n	8006b7a <_dtoa_r+0x26a>
 8006c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c30:	9a03      	ldr	r2, [sp, #12]
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	9b08      	ldr	r3, [sp, #32]
 8006c36:	2b0e      	cmp	r3, #14
 8006c38:	f200 80a8 	bhi.w	8006d8c <_dtoa_r+0x47c>
 8006c3c:	2c00      	cmp	r4, #0
 8006c3e:	f000 80a5 	beq.w	8006d8c <_dtoa_r+0x47c>
 8006c42:	f1ba 0f00 	cmp.w	sl, #0
 8006c46:	dd34      	ble.n	8006cb2 <_dtoa_r+0x3a2>
 8006c48:	4a9a      	ldr	r2, [pc, #616]	; (8006eb4 <_dtoa_r+0x5a4>)
 8006c4a:	f00a 030f 	and.w	r3, sl, #15
 8006c4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c56:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c5e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006c62:	d016      	beq.n	8006c92 <_dtoa_r+0x382>
 8006c64:	4b94      	ldr	r3, [pc, #592]	; (8006eb8 <_dtoa_r+0x5a8>)
 8006c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c6e:	f7f9 fea9 	bl	80009c4 <__aeabi_ddiv>
 8006c72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c76:	f004 040f 	and.w	r4, r4, #15
 8006c7a:	2703      	movs	r7, #3
 8006c7c:	4e8e      	ldr	r6, [pc, #568]	; (8006eb8 <_dtoa_r+0x5a8>)
 8006c7e:	b954      	cbnz	r4, 8006c96 <_dtoa_r+0x386>
 8006c80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c88:	f7f9 fe9c 	bl	80009c4 <__aeabi_ddiv>
 8006c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c90:	e029      	b.n	8006ce6 <_dtoa_r+0x3d6>
 8006c92:	2702      	movs	r7, #2
 8006c94:	e7f2      	b.n	8006c7c <_dtoa_r+0x36c>
 8006c96:	07e1      	lsls	r1, r4, #31
 8006c98:	d508      	bpl.n	8006cac <_dtoa_r+0x39c>
 8006c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ca2:	f7f9 fd65 	bl	8000770 <__aeabi_dmul>
 8006ca6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006caa:	3701      	adds	r7, #1
 8006cac:	1064      	asrs	r4, r4, #1
 8006cae:	3608      	adds	r6, #8
 8006cb0:	e7e5      	b.n	8006c7e <_dtoa_r+0x36e>
 8006cb2:	f000 80a5 	beq.w	8006e00 <_dtoa_r+0x4f0>
 8006cb6:	f1ca 0400 	rsb	r4, sl, #0
 8006cba:	4b7e      	ldr	r3, [pc, #504]	; (8006eb4 <_dtoa_r+0x5a4>)
 8006cbc:	4e7e      	ldr	r6, [pc, #504]	; (8006eb8 <_dtoa_r+0x5a8>)
 8006cbe:	f004 020f 	and.w	r2, r4, #15
 8006cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cce:	f7f9 fd4f 	bl	8000770 <__aeabi_dmul>
 8006cd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cd6:	1124      	asrs	r4, r4, #4
 8006cd8:	2300      	movs	r3, #0
 8006cda:	2702      	movs	r7, #2
 8006cdc:	2c00      	cmp	r4, #0
 8006cde:	f040 8084 	bne.w	8006dea <_dtoa_r+0x4da>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1d2      	bne.n	8006c8c <_dtoa_r+0x37c>
 8006ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 808b 	beq.w	8006e04 <_dtoa_r+0x4f4>
 8006cee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006cf2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006cf6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cfa:	4b70      	ldr	r3, [pc, #448]	; (8006ebc <_dtoa_r+0x5ac>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f7f9 ffa9 	bl	8000c54 <__aeabi_dcmplt>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d07e      	beq.n	8006e04 <_dtoa_r+0x4f4>
 8006d06:	9b08      	ldr	r3, [sp, #32]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d07b      	beq.n	8006e04 <_dtoa_r+0x4f4>
 8006d0c:	f1b9 0f00 	cmp.w	r9, #0
 8006d10:	dd38      	ble.n	8006d84 <_dtoa_r+0x474>
 8006d12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d16:	4b6a      	ldr	r3, [pc, #424]	; (8006ec0 <_dtoa_r+0x5b0>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f7f9 fd29 	bl	8000770 <__aeabi_dmul>
 8006d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d22:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006d26:	3701      	adds	r7, #1
 8006d28:	464c      	mov	r4, r9
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	f7f9 fcb6 	bl	800069c <__aeabi_i2d>
 8006d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d34:	f7f9 fd1c 	bl	8000770 <__aeabi_dmul>
 8006d38:	4b62      	ldr	r3, [pc, #392]	; (8006ec4 <_dtoa_r+0x5b4>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f7f9 fb62 	bl	8000404 <__adddf3>
 8006d40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d48:	9611      	str	r6, [sp, #68]	; 0x44
 8006d4a:	2c00      	cmp	r4, #0
 8006d4c:	d15d      	bne.n	8006e0a <_dtoa_r+0x4fa>
 8006d4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d52:	4b5d      	ldr	r3, [pc, #372]	; (8006ec8 <_dtoa_r+0x5b8>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	f7f9 fb53 	bl	8000400 <__aeabi_dsub>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d62:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d64:	4633      	mov	r3, r6
 8006d66:	f7f9 ff93 	bl	8000c90 <__aeabi_dcmpgt>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	f040 829c 	bne.w	80072a8 <_dtoa_r+0x998>
 8006d70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d76:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006d7a:	f7f9 ff6b 	bl	8000c54 <__aeabi_dcmplt>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	f040 8290 	bne.w	80072a4 <_dtoa_r+0x994>
 8006d84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006d88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f2c0 8152 	blt.w	8007038 <_dtoa_r+0x728>
 8006d94:	f1ba 0f0e 	cmp.w	sl, #14
 8006d98:	f300 814e 	bgt.w	8007038 <_dtoa_r+0x728>
 8006d9c:	4b45      	ldr	r3, [pc, #276]	; (8006eb4 <_dtoa_r+0x5a4>)
 8006d9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006da2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006da6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006daa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f280 80db 	bge.w	8006f68 <_dtoa_r+0x658>
 8006db2:	9b08      	ldr	r3, [sp, #32]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f300 80d7 	bgt.w	8006f68 <_dtoa_r+0x658>
 8006dba:	f040 8272 	bne.w	80072a2 <_dtoa_r+0x992>
 8006dbe:	4b42      	ldr	r3, [pc, #264]	; (8006ec8 <_dtoa_r+0x5b8>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dc6:	f7f9 fcd3 	bl	8000770 <__aeabi_dmul>
 8006dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dce:	f7f9 ff55 	bl	8000c7c <__aeabi_dcmpge>
 8006dd2:	9c08      	ldr	r4, [sp, #32]
 8006dd4:	4626      	mov	r6, r4
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f040 8248 	bne.w	800726c <_dtoa_r+0x95c>
 8006ddc:	9f03      	ldr	r7, [sp, #12]
 8006dde:	2331      	movs	r3, #49	; 0x31
 8006de0:	f807 3b01 	strb.w	r3, [r7], #1
 8006de4:	f10a 0a01 	add.w	sl, sl, #1
 8006de8:	e244      	b.n	8007274 <_dtoa_r+0x964>
 8006dea:	07e2      	lsls	r2, r4, #31
 8006dec:	d505      	bpl.n	8006dfa <_dtoa_r+0x4ea>
 8006dee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006df2:	f7f9 fcbd 	bl	8000770 <__aeabi_dmul>
 8006df6:	3701      	adds	r7, #1
 8006df8:	2301      	movs	r3, #1
 8006dfa:	1064      	asrs	r4, r4, #1
 8006dfc:	3608      	adds	r6, #8
 8006dfe:	e76d      	b.n	8006cdc <_dtoa_r+0x3cc>
 8006e00:	2702      	movs	r7, #2
 8006e02:	e770      	b.n	8006ce6 <_dtoa_r+0x3d6>
 8006e04:	9c08      	ldr	r4, [sp, #32]
 8006e06:	46d0      	mov	r8, sl
 8006e08:	e78f      	b.n	8006d2a <_dtoa_r+0x41a>
 8006e0a:	9903      	ldr	r1, [sp, #12]
 8006e0c:	4b29      	ldr	r3, [pc, #164]	; (8006eb4 <_dtoa_r+0x5a4>)
 8006e0e:	4421      	add	r1, r4
 8006e10:	9112      	str	r1, [sp, #72]	; 0x48
 8006e12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006e1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e20:	2900      	cmp	r1, #0
 8006e22:	d055      	beq.n	8006ed0 <_dtoa_r+0x5c0>
 8006e24:	4929      	ldr	r1, [pc, #164]	; (8006ecc <_dtoa_r+0x5bc>)
 8006e26:	2000      	movs	r0, #0
 8006e28:	f7f9 fdcc 	bl	80009c4 <__aeabi_ddiv>
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	4632      	mov	r2, r6
 8006e30:	f7f9 fae6 	bl	8000400 <__aeabi_dsub>
 8006e34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e38:	9f03      	ldr	r7, [sp, #12]
 8006e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e3e:	f7f9 ff47 	bl	8000cd0 <__aeabi_d2iz>
 8006e42:	4604      	mov	r4, r0
 8006e44:	f7f9 fc2a 	bl	800069c <__aeabi_i2d>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e50:	f7f9 fad6 	bl	8000400 <__aeabi_dsub>
 8006e54:	3430      	adds	r4, #48	; 0x30
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e5e:	f807 4b01 	strb.w	r4, [r7], #1
 8006e62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e66:	f7f9 fef5 	bl	8000c54 <__aeabi_dcmplt>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d174      	bne.n	8006f58 <_dtoa_r+0x648>
 8006e6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e72:	4912      	ldr	r1, [pc, #72]	; (8006ebc <_dtoa_r+0x5ac>)
 8006e74:	2000      	movs	r0, #0
 8006e76:	f7f9 fac3 	bl	8000400 <__aeabi_dsub>
 8006e7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e7e:	f7f9 fee9 	bl	8000c54 <__aeabi_dcmplt>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f040 80b7 	bne.w	8006ff6 <_dtoa_r+0x6e6>
 8006e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e8a:	429f      	cmp	r7, r3
 8006e8c:	f43f af7a 	beq.w	8006d84 <_dtoa_r+0x474>
 8006e90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <_dtoa_r+0x5b0>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	f7f9 fc6a 	bl	8000770 <__aeabi_dmul>
 8006e9c:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <_dtoa_r+0x5b0>)
 8006e9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ea8:	f7f9 fc62 	bl	8000770 <__aeabi_dmul>
 8006eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eb0:	e7c3      	b.n	8006e3a <_dtoa_r+0x52a>
 8006eb2:	bf00      	nop
 8006eb4:	08008e58 	.word	0x08008e58
 8006eb8:	08008e30 	.word	0x08008e30
 8006ebc:	3ff00000 	.word	0x3ff00000
 8006ec0:	40240000 	.word	0x40240000
 8006ec4:	401c0000 	.word	0x401c0000
 8006ec8:	40140000 	.word	0x40140000
 8006ecc:	3fe00000 	.word	0x3fe00000
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	4639      	mov	r1, r7
 8006ed4:	f7f9 fc4c 	bl	8000770 <__aeabi_dmul>
 8006ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ede:	9c03      	ldr	r4, [sp, #12]
 8006ee0:	9314      	str	r3, [sp, #80]	; 0x50
 8006ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ee6:	f7f9 fef3 	bl	8000cd0 <__aeabi_d2iz>
 8006eea:	9015      	str	r0, [sp, #84]	; 0x54
 8006eec:	f7f9 fbd6 	bl	800069c <__aeabi_i2d>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ef8:	f7f9 fa82 	bl	8000400 <__aeabi_dsub>
 8006efc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006efe:	3330      	adds	r3, #48	; 0x30
 8006f00:	f804 3b01 	strb.w	r3, [r4], #1
 8006f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f06:	429c      	cmp	r4, r3
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460f      	mov	r7, r1
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	d124      	bne.n	8006f5c <_dtoa_r+0x64c>
 8006f12:	4ba4      	ldr	r3, [pc, #656]	; (80071a4 <_dtoa_r+0x894>)
 8006f14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f18:	f7f9 fa74 	bl	8000404 <__adddf3>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4630      	mov	r0, r6
 8006f22:	4639      	mov	r1, r7
 8006f24:	f7f9 feb4 	bl	8000c90 <__aeabi_dcmpgt>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	d163      	bne.n	8006ff4 <_dtoa_r+0x6e4>
 8006f2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f30:	499c      	ldr	r1, [pc, #624]	; (80071a4 <_dtoa_r+0x894>)
 8006f32:	2000      	movs	r0, #0
 8006f34:	f7f9 fa64 	bl	8000400 <__aeabi_dsub>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	4639      	mov	r1, r7
 8006f40:	f7f9 fe88 	bl	8000c54 <__aeabi_dcmplt>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f43f af1d 	beq.w	8006d84 <_dtoa_r+0x474>
 8006f4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f4c:	1e7b      	subs	r3, r7, #1
 8006f4e:	9314      	str	r3, [sp, #80]	; 0x50
 8006f50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006f54:	2b30      	cmp	r3, #48	; 0x30
 8006f56:	d0f8      	beq.n	8006f4a <_dtoa_r+0x63a>
 8006f58:	46c2      	mov	sl, r8
 8006f5a:	e03b      	b.n	8006fd4 <_dtoa_r+0x6c4>
 8006f5c:	4b92      	ldr	r3, [pc, #584]	; (80071a8 <_dtoa_r+0x898>)
 8006f5e:	f7f9 fc07 	bl	8000770 <__aeabi_dmul>
 8006f62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f66:	e7bc      	b.n	8006ee2 <_dtoa_r+0x5d2>
 8006f68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006f6c:	9f03      	ldr	r7, [sp, #12]
 8006f6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 fd25 	bl	80009c4 <__aeabi_ddiv>
 8006f7a:	f7f9 fea9 	bl	8000cd0 <__aeabi_d2iz>
 8006f7e:	4604      	mov	r4, r0
 8006f80:	f7f9 fb8c 	bl	800069c <__aeabi_i2d>
 8006f84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f88:	f7f9 fbf2 	bl	8000770 <__aeabi_dmul>
 8006f8c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4640      	mov	r0, r8
 8006f96:	4649      	mov	r1, r9
 8006f98:	f7f9 fa32 	bl	8000400 <__aeabi_dsub>
 8006f9c:	f807 6b01 	strb.w	r6, [r7], #1
 8006fa0:	9e03      	ldr	r6, [sp, #12]
 8006fa2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006fa6:	1bbe      	subs	r6, r7, r6
 8006fa8:	45b4      	cmp	ip, r6
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	d136      	bne.n	800701e <_dtoa_r+0x70e>
 8006fb0:	f7f9 fa28 	bl	8000404 <__adddf3>
 8006fb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fb8:	4680      	mov	r8, r0
 8006fba:	4689      	mov	r9, r1
 8006fbc:	f7f9 fe68 	bl	8000c90 <__aeabi_dcmpgt>
 8006fc0:	bb58      	cbnz	r0, 800701a <_dtoa_r+0x70a>
 8006fc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	4649      	mov	r1, r9
 8006fca:	f7f9 fe39 	bl	8000c40 <__aeabi_dcmpeq>
 8006fce:	b108      	cbz	r0, 8006fd4 <_dtoa_r+0x6c4>
 8006fd0:	07e1      	lsls	r1, r4, #31
 8006fd2:	d422      	bmi.n	800701a <_dtoa_r+0x70a>
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	4659      	mov	r1, fp
 8006fd8:	f000 fae2 	bl	80075a0 <_Bfree>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	703b      	strb	r3, [r7, #0]
 8006fe0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006fe2:	f10a 0001 	add.w	r0, sl, #1
 8006fe6:	6018      	str	r0, [r3, #0]
 8006fe8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f43f acdd 	beq.w	80069aa <_dtoa_r+0x9a>
 8006ff0:	601f      	str	r7, [r3, #0]
 8006ff2:	e4da      	b.n	80069aa <_dtoa_r+0x9a>
 8006ff4:	4627      	mov	r7, r4
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	461f      	mov	r7, r3
 8006ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ffe:	2a39      	cmp	r2, #57	; 0x39
 8007000:	d107      	bne.n	8007012 <_dtoa_r+0x702>
 8007002:	9a03      	ldr	r2, [sp, #12]
 8007004:	429a      	cmp	r2, r3
 8007006:	d1f7      	bne.n	8006ff8 <_dtoa_r+0x6e8>
 8007008:	9903      	ldr	r1, [sp, #12]
 800700a:	2230      	movs	r2, #48	; 0x30
 800700c:	f108 0801 	add.w	r8, r8, #1
 8007010:	700a      	strb	r2, [r1, #0]
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	3201      	adds	r2, #1
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e79e      	b.n	8006f58 <_dtoa_r+0x648>
 800701a:	46d0      	mov	r8, sl
 800701c:	e7eb      	b.n	8006ff6 <_dtoa_r+0x6e6>
 800701e:	4b62      	ldr	r3, [pc, #392]	; (80071a8 <_dtoa_r+0x898>)
 8007020:	2200      	movs	r2, #0
 8007022:	f7f9 fba5 	bl	8000770 <__aeabi_dmul>
 8007026:	2200      	movs	r2, #0
 8007028:	2300      	movs	r3, #0
 800702a:	4680      	mov	r8, r0
 800702c:	4689      	mov	r9, r1
 800702e:	f7f9 fe07 	bl	8000c40 <__aeabi_dcmpeq>
 8007032:	2800      	cmp	r0, #0
 8007034:	d09b      	beq.n	8006f6e <_dtoa_r+0x65e>
 8007036:	e7cd      	b.n	8006fd4 <_dtoa_r+0x6c4>
 8007038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800703a:	2a00      	cmp	r2, #0
 800703c:	f000 80d0 	beq.w	80071e0 <_dtoa_r+0x8d0>
 8007040:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007042:	2a01      	cmp	r2, #1
 8007044:	f300 80b2 	bgt.w	80071ac <_dtoa_r+0x89c>
 8007048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800704a:	2a00      	cmp	r2, #0
 800704c:	f000 80a6 	beq.w	800719c <_dtoa_r+0x88c>
 8007050:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007054:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007056:	9f06      	ldr	r7, [sp, #24]
 8007058:	9a06      	ldr	r2, [sp, #24]
 800705a:	441a      	add	r2, r3
 800705c:	9206      	str	r2, [sp, #24]
 800705e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007060:	2101      	movs	r1, #1
 8007062:	441a      	add	r2, r3
 8007064:	4628      	mov	r0, r5
 8007066:	9209      	str	r2, [sp, #36]	; 0x24
 8007068:	f000 fb50 	bl	800770c <__i2b>
 800706c:	4606      	mov	r6, r0
 800706e:	2f00      	cmp	r7, #0
 8007070:	dd0c      	ble.n	800708c <_dtoa_r+0x77c>
 8007072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	dd09      	ble.n	800708c <_dtoa_r+0x77c>
 8007078:	42bb      	cmp	r3, r7
 800707a:	9a06      	ldr	r2, [sp, #24]
 800707c:	bfa8      	it	ge
 800707e:	463b      	movge	r3, r7
 8007080:	1ad2      	subs	r2, r2, r3
 8007082:	9206      	str	r2, [sp, #24]
 8007084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007086:	1aff      	subs	r7, r7, r3
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	9309      	str	r3, [sp, #36]	; 0x24
 800708c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708e:	b1f3      	cbz	r3, 80070ce <_dtoa_r+0x7be>
 8007090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80a8 	beq.w	80071e8 <_dtoa_r+0x8d8>
 8007098:	2c00      	cmp	r4, #0
 800709a:	dd10      	ble.n	80070be <_dtoa_r+0x7ae>
 800709c:	4631      	mov	r1, r6
 800709e:	4622      	mov	r2, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 fbf1 	bl	8007888 <__pow5mult>
 80070a6:	465a      	mov	r2, fp
 80070a8:	4601      	mov	r1, r0
 80070aa:	4606      	mov	r6, r0
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 fb43 	bl	8007738 <__multiply>
 80070b2:	4659      	mov	r1, fp
 80070b4:	4680      	mov	r8, r0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 fa72 	bl	80075a0 <_Bfree>
 80070bc:	46c3      	mov	fp, r8
 80070be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c0:	1b1a      	subs	r2, r3, r4
 80070c2:	d004      	beq.n	80070ce <_dtoa_r+0x7be>
 80070c4:	4659      	mov	r1, fp
 80070c6:	4628      	mov	r0, r5
 80070c8:	f000 fbde 	bl	8007888 <__pow5mult>
 80070cc:	4683      	mov	fp, r0
 80070ce:	2101      	movs	r1, #1
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 fb1b 	bl	800770c <__i2b>
 80070d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070d8:	2b00      	cmp	r3, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	f340 8086 	ble.w	80071ec <_dtoa_r+0x8dc>
 80070e0:	461a      	mov	r2, r3
 80070e2:	4601      	mov	r1, r0
 80070e4:	4628      	mov	r0, r5
 80070e6:	f000 fbcf 	bl	8007888 <__pow5mult>
 80070ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	4604      	mov	r4, r0
 80070f0:	dd7f      	ble.n	80071f2 <_dtoa_r+0x8e2>
 80070f2:	f04f 0800 	mov.w	r8, #0
 80070f6:	6923      	ldr	r3, [r4, #16]
 80070f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070fc:	6918      	ldr	r0, [r3, #16]
 80070fe:	f000 fab7 	bl	8007670 <__hi0bits>
 8007102:	f1c0 0020 	rsb	r0, r0, #32
 8007106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007108:	4418      	add	r0, r3
 800710a:	f010 001f 	ands.w	r0, r0, #31
 800710e:	f000 8092 	beq.w	8007236 <_dtoa_r+0x926>
 8007112:	f1c0 0320 	rsb	r3, r0, #32
 8007116:	2b04      	cmp	r3, #4
 8007118:	f340 808a 	ble.w	8007230 <_dtoa_r+0x920>
 800711c:	f1c0 001c 	rsb	r0, r0, #28
 8007120:	9b06      	ldr	r3, [sp, #24]
 8007122:	4403      	add	r3, r0
 8007124:	9306      	str	r3, [sp, #24]
 8007126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007128:	4403      	add	r3, r0
 800712a:	4407      	add	r7, r0
 800712c:	9309      	str	r3, [sp, #36]	; 0x24
 800712e:	9b06      	ldr	r3, [sp, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	dd05      	ble.n	8007140 <_dtoa_r+0x830>
 8007134:	4659      	mov	r1, fp
 8007136:	461a      	mov	r2, r3
 8007138:	4628      	mov	r0, r5
 800713a:	f000 fbff 	bl	800793c <__lshift>
 800713e:	4683      	mov	fp, r0
 8007140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007142:	2b00      	cmp	r3, #0
 8007144:	dd05      	ble.n	8007152 <_dtoa_r+0x842>
 8007146:	4621      	mov	r1, r4
 8007148:	461a      	mov	r2, r3
 800714a:	4628      	mov	r0, r5
 800714c:	f000 fbf6 	bl	800793c <__lshift>
 8007150:	4604      	mov	r4, r0
 8007152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d070      	beq.n	800723a <_dtoa_r+0x92a>
 8007158:	4621      	mov	r1, r4
 800715a:	4658      	mov	r0, fp
 800715c:	f000 fc5e 	bl	8007a1c <__mcmp>
 8007160:	2800      	cmp	r0, #0
 8007162:	da6a      	bge.n	800723a <_dtoa_r+0x92a>
 8007164:	2300      	movs	r3, #0
 8007166:	4659      	mov	r1, fp
 8007168:	220a      	movs	r2, #10
 800716a:	4628      	mov	r0, r5
 800716c:	f000 fa3a 	bl	80075e4 <__multadd>
 8007170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007176:	4683      	mov	fp, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8194 	beq.w	80074a6 <_dtoa_r+0xb96>
 800717e:	4631      	mov	r1, r6
 8007180:	2300      	movs	r3, #0
 8007182:	220a      	movs	r2, #10
 8007184:	4628      	mov	r0, r5
 8007186:	f000 fa2d 	bl	80075e4 <__multadd>
 800718a:	f1b9 0f00 	cmp.w	r9, #0
 800718e:	4606      	mov	r6, r0
 8007190:	f300 8093 	bgt.w	80072ba <_dtoa_r+0x9aa>
 8007194:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007196:	2b02      	cmp	r3, #2
 8007198:	dc57      	bgt.n	800724a <_dtoa_r+0x93a>
 800719a:	e08e      	b.n	80072ba <_dtoa_r+0x9aa>
 800719c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800719e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071a2:	e757      	b.n	8007054 <_dtoa_r+0x744>
 80071a4:	3fe00000 	.word	0x3fe00000
 80071a8:	40240000 	.word	0x40240000
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	1e5c      	subs	r4, r3, #1
 80071b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	bfbf      	itttt	lt
 80071b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80071b8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80071ba:	1ae2      	sublt	r2, r4, r3
 80071bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80071be:	bfb6      	itet	lt
 80071c0:	189b      	addlt	r3, r3, r2
 80071c2:	1b1c      	subge	r4, r3, r4
 80071c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80071c6:	9b08      	ldr	r3, [sp, #32]
 80071c8:	bfb8      	it	lt
 80071ca:	2400      	movlt	r4, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	bfb9      	ittee	lt
 80071d0:	9b06      	ldrlt	r3, [sp, #24]
 80071d2:	9a08      	ldrlt	r2, [sp, #32]
 80071d4:	9f06      	ldrge	r7, [sp, #24]
 80071d6:	9b08      	ldrge	r3, [sp, #32]
 80071d8:	bfbc      	itt	lt
 80071da:	1a9f      	sublt	r7, r3, r2
 80071dc:	2300      	movlt	r3, #0
 80071de:	e73b      	b.n	8007058 <_dtoa_r+0x748>
 80071e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80071e2:	9f06      	ldr	r7, [sp, #24]
 80071e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80071e6:	e742      	b.n	800706e <_dtoa_r+0x75e>
 80071e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ea:	e76b      	b.n	80070c4 <_dtoa_r+0x7b4>
 80071ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	dc19      	bgt.n	8007226 <_dtoa_r+0x916>
 80071f2:	9b04      	ldr	r3, [sp, #16]
 80071f4:	b9bb      	cbnz	r3, 8007226 <_dtoa_r+0x916>
 80071f6:	9b05      	ldr	r3, [sp, #20]
 80071f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071fc:	b99b      	cbnz	r3, 8007226 <_dtoa_r+0x916>
 80071fe:	9b05      	ldr	r3, [sp, #20]
 8007200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007204:	0d1b      	lsrs	r3, r3, #20
 8007206:	051b      	lsls	r3, r3, #20
 8007208:	b183      	cbz	r3, 800722c <_dtoa_r+0x91c>
 800720a:	9b06      	ldr	r3, [sp, #24]
 800720c:	3301      	adds	r3, #1
 800720e:	9306      	str	r3, [sp, #24]
 8007210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007212:	3301      	adds	r3, #1
 8007214:	9309      	str	r3, [sp, #36]	; 0x24
 8007216:	f04f 0801 	mov.w	r8, #1
 800721a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800721c:	2b00      	cmp	r3, #0
 800721e:	f47f af6a 	bne.w	80070f6 <_dtoa_r+0x7e6>
 8007222:	2001      	movs	r0, #1
 8007224:	e76f      	b.n	8007106 <_dtoa_r+0x7f6>
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	e7f6      	b.n	800721a <_dtoa_r+0x90a>
 800722c:	4698      	mov	r8, r3
 800722e:	e7f4      	b.n	800721a <_dtoa_r+0x90a>
 8007230:	f43f af7d 	beq.w	800712e <_dtoa_r+0x81e>
 8007234:	4618      	mov	r0, r3
 8007236:	301c      	adds	r0, #28
 8007238:	e772      	b.n	8007120 <_dtoa_r+0x810>
 800723a:	9b08      	ldr	r3, [sp, #32]
 800723c:	2b00      	cmp	r3, #0
 800723e:	dc36      	bgt.n	80072ae <_dtoa_r+0x99e>
 8007240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007242:	2b02      	cmp	r3, #2
 8007244:	dd33      	ble.n	80072ae <_dtoa_r+0x99e>
 8007246:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800724a:	f1b9 0f00 	cmp.w	r9, #0
 800724e:	d10d      	bne.n	800726c <_dtoa_r+0x95c>
 8007250:	4621      	mov	r1, r4
 8007252:	464b      	mov	r3, r9
 8007254:	2205      	movs	r2, #5
 8007256:	4628      	mov	r0, r5
 8007258:	f000 f9c4 	bl	80075e4 <__multadd>
 800725c:	4601      	mov	r1, r0
 800725e:	4604      	mov	r4, r0
 8007260:	4658      	mov	r0, fp
 8007262:	f000 fbdb 	bl	8007a1c <__mcmp>
 8007266:	2800      	cmp	r0, #0
 8007268:	f73f adb8 	bgt.w	8006ddc <_dtoa_r+0x4cc>
 800726c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800726e:	9f03      	ldr	r7, [sp, #12]
 8007270:	ea6f 0a03 	mvn.w	sl, r3
 8007274:	f04f 0800 	mov.w	r8, #0
 8007278:	4621      	mov	r1, r4
 800727a:	4628      	mov	r0, r5
 800727c:	f000 f990 	bl	80075a0 <_Bfree>
 8007280:	2e00      	cmp	r6, #0
 8007282:	f43f aea7 	beq.w	8006fd4 <_dtoa_r+0x6c4>
 8007286:	f1b8 0f00 	cmp.w	r8, #0
 800728a:	d005      	beq.n	8007298 <_dtoa_r+0x988>
 800728c:	45b0      	cmp	r8, r6
 800728e:	d003      	beq.n	8007298 <_dtoa_r+0x988>
 8007290:	4641      	mov	r1, r8
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f984 	bl	80075a0 <_Bfree>
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f980 	bl	80075a0 <_Bfree>
 80072a0:	e698      	b.n	8006fd4 <_dtoa_r+0x6c4>
 80072a2:	2400      	movs	r4, #0
 80072a4:	4626      	mov	r6, r4
 80072a6:	e7e1      	b.n	800726c <_dtoa_r+0x95c>
 80072a8:	46c2      	mov	sl, r8
 80072aa:	4626      	mov	r6, r4
 80072ac:	e596      	b.n	8006ddc <_dtoa_r+0x4cc>
 80072ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 80fd 	beq.w	80074b4 <_dtoa_r+0xba4>
 80072ba:	2f00      	cmp	r7, #0
 80072bc:	dd05      	ble.n	80072ca <_dtoa_r+0x9ba>
 80072be:	4631      	mov	r1, r6
 80072c0:	463a      	mov	r2, r7
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 fb3a 	bl	800793c <__lshift>
 80072c8:	4606      	mov	r6, r0
 80072ca:	f1b8 0f00 	cmp.w	r8, #0
 80072ce:	d05c      	beq.n	800738a <_dtoa_r+0xa7a>
 80072d0:	6871      	ldr	r1, [r6, #4]
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 f924 	bl	8007520 <_Balloc>
 80072d8:	4607      	mov	r7, r0
 80072da:	b928      	cbnz	r0, 80072e8 <_dtoa_r+0x9d8>
 80072dc:	4b80      	ldr	r3, [pc, #512]	; (80074e0 <_dtoa_r+0xbd0>)
 80072de:	4602      	mov	r2, r0
 80072e0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072e4:	f7ff bb28 	b.w	8006938 <_dtoa_r+0x28>
 80072e8:	6932      	ldr	r2, [r6, #16]
 80072ea:	3202      	adds	r2, #2
 80072ec:	0092      	lsls	r2, r2, #2
 80072ee:	f106 010c 	add.w	r1, r6, #12
 80072f2:	300c      	adds	r0, #12
 80072f4:	f000 f906 	bl	8007504 <memcpy>
 80072f8:	2201      	movs	r2, #1
 80072fa:	4639      	mov	r1, r7
 80072fc:	4628      	mov	r0, r5
 80072fe:	f000 fb1d 	bl	800793c <__lshift>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	9308      	str	r3, [sp, #32]
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	444b      	add	r3, r9
 800730c:	930a      	str	r3, [sp, #40]	; 0x28
 800730e:	9b04      	ldr	r3, [sp, #16]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	46b0      	mov	r8, r6
 8007316:	9309      	str	r3, [sp, #36]	; 0x24
 8007318:	4606      	mov	r6, r0
 800731a:	9b08      	ldr	r3, [sp, #32]
 800731c:	4621      	mov	r1, r4
 800731e:	3b01      	subs	r3, #1
 8007320:	4658      	mov	r0, fp
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	f7ff fa6a 	bl	80067fc <quorem>
 8007328:	4603      	mov	r3, r0
 800732a:	3330      	adds	r3, #48	; 0x30
 800732c:	9006      	str	r0, [sp, #24]
 800732e:	4641      	mov	r1, r8
 8007330:	4658      	mov	r0, fp
 8007332:	930b      	str	r3, [sp, #44]	; 0x2c
 8007334:	f000 fb72 	bl	8007a1c <__mcmp>
 8007338:	4632      	mov	r2, r6
 800733a:	4681      	mov	r9, r0
 800733c:	4621      	mov	r1, r4
 800733e:	4628      	mov	r0, r5
 8007340:	f000 fb88 	bl	8007a54 <__mdiff>
 8007344:	68c2      	ldr	r2, [r0, #12]
 8007346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007348:	4607      	mov	r7, r0
 800734a:	bb02      	cbnz	r2, 800738e <_dtoa_r+0xa7e>
 800734c:	4601      	mov	r1, r0
 800734e:	4658      	mov	r0, fp
 8007350:	f000 fb64 	bl	8007a1c <__mcmp>
 8007354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007356:	4602      	mov	r2, r0
 8007358:	4639      	mov	r1, r7
 800735a:	4628      	mov	r0, r5
 800735c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007360:	f000 f91e 	bl	80075a0 <_Bfree>
 8007364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007368:	9f08      	ldr	r7, [sp, #32]
 800736a:	ea43 0102 	orr.w	r1, r3, r2
 800736e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007370:	430b      	orrs	r3, r1
 8007372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007374:	d10d      	bne.n	8007392 <_dtoa_r+0xa82>
 8007376:	2b39      	cmp	r3, #57	; 0x39
 8007378:	d029      	beq.n	80073ce <_dtoa_r+0xabe>
 800737a:	f1b9 0f00 	cmp.w	r9, #0
 800737e:	dd01      	ble.n	8007384 <_dtoa_r+0xa74>
 8007380:	9b06      	ldr	r3, [sp, #24]
 8007382:	3331      	adds	r3, #49	; 0x31
 8007384:	9a04      	ldr	r2, [sp, #16]
 8007386:	7013      	strb	r3, [r2, #0]
 8007388:	e776      	b.n	8007278 <_dtoa_r+0x968>
 800738a:	4630      	mov	r0, r6
 800738c:	e7b9      	b.n	8007302 <_dtoa_r+0x9f2>
 800738e:	2201      	movs	r2, #1
 8007390:	e7e2      	b.n	8007358 <_dtoa_r+0xa48>
 8007392:	f1b9 0f00 	cmp.w	r9, #0
 8007396:	db06      	blt.n	80073a6 <_dtoa_r+0xa96>
 8007398:	9922      	ldr	r1, [sp, #136]	; 0x88
 800739a:	ea41 0909 	orr.w	r9, r1, r9
 800739e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a0:	ea59 0101 	orrs.w	r1, r9, r1
 80073a4:	d120      	bne.n	80073e8 <_dtoa_r+0xad8>
 80073a6:	2a00      	cmp	r2, #0
 80073a8:	ddec      	ble.n	8007384 <_dtoa_r+0xa74>
 80073aa:	4659      	mov	r1, fp
 80073ac:	2201      	movs	r2, #1
 80073ae:	4628      	mov	r0, r5
 80073b0:	9308      	str	r3, [sp, #32]
 80073b2:	f000 fac3 	bl	800793c <__lshift>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4683      	mov	fp, r0
 80073ba:	f000 fb2f 	bl	8007a1c <__mcmp>
 80073be:	2800      	cmp	r0, #0
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	dc02      	bgt.n	80073ca <_dtoa_r+0xaba>
 80073c4:	d1de      	bne.n	8007384 <_dtoa_r+0xa74>
 80073c6:	07da      	lsls	r2, r3, #31
 80073c8:	d5dc      	bpl.n	8007384 <_dtoa_r+0xa74>
 80073ca:	2b39      	cmp	r3, #57	; 0x39
 80073cc:	d1d8      	bne.n	8007380 <_dtoa_r+0xa70>
 80073ce:	9a04      	ldr	r2, [sp, #16]
 80073d0:	2339      	movs	r3, #57	; 0x39
 80073d2:	7013      	strb	r3, [r2, #0]
 80073d4:	463b      	mov	r3, r7
 80073d6:	461f      	mov	r7, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80073de:	2a39      	cmp	r2, #57	; 0x39
 80073e0:	d050      	beq.n	8007484 <_dtoa_r+0xb74>
 80073e2:	3201      	adds	r2, #1
 80073e4:	701a      	strb	r2, [r3, #0]
 80073e6:	e747      	b.n	8007278 <_dtoa_r+0x968>
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	dd03      	ble.n	80073f4 <_dtoa_r+0xae4>
 80073ec:	2b39      	cmp	r3, #57	; 0x39
 80073ee:	d0ee      	beq.n	80073ce <_dtoa_r+0xabe>
 80073f0:	3301      	adds	r3, #1
 80073f2:	e7c7      	b.n	8007384 <_dtoa_r+0xa74>
 80073f4:	9a08      	ldr	r2, [sp, #32]
 80073f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073fc:	428a      	cmp	r2, r1
 80073fe:	d02a      	beq.n	8007456 <_dtoa_r+0xb46>
 8007400:	4659      	mov	r1, fp
 8007402:	2300      	movs	r3, #0
 8007404:	220a      	movs	r2, #10
 8007406:	4628      	mov	r0, r5
 8007408:	f000 f8ec 	bl	80075e4 <__multadd>
 800740c:	45b0      	cmp	r8, r6
 800740e:	4683      	mov	fp, r0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	f04f 020a 	mov.w	r2, #10
 8007418:	4641      	mov	r1, r8
 800741a:	4628      	mov	r0, r5
 800741c:	d107      	bne.n	800742e <_dtoa_r+0xb1e>
 800741e:	f000 f8e1 	bl	80075e4 <__multadd>
 8007422:	4680      	mov	r8, r0
 8007424:	4606      	mov	r6, r0
 8007426:	9b08      	ldr	r3, [sp, #32]
 8007428:	3301      	adds	r3, #1
 800742a:	9308      	str	r3, [sp, #32]
 800742c:	e775      	b.n	800731a <_dtoa_r+0xa0a>
 800742e:	f000 f8d9 	bl	80075e4 <__multadd>
 8007432:	4631      	mov	r1, r6
 8007434:	4680      	mov	r8, r0
 8007436:	2300      	movs	r3, #0
 8007438:	220a      	movs	r2, #10
 800743a:	4628      	mov	r0, r5
 800743c:	f000 f8d2 	bl	80075e4 <__multadd>
 8007440:	4606      	mov	r6, r0
 8007442:	e7f0      	b.n	8007426 <_dtoa_r+0xb16>
 8007444:	f1b9 0f00 	cmp.w	r9, #0
 8007448:	9a03      	ldr	r2, [sp, #12]
 800744a:	bfcc      	ite	gt
 800744c:	464f      	movgt	r7, r9
 800744e:	2701      	movle	r7, #1
 8007450:	4417      	add	r7, r2
 8007452:	f04f 0800 	mov.w	r8, #0
 8007456:	4659      	mov	r1, fp
 8007458:	2201      	movs	r2, #1
 800745a:	4628      	mov	r0, r5
 800745c:	9308      	str	r3, [sp, #32]
 800745e:	f000 fa6d 	bl	800793c <__lshift>
 8007462:	4621      	mov	r1, r4
 8007464:	4683      	mov	fp, r0
 8007466:	f000 fad9 	bl	8007a1c <__mcmp>
 800746a:	2800      	cmp	r0, #0
 800746c:	dcb2      	bgt.n	80073d4 <_dtoa_r+0xac4>
 800746e:	d102      	bne.n	8007476 <_dtoa_r+0xb66>
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	07db      	lsls	r3, r3, #31
 8007474:	d4ae      	bmi.n	80073d4 <_dtoa_r+0xac4>
 8007476:	463b      	mov	r3, r7
 8007478:	461f      	mov	r7, r3
 800747a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800747e:	2a30      	cmp	r2, #48	; 0x30
 8007480:	d0fa      	beq.n	8007478 <_dtoa_r+0xb68>
 8007482:	e6f9      	b.n	8007278 <_dtoa_r+0x968>
 8007484:	9a03      	ldr	r2, [sp, #12]
 8007486:	429a      	cmp	r2, r3
 8007488:	d1a5      	bne.n	80073d6 <_dtoa_r+0xac6>
 800748a:	f10a 0a01 	add.w	sl, sl, #1
 800748e:	2331      	movs	r3, #49	; 0x31
 8007490:	e779      	b.n	8007386 <_dtoa_r+0xa76>
 8007492:	4b14      	ldr	r3, [pc, #80]	; (80074e4 <_dtoa_r+0xbd4>)
 8007494:	f7ff baa7 	b.w	80069e6 <_dtoa_r+0xd6>
 8007498:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800749a:	2b00      	cmp	r3, #0
 800749c:	f47f aa80 	bne.w	80069a0 <_dtoa_r+0x90>
 80074a0:	4b11      	ldr	r3, [pc, #68]	; (80074e8 <_dtoa_r+0xbd8>)
 80074a2:	f7ff baa0 	b.w	80069e6 <_dtoa_r+0xd6>
 80074a6:	f1b9 0f00 	cmp.w	r9, #0
 80074aa:	dc03      	bgt.n	80074b4 <_dtoa_r+0xba4>
 80074ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	f73f aecb 	bgt.w	800724a <_dtoa_r+0x93a>
 80074b4:	9f03      	ldr	r7, [sp, #12]
 80074b6:	4621      	mov	r1, r4
 80074b8:	4658      	mov	r0, fp
 80074ba:	f7ff f99f 	bl	80067fc <quorem>
 80074be:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80074c2:	f807 3b01 	strb.w	r3, [r7], #1
 80074c6:	9a03      	ldr	r2, [sp, #12]
 80074c8:	1aba      	subs	r2, r7, r2
 80074ca:	4591      	cmp	r9, r2
 80074cc:	ddba      	ble.n	8007444 <_dtoa_r+0xb34>
 80074ce:	4659      	mov	r1, fp
 80074d0:	2300      	movs	r3, #0
 80074d2:	220a      	movs	r2, #10
 80074d4:	4628      	mov	r0, r5
 80074d6:	f000 f885 	bl	80075e4 <__multadd>
 80074da:	4683      	mov	fp, r0
 80074dc:	e7eb      	b.n	80074b6 <_dtoa_r+0xba6>
 80074de:	bf00      	nop
 80074e0:	08008dbf 	.word	0x08008dbf
 80074e4:	08008d1c 	.word	0x08008d1c
 80074e8:	08008d40 	.word	0x08008d40

080074ec <_localeconv_r>:
 80074ec:	4800      	ldr	r0, [pc, #0]	; (80074f0 <_localeconv_r+0x4>)
 80074ee:	4770      	bx	lr
 80074f0:	20000174 	.word	0x20000174

080074f4 <malloc>:
 80074f4:	4b02      	ldr	r3, [pc, #8]	; (8007500 <malloc+0xc>)
 80074f6:	4601      	mov	r1, r0
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	f000 bc0d 	b.w	8007d18 <_malloc_r>
 80074fe:	bf00      	nop
 8007500:	20000020 	.word	0x20000020

08007504 <memcpy>:
 8007504:	440a      	add	r2, r1
 8007506:	4291      	cmp	r1, r2
 8007508:	f100 33ff 	add.w	r3, r0, #4294967295
 800750c:	d100      	bne.n	8007510 <memcpy+0xc>
 800750e:	4770      	bx	lr
 8007510:	b510      	push	{r4, lr}
 8007512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800751a:	4291      	cmp	r1, r2
 800751c:	d1f9      	bne.n	8007512 <memcpy+0xe>
 800751e:	bd10      	pop	{r4, pc}

08007520 <_Balloc>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007524:	4604      	mov	r4, r0
 8007526:	460d      	mov	r5, r1
 8007528:	b976      	cbnz	r6, 8007548 <_Balloc+0x28>
 800752a:	2010      	movs	r0, #16
 800752c:	f7ff ffe2 	bl	80074f4 <malloc>
 8007530:	4602      	mov	r2, r0
 8007532:	6260      	str	r0, [r4, #36]	; 0x24
 8007534:	b920      	cbnz	r0, 8007540 <_Balloc+0x20>
 8007536:	4b18      	ldr	r3, [pc, #96]	; (8007598 <_Balloc+0x78>)
 8007538:	4818      	ldr	r0, [pc, #96]	; (800759c <_Balloc+0x7c>)
 800753a:	2166      	movs	r1, #102	; 0x66
 800753c:	f000 fdcc 	bl	80080d8 <__assert_func>
 8007540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007544:	6006      	str	r6, [r0, #0]
 8007546:	60c6      	str	r6, [r0, #12]
 8007548:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800754a:	68f3      	ldr	r3, [r6, #12]
 800754c:	b183      	cbz	r3, 8007570 <_Balloc+0x50>
 800754e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007556:	b9b8      	cbnz	r0, 8007588 <_Balloc+0x68>
 8007558:	2101      	movs	r1, #1
 800755a:	fa01 f605 	lsl.w	r6, r1, r5
 800755e:	1d72      	adds	r2, r6, #5
 8007560:	0092      	lsls	r2, r2, #2
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fb5a 	bl	8007c1c <_calloc_r>
 8007568:	b160      	cbz	r0, 8007584 <_Balloc+0x64>
 800756a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800756e:	e00e      	b.n	800758e <_Balloc+0x6e>
 8007570:	2221      	movs	r2, #33	; 0x21
 8007572:	2104      	movs	r1, #4
 8007574:	4620      	mov	r0, r4
 8007576:	f000 fb51 	bl	8007c1c <_calloc_r>
 800757a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800757c:	60f0      	str	r0, [r6, #12]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e4      	bne.n	800754e <_Balloc+0x2e>
 8007584:	2000      	movs	r0, #0
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	6802      	ldr	r2, [r0, #0]
 800758a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800758e:	2300      	movs	r3, #0
 8007590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007594:	e7f7      	b.n	8007586 <_Balloc+0x66>
 8007596:	bf00      	nop
 8007598:	08008d4d 	.word	0x08008d4d
 800759c:	08008dd0 	.word	0x08008dd0

080075a0 <_Bfree>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075a4:	4605      	mov	r5, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	b976      	cbnz	r6, 80075c8 <_Bfree+0x28>
 80075aa:	2010      	movs	r0, #16
 80075ac:	f7ff ffa2 	bl	80074f4 <malloc>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6268      	str	r0, [r5, #36]	; 0x24
 80075b4:	b920      	cbnz	r0, 80075c0 <_Bfree+0x20>
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <_Bfree+0x3c>)
 80075b8:	4809      	ldr	r0, [pc, #36]	; (80075e0 <_Bfree+0x40>)
 80075ba:	218a      	movs	r1, #138	; 0x8a
 80075bc:	f000 fd8c 	bl	80080d8 <__assert_func>
 80075c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c4:	6006      	str	r6, [r0, #0]
 80075c6:	60c6      	str	r6, [r0, #12]
 80075c8:	b13c      	cbz	r4, 80075da <_Bfree+0x3a>
 80075ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075cc:	6862      	ldr	r2, [r4, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075d4:	6021      	str	r1, [r4, #0]
 80075d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	08008d4d 	.word	0x08008d4d
 80075e0:	08008dd0 	.word	0x08008dd0

080075e4 <__multadd>:
 80075e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e8:	690d      	ldr	r5, [r1, #16]
 80075ea:	4607      	mov	r7, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	461e      	mov	r6, r3
 80075f0:	f101 0c14 	add.w	ip, r1, #20
 80075f4:	2000      	movs	r0, #0
 80075f6:	f8dc 3000 	ldr.w	r3, [ip]
 80075fa:	b299      	uxth	r1, r3
 80075fc:	fb02 6101 	mla	r1, r2, r1, r6
 8007600:	0c1e      	lsrs	r6, r3, #16
 8007602:	0c0b      	lsrs	r3, r1, #16
 8007604:	fb02 3306 	mla	r3, r2, r6, r3
 8007608:	b289      	uxth	r1, r1
 800760a:	3001      	adds	r0, #1
 800760c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007610:	4285      	cmp	r5, r0
 8007612:	f84c 1b04 	str.w	r1, [ip], #4
 8007616:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800761a:	dcec      	bgt.n	80075f6 <__multadd+0x12>
 800761c:	b30e      	cbz	r6, 8007662 <__multadd+0x7e>
 800761e:	68a3      	ldr	r3, [r4, #8]
 8007620:	42ab      	cmp	r3, r5
 8007622:	dc19      	bgt.n	8007658 <__multadd+0x74>
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	4638      	mov	r0, r7
 8007628:	3101      	adds	r1, #1
 800762a:	f7ff ff79 	bl	8007520 <_Balloc>
 800762e:	4680      	mov	r8, r0
 8007630:	b928      	cbnz	r0, 800763e <__multadd+0x5a>
 8007632:	4602      	mov	r2, r0
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <__multadd+0x84>)
 8007636:	480d      	ldr	r0, [pc, #52]	; (800766c <__multadd+0x88>)
 8007638:	21b5      	movs	r1, #181	; 0xb5
 800763a:	f000 fd4d 	bl	80080d8 <__assert_func>
 800763e:	6922      	ldr	r2, [r4, #16]
 8007640:	3202      	adds	r2, #2
 8007642:	f104 010c 	add.w	r1, r4, #12
 8007646:	0092      	lsls	r2, r2, #2
 8007648:	300c      	adds	r0, #12
 800764a:	f7ff ff5b 	bl	8007504 <memcpy>
 800764e:	4621      	mov	r1, r4
 8007650:	4638      	mov	r0, r7
 8007652:	f7ff ffa5 	bl	80075a0 <_Bfree>
 8007656:	4644      	mov	r4, r8
 8007658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800765c:	3501      	adds	r5, #1
 800765e:	615e      	str	r6, [r3, #20]
 8007660:	6125      	str	r5, [r4, #16]
 8007662:	4620      	mov	r0, r4
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	08008dbf 	.word	0x08008dbf
 800766c:	08008dd0 	.word	0x08008dd0

08007670 <__hi0bits>:
 8007670:	0c02      	lsrs	r2, r0, #16
 8007672:	0412      	lsls	r2, r2, #16
 8007674:	4603      	mov	r3, r0
 8007676:	b9ca      	cbnz	r2, 80076ac <__hi0bits+0x3c>
 8007678:	0403      	lsls	r3, r0, #16
 800767a:	2010      	movs	r0, #16
 800767c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007680:	bf04      	itt	eq
 8007682:	021b      	lsleq	r3, r3, #8
 8007684:	3008      	addeq	r0, #8
 8007686:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800768a:	bf04      	itt	eq
 800768c:	011b      	lsleq	r3, r3, #4
 800768e:	3004      	addeq	r0, #4
 8007690:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007694:	bf04      	itt	eq
 8007696:	009b      	lsleq	r3, r3, #2
 8007698:	3002      	addeq	r0, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	db05      	blt.n	80076aa <__hi0bits+0x3a>
 800769e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80076a2:	f100 0001 	add.w	r0, r0, #1
 80076a6:	bf08      	it	eq
 80076a8:	2020      	moveq	r0, #32
 80076aa:	4770      	bx	lr
 80076ac:	2000      	movs	r0, #0
 80076ae:	e7e5      	b.n	800767c <__hi0bits+0xc>

080076b0 <__lo0bits>:
 80076b0:	6803      	ldr	r3, [r0, #0]
 80076b2:	4602      	mov	r2, r0
 80076b4:	f013 0007 	ands.w	r0, r3, #7
 80076b8:	d00b      	beq.n	80076d2 <__lo0bits+0x22>
 80076ba:	07d9      	lsls	r1, r3, #31
 80076bc:	d421      	bmi.n	8007702 <__lo0bits+0x52>
 80076be:	0798      	lsls	r0, r3, #30
 80076c0:	bf49      	itett	mi
 80076c2:	085b      	lsrmi	r3, r3, #1
 80076c4:	089b      	lsrpl	r3, r3, #2
 80076c6:	2001      	movmi	r0, #1
 80076c8:	6013      	strmi	r3, [r2, #0]
 80076ca:	bf5c      	itt	pl
 80076cc:	6013      	strpl	r3, [r2, #0]
 80076ce:	2002      	movpl	r0, #2
 80076d0:	4770      	bx	lr
 80076d2:	b299      	uxth	r1, r3
 80076d4:	b909      	cbnz	r1, 80076da <__lo0bits+0x2a>
 80076d6:	0c1b      	lsrs	r3, r3, #16
 80076d8:	2010      	movs	r0, #16
 80076da:	b2d9      	uxtb	r1, r3
 80076dc:	b909      	cbnz	r1, 80076e2 <__lo0bits+0x32>
 80076de:	3008      	adds	r0, #8
 80076e0:	0a1b      	lsrs	r3, r3, #8
 80076e2:	0719      	lsls	r1, r3, #28
 80076e4:	bf04      	itt	eq
 80076e6:	091b      	lsreq	r3, r3, #4
 80076e8:	3004      	addeq	r0, #4
 80076ea:	0799      	lsls	r1, r3, #30
 80076ec:	bf04      	itt	eq
 80076ee:	089b      	lsreq	r3, r3, #2
 80076f0:	3002      	addeq	r0, #2
 80076f2:	07d9      	lsls	r1, r3, #31
 80076f4:	d403      	bmi.n	80076fe <__lo0bits+0x4e>
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	f100 0001 	add.w	r0, r0, #1
 80076fc:	d003      	beq.n	8007706 <__lo0bits+0x56>
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	4770      	bx	lr
 8007702:	2000      	movs	r0, #0
 8007704:	4770      	bx	lr
 8007706:	2020      	movs	r0, #32
 8007708:	4770      	bx	lr
	...

0800770c <__i2b>:
 800770c:	b510      	push	{r4, lr}
 800770e:	460c      	mov	r4, r1
 8007710:	2101      	movs	r1, #1
 8007712:	f7ff ff05 	bl	8007520 <_Balloc>
 8007716:	4602      	mov	r2, r0
 8007718:	b928      	cbnz	r0, 8007726 <__i2b+0x1a>
 800771a:	4b05      	ldr	r3, [pc, #20]	; (8007730 <__i2b+0x24>)
 800771c:	4805      	ldr	r0, [pc, #20]	; (8007734 <__i2b+0x28>)
 800771e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007722:	f000 fcd9 	bl	80080d8 <__assert_func>
 8007726:	2301      	movs	r3, #1
 8007728:	6144      	str	r4, [r0, #20]
 800772a:	6103      	str	r3, [r0, #16]
 800772c:	bd10      	pop	{r4, pc}
 800772e:	bf00      	nop
 8007730:	08008dbf 	.word	0x08008dbf
 8007734:	08008dd0 	.word	0x08008dd0

08007738 <__multiply>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	4691      	mov	r9, r2
 800773e:	690a      	ldr	r2, [r1, #16]
 8007740:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007744:	429a      	cmp	r2, r3
 8007746:	bfb8      	it	lt
 8007748:	460b      	movlt	r3, r1
 800774a:	460c      	mov	r4, r1
 800774c:	bfbc      	itt	lt
 800774e:	464c      	movlt	r4, r9
 8007750:	4699      	movlt	r9, r3
 8007752:	6927      	ldr	r7, [r4, #16]
 8007754:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	6861      	ldr	r1, [r4, #4]
 800775c:	eb07 060a 	add.w	r6, r7, sl
 8007760:	42b3      	cmp	r3, r6
 8007762:	b085      	sub	sp, #20
 8007764:	bfb8      	it	lt
 8007766:	3101      	addlt	r1, #1
 8007768:	f7ff feda 	bl	8007520 <_Balloc>
 800776c:	b930      	cbnz	r0, 800777c <__multiply+0x44>
 800776e:	4602      	mov	r2, r0
 8007770:	4b43      	ldr	r3, [pc, #268]	; (8007880 <__multiply+0x148>)
 8007772:	4844      	ldr	r0, [pc, #272]	; (8007884 <__multiply+0x14c>)
 8007774:	f240 115d 	movw	r1, #349	; 0x15d
 8007778:	f000 fcae 	bl	80080d8 <__assert_func>
 800777c:	f100 0514 	add.w	r5, r0, #20
 8007780:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007784:	462b      	mov	r3, r5
 8007786:	2200      	movs	r2, #0
 8007788:	4543      	cmp	r3, r8
 800778a:	d321      	bcc.n	80077d0 <__multiply+0x98>
 800778c:	f104 0314 	add.w	r3, r4, #20
 8007790:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007794:	f109 0314 	add.w	r3, r9, #20
 8007798:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800779c:	9202      	str	r2, [sp, #8]
 800779e:	1b3a      	subs	r2, r7, r4
 80077a0:	3a15      	subs	r2, #21
 80077a2:	f022 0203 	bic.w	r2, r2, #3
 80077a6:	3204      	adds	r2, #4
 80077a8:	f104 0115 	add.w	r1, r4, #21
 80077ac:	428f      	cmp	r7, r1
 80077ae:	bf38      	it	cc
 80077b0:	2204      	movcc	r2, #4
 80077b2:	9201      	str	r2, [sp, #4]
 80077b4:	9a02      	ldr	r2, [sp, #8]
 80077b6:	9303      	str	r3, [sp, #12]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d80c      	bhi.n	80077d6 <__multiply+0x9e>
 80077bc:	2e00      	cmp	r6, #0
 80077be:	dd03      	ble.n	80077c8 <__multiply+0x90>
 80077c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d059      	beq.n	800787c <__multiply+0x144>
 80077c8:	6106      	str	r6, [r0, #16]
 80077ca:	b005      	add	sp, #20
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d0:	f843 2b04 	str.w	r2, [r3], #4
 80077d4:	e7d8      	b.n	8007788 <__multiply+0x50>
 80077d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80077da:	f1ba 0f00 	cmp.w	sl, #0
 80077de:	d023      	beq.n	8007828 <__multiply+0xf0>
 80077e0:	f104 0e14 	add.w	lr, r4, #20
 80077e4:	46a9      	mov	r9, r5
 80077e6:	f04f 0c00 	mov.w	ip, #0
 80077ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80077ee:	f8d9 1000 	ldr.w	r1, [r9]
 80077f2:	fa1f fb82 	uxth.w	fp, r2
 80077f6:	b289      	uxth	r1, r1
 80077f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80077fc:	4461      	add	r1, ip
 80077fe:	f8d9 c000 	ldr.w	ip, [r9]
 8007802:	0c12      	lsrs	r2, r2, #16
 8007804:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007808:	fb0a c202 	mla	r2, sl, r2, ip
 800780c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007810:	b289      	uxth	r1, r1
 8007812:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007816:	4577      	cmp	r7, lr
 8007818:	f849 1b04 	str.w	r1, [r9], #4
 800781c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007820:	d8e3      	bhi.n	80077ea <__multiply+0xb2>
 8007822:	9a01      	ldr	r2, [sp, #4]
 8007824:	f845 c002 	str.w	ip, [r5, r2]
 8007828:	9a03      	ldr	r2, [sp, #12]
 800782a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800782e:	3304      	adds	r3, #4
 8007830:	f1b9 0f00 	cmp.w	r9, #0
 8007834:	d020      	beq.n	8007878 <__multiply+0x140>
 8007836:	6829      	ldr	r1, [r5, #0]
 8007838:	f104 0c14 	add.w	ip, r4, #20
 800783c:	46ae      	mov	lr, r5
 800783e:	f04f 0a00 	mov.w	sl, #0
 8007842:	f8bc b000 	ldrh.w	fp, [ip]
 8007846:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800784a:	fb09 220b 	mla	r2, r9, fp, r2
 800784e:	4492      	add	sl, r2
 8007850:	b289      	uxth	r1, r1
 8007852:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007856:	f84e 1b04 	str.w	r1, [lr], #4
 800785a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800785e:	f8be 1000 	ldrh.w	r1, [lr]
 8007862:	0c12      	lsrs	r2, r2, #16
 8007864:	fb09 1102 	mla	r1, r9, r2, r1
 8007868:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800786c:	4567      	cmp	r7, ip
 800786e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007872:	d8e6      	bhi.n	8007842 <__multiply+0x10a>
 8007874:	9a01      	ldr	r2, [sp, #4]
 8007876:	50a9      	str	r1, [r5, r2]
 8007878:	3504      	adds	r5, #4
 800787a:	e79b      	b.n	80077b4 <__multiply+0x7c>
 800787c:	3e01      	subs	r6, #1
 800787e:	e79d      	b.n	80077bc <__multiply+0x84>
 8007880:	08008dbf 	.word	0x08008dbf
 8007884:	08008dd0 	.word	0x08008dd0

08007888 <__pow5mult>:
 8007888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800788c:	4615      	mov	r5, r2
 800788e:	f012 0203 	ands.w	r2, r2, #3
 8007892:	4606      	mov	r6, r0
 8007894:	460f      	mov	r7, r1
 8007896:	d007      	beq.n	80078a8 <__pow5mult+0x20>
 8007898:	4c25      	ldr	r4, [pc, #148]	; (8007930 <__pow5mult+0xa8>)
 800789a:	3a01      	subs	r2, #1
 800789c:	2300      	movs	r3, #0
 800789e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078a2:	f7ff fe9f 	bl	80075e4 <__multadd>
 80078a6:	4607      	mov	r7, r0
 80078a8:	10ad      	asrs	r5, r5, #2
 80078aa:	d03d      	beq.n	8007928 <__pow5mult+0xa0>
 80078ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078ae:	b97c      	cbnz	r4, 80078d0 <__pow5mult+0x48>
 80078b0:	2010      	movs	r0, #16
 80078b2:	f7ff fe1f 	bl	80074f4 <malloc>
 80078b6:	4602      	mov	r2, r0
 80078b8:	6270      	str	r0, [r6, #36]	; 0x24
 80078ba:	b928      	cbnz	r0, 80078c8 <__pow5mult+0x40>
 80078bc:	4b1d      	ldr	r3, [pc, #116]	; (8007934 <__pow5mult+0xac>)
 80078be:	481e      	ldr	r0, [pc, #120]	; (8007938 <__pow5mult+0xb0>)
 80078c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078c4:	f000 fc08 	bl	80080d8 <__assert_func>
 80078c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078cc:	6004      	str	r4, [r0, #0]
 80078ce:	60c4      	str	r4, [r0, #12]
 80078d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078d8:	b94c      	cbnz	r4, 80078ee <__pow5mult+0x66>
 80078da:	f240 2171 	movw	r1, #625	; 0x271
 80078de:	4630      	mov	r0, r6
 80078e0:	f7ff ff14 	bl	800770c <__i2b>
 80078e4:	2300      	movs	r3, #0
 80078e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80078ea:	4604      	mov	r4, r0
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	f04f 0900 	mov.w	r9, #0
 80078f2:	07eb      	lsls	r3, r5, #31
 80078f4:	d50a      	bpl.n	800790c <__pow5mult+0x84>
 80078f6:	4639      	mov	r1, r7
 80078f8:	4622      	mov	r2, r4
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7ff ff1c 	bl	8007738 <__multiply>
 8007900:	4639      	mov	r1, r7
 8007902:	4680      	mov	r8, r0
 8007904:	4630      	mov	r0, r6
 8007906:	f7ff fe4b 	bl	80075a0 <_Bfree>
 800790a:	4647      	mov	r7, r8
 800790c:	106d      	asrs	r5, r5, #1
 800790e:	d00b      	beq.n	8007928 <__pow5mult+0xa0>
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	b938      	cbnz	r0, 8007924 <__pow5mult+0x9c>
 8007914:	4622      	mov	r2, r4
 8007916:	4621      	mov	r1, r4
 8007918:	4630      	mov	r0, r6
 800791a:	f7ff ff0d 	bl	8007738 <__multiply>
 800791e:	6020      	str	r0, [r4, #0]
 8007920:	f8c0 9000 	str.w	r9, [r0]
 8007924:	4604      	mov	r4, r0
 8007926:	e7e4      	b.n	80078f2 <__pow5mult+0x6a>
 8007928:	4638      	mov	r0, r7
 800792a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792e:	bf00      	nop
 8007930:	08008f20 	.word	0x08008f20
 8007934:	08008d4d 	.word	0x08008d4d
 8007938:	08008dd0 	.word	0x08008dd0

0800793c <__lshift>:
 800793c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007940:	460c      	mov	r4, r1
 8007942:	6849      	ldr	r1, [r1, #4]
 8007944:	6923      	ldr	r3, [r4, #16]
 8007946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	4607      	mov	r7, r0
 800794e:	4691      	mov	r9, r2
 8007950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007954:	f108 0601 	add.w	r6, r8, #1
 8007958:	42b3      	cmp	r3, r6
 800795a:	db0b      	blt.n	8007974 <__lshift+0x38>
 800795c:	4638      	mov	r0, r7
 800795e:	f7ff fddf 	bl	8007520 <_Balloc>
 8007962:	4605      	mov	r5, r0
 8007964:	b948      	cbnz	r0, 800797a <__lshift+0x3e>
 8007966:	4602      	mov	r2, r0
 8007968:	4b2a      	ldr	r3, [pc, #168]	; (8007a14 <__lshift+0xd8>)
 800796a:	482b      	ldr	r0, [pc, #172]	; (8007a18 <__lshift+0xdc>)
 800796c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007970:	f000 fbb2 	bl	80080d8 <__assert_func>
 8007974:	3101      	adds	r1, #1
 8007976:	005b      	lsls	r3, r3, #1
 8007978:	e7ee      	b.n	8007958 <__lshift+0x1c>
 800797a:	2300      	movs	r3, #0
 800797c:	f100 0114 	add.w	r1, r0, #20
 8007980:	f100 0210 	add.w	r2, r0, #16
 8007984:	4618      	mov	r0, r3
 8007986:	4553      	cmp	r3, sl
 8007988:	db37      	blt.n	80079fa <__lshift+0xbe>
 800798a:	6920      	ldr	r0, [r4, #16]
 800798c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007990:	f104 0314 	add.w	r3, r4, #20
 8007994:	f019 091f 	ands.w	r9, r9, #31
 8007998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800799c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079a0:	d02f      	beq.n	8007a02 <__lshift+0xc6>
 80079a2:	f1c9 0e20 	rsb	lr, r9, #32
 80079a6:	468a      	mov	sl, r1
 80079a8:	f04f 0c00 	mov.w	ip, #0
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	fa02 f209 	lsl.w	r2, r2, r9
 80079b2:	ea42 020c 	orr.w	r2, r2, ip
 80079b6:	f84a 2b04 	str.w	r2, [sl], #4
 80079ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80079be:	4298      	cmp	r0, r3
 80079c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80079c4:	d8f2      	bhi.n	80079ac <__lshift+0x70>
 80079c6:	1b03      	subs	r3, r0, r4
 80079c8:	3b15      	subs	r3, #21
 80079ca:	f023 0303 	bic.w	r3, r3, #3
 80079ce:	3304      	adds	r3, #4
 80079d0:	f104 0215 	add.w	r2, r4, #21
 80079d4:	4290      	cmp	r0, r2
 80079d6:	bf38      	it	cc
 80079d8:	2304      	movcc	r3, #4
 80079da:	f841 c003 	str.w	ip, [r1, r3]
 80079de:	f1bc 0f00 	cmp.w	ip, #0
 80079e2:	d001      	beq.n	80079e8 <__lshift+0xac>
 80079e4:	f108 0602 	add.w	r6, r8, #2
 80079e8:	3e01      	subs	r6, #1
 80079ea:	4638      	mov	r0, r7
 80079ec:	612e      	str	r6, [r5, #16]
 80079ee:	4621      	mov	r1, r4
 80079f0:	f7ff fdd6 	bl	80075a0 <_Bfree>
 80079f4:	4628      	mov	r0, r5
 80079f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80079fe:	3301      	adds	r3, #1
 8007a00:	e7c1      	b.n	8007986 <__lshift+0x4a>
 8007a02:	3904      	subs	r1, #4
 8007a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a08:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a0c:	4298      	cmp	r0, r3
 8007a0e:	d8f9      	bhi.n	8007a04 <__lshift+0xc8>
 8007a10:	e7ea      	b.n	80079e8 <__lshift+0xac>
 8007a12:	bf00      	nop
 8007a14:	08008dbf 	.word	0x08008dbf
 8007a18:	08008dd0 	.word	0x08008dd0

08007a1c <__mcmp>:
 8007a1c:	690a      	ldr	r2, [r1, #16]
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6900      	ldr	r0, [r0, #16]
 8007a22:	1a80      	subs	r0, r0, r2
 8007a24:	b530      	push	{r4, r5, lr}
 8007a26:	d10d      	bne.n	8007a44 <__mcmp+0x28>
 8007a28:	3314      	adds	r3, #20
 8007a2a:	3114      	adds	r1, #20
 8007a2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a3c:	4295      	cmp	r5, r2
 8007a3e:	d002      	beq.n	8007a46 <__mcmp+0x2a>
 8007a40:	d304      	bcc.n	8007a4c <__mcmp+0x30>
 8007a42:	2001      	movs	r0, #1
 8007a44:	bd30      	pop	{r4, r5, pc}
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	d3f4      	bcc.n	8007a34 <__mcmp+0x18>
 8007a4a:	e7fb      	b.n	8007a44 <__mcmp+0x28>
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	e7f8      	b.n	8007a44 <__mcmp+0x28>
	...

08007a54 <__mdiff>:
 8007a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a58:	460d      	mov	r5, r1
 8007a5a:	4607      	mov	r7, r0
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4628      	mov	r0, r5
 8007a60:	4614      	mov	r4, r2
 8007a62:	f7ff ffdb 	bl	8007a1c <__mcmp>
 8007a66:	1e06      	subs	r6, r0, #0
 8007a68:	d111      	bne.n	8007a8e <__mdiff+0x3a>
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7ff fd57 	bl	8007520 <_Balloc>
 8007a72:	4602      	mov	r2, r0
 8007a74:	b928      	cbnz	r0, 8007a82 <__mdiff+0x2e>
 8007a76:	4b39      	ldr	r3, [pc, #228]	; (8007b5c <__mdiff+0x108>)
 8007a78:	f240 2132 	movw	r1, #562	; 0x232
 8007a7c:	4838      	ldr	r0, [pc, #224]	; (8007b60 <__mdiff+0x10c>)
 8007a7e:	f000 fb2b 	bl	80080d8 <__assert_func>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007a88:	4610      	mov	r0, r2
 8007a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8e:	bfa4      	itt	ge
 8007a90:	4623      	movge	r3, r4
 8007a92:	462c      	movge	r4, r5
 8007a94:	4638      	mov	r0, r7
 8007a96:	6861      	ldr	r1, [r4, #4]
 8007a98:	bfa6      	itte	ge
 8007a9a:	461d      	movge	r5, r3
 8007a9c:	2600      	movge	r6, #0
 8007a9e:	2601      	movlt	r6, #1
 8007aa0:	f7ff fd3e 	bl	8007520 <_Balloc>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	b918      	cbnz	r0, 8007ab0 <__mdiff+0x5c>
 8007aa8:	4b2c      	ldr	r3, [pc, #176]	; (8007b5c <__mdiff+0x108>)
 8007aaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007aae:	e7e5      	b.n	8007a7c <__mdiff+0x28>
 8007ab0:	6927      	ldr	r7, [r4, #16]
 8007ab2:	60c6      	str	r6, [r0, #12]
 8007ab4:	692e      	ldr	r6, [r5, #16]
 8007ab6:	f104 0014 	add.w	r0, r4, #20
 8007aba:	f105 0914 	add.w	r9, r5, #20
 8007abe:	f102 0e14 	add.w	lr, r2, #20
 8007ac2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8007ac6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007aca:	3410      	adds	r4, #16
 8007acc:	46f2      	mov	sl, lr
 8007ace:	2100      	movs	r1, #0
 8007ad0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ad4:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007ad8:	fa1f f883 	uxth.w	r8, r3
 8007adc:	fa11 f18b 	uxtah	r1, r1, fp
 8007ae0:	0c1b      	lsrs	r3, r3, #16
 8007ae2:	eba1 0808 	sub.w	r8, r1, r8
 8007ae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007aea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007aee:	fa1f f888 	uxth.w	r8, r8
 8007af2:	1419      	asrs	r1, r3, #16
 8007af4:	454e      	cmp	r6, r9
 8007af6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007afa:	f84a 3b04 	str.w	r3, [sl], #4
 8007afe:	d8e7      	bhi.n	8007ad0 <__mdiff+0x7c>
 8007b00:	1b73      	subs	r3, r6, r5
 8007b02:	3b15      	subs	r3, #21
 8007b04:	f023 0303 	bic.w	r3, r3, #3
 8007b08:	3304      	adds	r3, #4
 8007b0a:	3515      	adds	r5, #21
 8007b0c:	42ae      	cmp	r6, r5
 8007b0e:	bf38      	it	cc
 8007b10:	2304      	movcc	r3, #4
 8007b12:	4418      	add	r0, r3
 8007b14:	4473      	add	r3, lr
 8007b16:	469e      	mov	lr, r3
 8007b18:	4606      	mov	r6, r0
 8007b1a:	4566      	cmp	r6, ip
 8007b1c:	d30e      	bcc.n	8007b3c <__mdiff+0xe8>
 8007b1e:	f10c 0103 	add.w	r1, ip, #3
 8007b22:	1a09      	subs	r1, r1, r0
 8007b24:	f021 0103 	bic.w	r1, r1, #3
 8007b28:	3803      	subs	r0, #3
 8007b2a:	4584      	cmp	ip, r0
 8007b2c:	bf38      	it	cc
 8007b2e:	2100      	movcc	r1, #0
 8007b30:	4419      	add	r1, r3
 8007b32:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007b36:	b17b      	cbz	r3, 8007b58 <__mdiff+0x104>
 8007b38:	6117      	str	r7, [r2, #16]
 8007b3a:	e7a5      	b.n	8007a88 <__mdiff+0x34>
 8007b3c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007b40:	fa11 f488 	uxtah	r4, r1, r8
 8007b44:	1425      	asrs	r5, r4, #16
 8007b46:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8007b4a:	b2a4      	uxth	r4, r4
 8007b4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007b50:	f84e 4b04 	str.w	r4, [lr], #4
 8007b54:	1429      	asrs	r1, r5, #16
 8007b56:	e7e0      	b.n	8007b1a <__mdiff+0xc6>
 8007b58:	3f01      	subs	r7, #1
 8007b5a:	e7ea      	b.n	8007b32 <__mdiff+0xde>
 8007b5c:	08008dbf 	.word	0x08008dbf
 8007b60:	08008dd0 	.word	0x08008dd0

08007b64 <__d2b>:
 8007b64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b68:	2101      	movs	r1, #1
 8007b6a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007b6e:	4690      	mov	r8, r2
 8007b70:	461d      	mov	r5, r3
 8007b72:	f7ff fcd5 	bl	8007520 <_Balloc>
 8007b76:	4604      	mov	r4, r0
 8007b78:	b930      	cbnz	r0, 8007b88 <__d2b+0x24>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	4b25      	ldr	r3, [pc, #148]	; (8007c14 <__d2b+0xb0>)
 8007b7e:	4826      	ldr	r0, [pc, #152]	; (8007c18 <__d2b+0xb4>)
 8007b80:	f240 310a 	movw	r1, #778	; 0x30a
 8007b84:	f000 faa8 	bl	80080d8 <__assert_func>
 8007b88:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007b8c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007b90:	bb2d      	cbnz	r5, 8007bde <__d2b+0x7a>
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	f1b8 0300 	subs.w	r3, r8, #0
 8007b98:	d026      	beq.n	8007be8 <__d2b+0x84>
 8007b9a:	4668      	mov	r0, sp
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	f7ff fd87 	bl	80076b0 <__lo0bits>
 8007ba2:	9900      	ldr	r1, [sp, #0]
 8007ba4:	b1f0      	cbz	r0, 8007be4 <__d2b+0x80>
 8007ba6:	9a01      	ldr	r2, [sp, #4]
 8007ba8:	f1c0 0320 	rsb	r3, r0, #32
 8007bac:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	40c2      	lsrs	r2, r0
 8007bb4:	6163      	str	r3, [r4, #20]
 8007bb6:	9201      	str	r2, [sp, #4]
 8007bb8:	9b01      	ldr	r3, [sp, #4]
 8007bba:	61a3      	str	r3, [r4, #24]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bf14      	ite	ne
 8007bc0:	2102      	movne	r1, #2
 8007bc2:	2101      	moveq	r1, #1
 8007bc4:	6121      	str	r1, [r4, #16]
 8007bc6:	b1c5      	cbz	r5, 8007bfa <__d2b+0x96>
 8007bc8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bcc:	4405      	add	r5, r0
 8007bce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bd2:	603d      	str	r5, [r7, #0]
 8007bd4:	6030      	str	r0, [r6, #0]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	b002      	add	sp, #8
 8007bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007be2:	e7d6      	b.n	8007b92 <__d2b+0x2e>
 8007be4:	6161      	str	r1, [r4, #20]
 8007be6:	e7e7      	b.n	8007bb8 <__d2b+0x54>
 8007be8:	a801      	add	r0, sp, #4
 8007bea:	f7ff fd61 	bl	80076b0 <__lo0bits>
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	6163      	str	r3, [r4, #20]
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	6121      	str	r1, [r4, #16]
 8007bf6:	3020      	adds	r0, #32
 8007bf8:	e7e5      	b.n	8007bc6 <__d2b+0x62>
 8007bfa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007bfe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c02:	6038      	str	r0, [r7, #0]
 8007c04:	6918      	ldr	r0, [r3, #16]
 8007c06:	f7ff fd33 	bl	8007670 <__hi0bits>
 8007c0a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007c0e:	6031      	str	r1, [r6, #0]
 8007c10:	e7e1      	b.n	8007bd6 <__d2b+0x72>
 8007c12:	bf00      	nop
 8007c14:	08008dbf 	.word	0x08008dbf
 8007c18:	08008dd0 	.word	0x08008dd0

08007c1c <_calloc_r>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	fba1 5402 	umull	r5, r4, r1, r2
 8007c22:	b934      	cbnz	r4, 8007c32 <_calloc_r+0x16>
 8007c24:	4629      	mov	r1, r5
 8007c26:	f000 f877 	bl	8007d18 <_malloc_r>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	b928      	cbnz	r0, 8007c3a <_calloc_r+0x1e>
 8007c2e:	4630      	mov	r0, r6
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
 8007c32:	220c      	movs	r2, #12
 8007c34:	6002      	str	r2, [r0, #0]
 8007c36:	2600      	movs	r6, #0
 8007c38:	e7f9      	b.n	8007c2e <_calloc_r+0x12>
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f7fe f959 	bl	8005ef4 <memset>
 8007c42:	e7f4      	b.n	8007c2e <_calloc_r+0x12>

08007c44 <_free_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4605      	mov	r5, r0
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	d041      	beq.n	8007cd0 <_free_r+0x8c>
 8007c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c50:	1f0c      	subs	r4, r1, #4
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	bfb8      	it	lt
 8007c56:	18e4      	addlt	r4, r4, r3
 8007c58:	f000 fa9a 	bl	8008190 <__malloc_lock>
 8007c5c:	4a1d      	ldr	r2, [pc, #116]	; (8007cd4 <_free_r+0x90>)
 8007c5e:	6813      	ldr	r3, [r2, #0]
 8007c60:	b933      	cbnz	r3, 8007c70 <_free_r+0x2c>
 8007c62:	6063      	str	r3, [r4, #4]
 8007c64:	6014      	str	r4, [r2, #0]
 8007c66:	4628      	mov	r0, r5
 8007c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c6c:	f000 ba96 	b.w	800819c <__malloc_unlock>
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	d908      	bls.n	8007c86 <_free_r+0x42>
 8007c74:	6820      	ldr	r0, [r4, #0]
 8007c76:	1821      	adds	r1, r4, r0
 8007c78:	428b      	cmp	r3, r1
 8007c7a:	bf01      	itttt	eq
 8007c7c:	6819      	ldreq	r1, [r3, #0]
 8007c7e:	685b      	ldreq	r3, [r3, #4]
 8007c80:	1809      	addeq	r1, r1, r0
 8007c82:	6021      	streq	r1, [r4, #0]
 8007c84:	e7ed      	b.n	8007c62 <_free_r+0x1e>
 8007c86:	461a      	mov	r2, r3
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	b10b      	cbz	r3, 8007c90 <_free_r+0x4c>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d9fa      	bls.n	8007c86 <_free_r+0x42>
 8007c90:	6811      	ldr	r1, [r2, #0]
 8007c92:	1850      	adds	r0, r2, r1
 8007c94:	42a0      	cmp	r0, r4
 8007c96:	d10b      	bne.n	8007cb0 <_free_r+0x6c>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	4401      	add	r1, r0
 8007c9c:	1850      	adds	r0, r2, r1
 8007c9e:	4283      	cmp	r3, r0
 8007ca0:	6011      	str	r1, [r2, #0]
 8007ca2:	d1e0      	bne.n	8007c66 <_free_r+0x22>
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	6053      	str	r3, [r2, #4]
 8007caa:	4401      	add	r1, r0
 8007cac:	6011      	str	r1, [r2, #0]
 8007cae:	e7da      	b.n	8007c66 <_free_r+0x22>
 8007cb0:	d902      	bls.n	8007cb8 <_free_r+0x74>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	602b      	str	r3, [r5, #0]
 8007cb6:	e7d6      	b.n	8007c66 <_free_r+0x22>
 8007cb8:	6820      	ldr	r0, [r4, #0]
 8007cba:	1821      	adds	r1, r4, r0
 8007cbc:	428b      	cmp	r3, r1
 8007cbe:	bf04      	itt	eq
 8007cc0:	6819      	ldreq	r1, [r3, #0]
 8007cc2:	685b      	ldreq	r3, [r3, #4]
 8007cc4:	6063      	str	r3, [r4, #4]
 8007cc6:	bf04      	itt	eq
 8007cc8:	1809      	addeq	r1, r1, r0
 8007cca:	6021      	streq	r1, [r4, #0]
 8007ccc:	6054      	str	r4, [r2, #4]
 8007cce:	e7ca      	b.n	8007c66 <_free_r+0x22>
 8007cd0:	bd38      	pop	{r3, r4, r5, pc}
 8007cd2:	bf00      	nop
 8007cd4:	2000051c 	.word	0x2000051c

08007cd8 <sbrk_aligned>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	4e0e      	ldr	r6, [pc, #56]	; (8007d14 <sbrk_aligned+0x3c>)
 8007cdc:	460c      	mov	r4, r1
 8007cde:	6831      	ldr	r1, [r6, #0]
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	b911      	cbnz	r1, 8007cea <sbrk_aligned+0x12>
 8007ce4:	f000 f9e8 	bl	80080b8 <_sbrk_r>
 8007ce8:	6030      	str	r0, [r6, #0]
 8007cea:	4621      	mov	r1, r4
 8007cec:	4628      	mov	r0, r5
 8007cee:	f000 f9e3 	bl	80080b8 <_sbrk_r>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	d00a      	beq.n	8007d0c <sbrk_aligned+0x34>
 8007cf6:	1cc4      	adds	r4, r0, #3
 8007cf8:	f024 0403 	bic.w	r4, r4, #3
 8007cfc:	42a0      	cmp	r0, r4
 8007cfe:	d007      	beq.n	8007d10 <sbrk_aligned+0x38>
 8007d00:	1a21      	subs	r1, r4, r0
 8007d02:	4628      	mov	r0, r5
 8007d04:	f000 f9d8 	bl	80080b8 <_sbrk_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d101      	bne.n	8007d10 <sbrk_aligned+0x38>
 8007d0c:	f04f 34ff 	mov.w	r4, #4294967295
 8007d10:	4620      	mov	r0, r4
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	20000520 	.word	0x20000520

08007d18 <_malloc_r>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	1ccd      	adds	r5, r1, #3
 8007d1e:	f025 0503 	bic.w	r5, r5, #3
 8007d22:	3508      	adds	r5, #8
 8007d24:	2d0c      	cmp	r5, #12
 8007d26:	bf38      	it	cc
 8007d28:	250c      	movcc	r5, #12
 8007d2a:	2d00      	cmp	r5, #0
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	db01      	blt.n	8007d34 <_malloc_r+0x1c>
 8007d30:	42a9      	cmp	r1, r5
 8007d32:	d905      	bls.n	8007d40 <_malloc_r+0x28>
 8007d34:	230c      	movs	r3, #12
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	2600      	movs	r6, #0
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d40:	4e2e      	ldr	r6, [pc, #184]	; (8007dfc <_malloc_r+0xe4>)
 8007d42:	f000 fa25 	bl	8008190 <__malloc_lock>
 8007d46:	6833      	ldr	r3, [r6, #0]
 8007d48:	461c      	mov	r4, r3
 8007d4a:	bb34      	cbnz	r4, 8007d9a <_malloc_r+0x82>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f7ff ffc2 	bl	8007cd8 <sbrk_aligned>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	4604      	mov	r4, r0
 8007d58:	d14d      	bne.n	8007df6 <_malloc_r+0xde>
 8007d5a:	6834      	ldr	r4, [r6, #0]
 8007d5c:	4626      	mov	r6, r4
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d140      	bne.n	8007de4 <_malloc_r+0xcc>
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	4631      	mov	r1, r6
 8007d66:	4638      	mov	r0, r7
 8007d68:	eb04 0803 	add.w	r8, r4, r3
 8007d6c:	f000 f9a4 	bl	80080b8 <_sbrk_r>
 8007d70:	4580      	cmp	r8, r0
 8007d72:	d13a      	bne.n	8007dea <_malloc_r+0xd2>
 8007d74:	6821      	ldr	r1, [r4, #0]
 8007d76:	3503      	adds	r5, #3
 8007d78:	1a6d      	subs	r5, r5, r1
 8007d7a:	f025 0503 	bic.w	r5, r5, #3
 8007d7e:	3508      	adds	r5, #8
 8007d80:	2d0c      	cmp	r5, #12
 8007d82:	bf38      	it	cc
 8007d84:	250c      	movcc	r5, #12
 8007d86:	4629      	mov	r1, r5
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7ff ffa5 	bl	8007cd8 <sbrk_aligned>
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d02b      	beq.n	8007dea <_malloc_r+0xd2>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	442b      	add	r3, r5
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	e00e      	b.n	8007db8 <_malloc_r+0xa0>
 8007d9a:	6822      	ldr	r2, [r4, #0]
 8007d9c:	1b52      	subs	r2, r2, r5
 8007d9e:	d41e      	bmi.n	8007dde <_malloc_r+0xc6>
 8007da0:	2a0b      	cmp	r2, #11
 8007da2:	d916      	bls.n	8007dd2 <_malloc_r+0xba>
 8007da4:	1961      	adds	r1, r4, r5
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	6025      	str	r5, [r4, #0]
 8007daa:	bf18      	it	ne
 8007dac:	6059      	strne	r1, [r3, #4]
 8007dae:	6863      	ldr	r3, [r4, #4]
 8007db0:	bf08      	it	eq
 8007db2:	6031      	streq	r1, [r6, #0]
 8007db4:	5162      	str	r2, [r4, r5]
 8007db6:	604b      	str	r3, [r1, #4]
 8007db8:	4638      	mov	r0, r7
 8007dba:	f104 060b 	add.w	r6, r4, #11
 8007dbe:	f000 f9ed 	bl	800819c <__malloc_unlock>
 8007dc2:	f026 0607 	bic.w	r6, r6, #7
 8007dc6:	1d23      	adds	r3, r4, #4
 8007dc8:	1af2      	subs	r2, r6, r3
 8007dca:	d0b6      	beq.n	8007d3a <_malloc_r+0x22>
 8007dcc:	1b9b      	subs	r3, r3, r6
 8007dce:	50a3      	str	r3, [r4, r2]
 8007dd0:	e7b3      	b.n	8007d3a <_malloc_r+0x22>
 8007dd2:	6862      	ldr	r2, [r4, #4]
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	bf0c      	ite	eq
 8007dd8:	6032      	streq	r2, [r6, #0]
 8007dda:	605a      	strne	r2, [r3, #4]
 8007ddc:	e7ec      	b.n	8007db8 <_malloc_r+0xa0>
 8007dde:	4623      	mov	r3, r4
 8007de0:	6864      	ldr	r4, [r4, #4]
 8007de2:	e7b2      	b.n	8007d4a <_malloc_r+0x32>
 8007de4:	4634      	mov	r4, r6
 8007de6:	6876      	ldr	r6, [r6, #4]
 8007de8:	e7b9      	b.n	8007d5e <_malloc_r+0x46>
 8007dea:	230c      	movs	r3, #12
 8007dec:	603b      	str	r3, [r7, #0]
 8007dee:	4638      	mov	r0, r7
 8007df0:	f000 f9d4 	bl	800819c <__malloc_unlock>
 8007df4:	e7a1      	b.n	8007d3a <_malloc_r+0x22>
 8007df6:	6025      	str	r5, [r4, #0]
 8007df8:	e7de      	b.n	8007db8 <_malloc_r+0xa0>
 8007dfa:	bf00      	nop
 8007dfc:	2000051c 	.word	0x2000051c

08007e00 <__ssputs_r>:
 8007e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	688e      	ldr	r6, [r1, #8]
 8007e06:	429e      	cmp	r6, r3
 8007e08:	4682      	mov	sl, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	4690      	mov	r8, r2
 8007e0e:	461f      	mov	r7, r3
 8007e10:	d838      	bhi.n	8007e84 <__ssputs_r+0x84>
 8007e12:	898a      	ldrh	r2, [r1, #12]
 8007e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e18:	d032      	beq.n	8007e80 <__ssputs_r+0x80>
 8007e1a:	6825      	ldr	r5, [r4, #0]
 8007e1c:	6909      	ldr	r1, [r1, #16]
 8007e1e:	eba5 0901 	sub.w	r9, r5, r1
 8007e22:	6965      	ldr	r5, [r4, #20]
 8007e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	444b      	add	r3, r9
 8007e30:	106d      	asrs	r5, r5, #1
 8007e32:	429d      	cmp	r5, r3
 8007e34:	bf38      	it	cc
 8007e36:	461d      	movcc	r5, r3
 8007e38:	0553      	lsls	r3, r2, #21
 8007e3a:	d531      	bpl.n	8007ea0 <__ssputs_r+0xa0>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7ff ff6b 	bl	8007d18 <_malloc_r>
 8007e42:	4606      	mov	r6, r0
 8007e44:	b950      	cbnz	r0, 8007e5c <__ssputs_r+0x5c>
 8007e46:	230c      	movs	r3, #12
 8007e48:	f8ca 3000 	str.w	r3, [sl]
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	6921      	ldr	r1, [r4, #16]
 8007e5e:	464a      	mov	r2, r9
 8007e60:	f7ff fb50 	bl	8007504 <memcpy>
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	81a3      	strh	r3, [r4, #12]
 8007e70:	6126      	str	r6, [r4, #16]
 8007e72:	6165      	str	r5, [r4, #20]
 8007e74:	444e      	add	r6, r9
 8007e76:	eba5 0509 	sub.w	r5, r5, r9
 8007e7a:	6026      	str	r6, [r4, #0]
 8007e7c:	60a5      	str	r5, [r4, #8]
 8007e7e:	463e      	mov	r6, r7
 8007e80:	42be      	cmp	r6, r7
 8007e82:	d900      	bls.n	8007e86 <__ssputs_r+0x86>
 8007e84:	463e      	mov	r6, r7
 8007e86:	6820      	ldr	r0, [r4, #0]
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4641      	mov	r1, r8
 8007e8c:	f000 f966 	bl	800815c <memmove>
 8007e90:	68a3      	ldr	r3, [r4, #8]
 8007e92:	1b9b      	subs	r3, r3, r6
 8007e94:	60a3      	str	r3, [r4, #8]
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	4433      	add	r3, r6
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	e7db      	b.n	8007e58 <__ssputs_r+0x58>
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	f000 f981 	bl	80081a8 <_realloc_r>
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d1e1      	bne.n	8007e70 <__ssputs_r+0x70>
 8007eac:	6921      	ldr	r1, [r4, #16]
 8007eae:	4650      	mov	r0, sl
 8007eb0:	f7ff fec8 	bl	8007c44 <_free_r>
 8007eb4:	e7c7      	b.n	8007e46 <__ssputs_r+0x46>
	...

08007eb8 <_svfiprintf_r>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	4698      	mov	r8, r3
 8007ebe:	898b      	ldrh	r3, [r1, #12]
 8007ec0:	061b      	lsls	r3, r3, #24
 8007ec2:	b09d      	sub	sp, #116	; 0x74
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	4614      	mov	r4, r2
 8007eca:	d50e      	bpl.n	8007eea <_svfiprintf_r+0x32>
 8007ecc:	690b      	ldr	r3, [r1, #16]
 8007ece:	b963      	cbnz	r3, 8007eea <_svfiprintf_r+0x32>
 8007ed0:	2140      	movs	r1, #64	; 0x40
 8007ed2:	f7ff ff21 	bl	8007d18 <_malloc_r>
 8007ed6:	6028      	str	r0, [r5, #0]
 8007ed8:	6128      	str	r0, [r5, #16]
 8007eda:	b920      	cbnz	r0, 8007ee6 <_svfiprintf_r+0x2e>
 8007edc:	230c      	movs	r3, #12
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee4:	e0d1      	b.n	800808a <_svfiprintf_r+0x1d2>
 8007ee6:	2340      	movs	r3, #64	; 0x40
 8007ee8:	616b      	str	r3, [r5, #20]
 8007eea:	2300      	movs	r3, #0
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	2320      	movs	r3, #32
 8007ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ef8:	2330      	movs	r3, #48	; 0x30
 8007efa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080a4 <_svfiprintf_r+0x1ec>
 8007efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f02:	f04f 0901 	mov.w	r9, #1
 8007f06:	4623      	mov	r3, r4
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f0e:	b10a      	cbz	r2, 8007f14 <_svfiprintf_r+0x5c>
 8007f10:	2a25      	cmp	r2, #37	; 0x25
 8007f12:	d1f9      	bne.n	8007f08 <_svfiprintf_r+0x50>
 8007f14:	ebba 0b04 	subs.w	fp, sl, r4
 8007f18:	d00b      	beq.n	8007f32 <_svfiprintf_r+0x7a>
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff ff6d 	bl	8007e00 <__ssputs_r>
 8007f26:	3001      	adds	r0, #1
 8007f28:	f000 80aa 	beq.w	8008080 <_svfiprintf_r+0x1c8>
 8007f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f2e:	445a      	add	r2, fp
 8007f30:	9209      	str	r2, [sp, #36]	; 0x24
 8007f32:	f89a 3000 	ldrb.w	r3, [sl]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 80a2 	beq.w	8008080 <_svfiprintf_r+0x1c8>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f46:	f10a 0a01 	add.w	sl, sl, #1
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	9307      	str	r3, [sp, #28]
 8007f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f52:	931a      	str	r3, [sp, #104]	; 0x68
 8007f54:	4654      	mov	r4, sl
 8007f56:	2205      	movs	r2, #5
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	4851      	ldr	r0, [pc, #324]	; (80080a4 <_svfiprintf_r+0x1ec>)
 8007f5e:	f7f8 f947 	bl	80001f0 <memchr>
 8007f62:	9a04      	ldr	r2, [sp, #16]
 8007f64:	b9d8      	cbnz	r0, 8007f9e <_svfiprintf_r+0xe6>
 8007f66:	06d0      	lsls	r0, r2, #27
 8007f68:	bf44      	itt	mi
 8007f6a:	2320      	movmi	r3, #32
 8007f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f70:	0711      	lsls	r1, r2, #28
 8007f72:	bf44      	itt	mi
 8007f74:	232b      	movmi	r3, #43	; 0x2b
 8007f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f80:	d015      	beq.n	8007fae <_svfiprintf_r+0xf6>
 8007f82:	9a07      	ldr	r2, [sp, #28]
 8007f84:	4654      	mov	r4, sl
 8007f86:	2000      	movs	r0, #0
 8007f88:	f04f 0c0a 	mov.w	ip, #10
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f92:	3b30      	subs	r3, #48	; 0x30
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d94e      	bls.n	8008036 <_svfiprintf_r+0x17e>
 8007f98:	b1b0      	cbz	r0, 8007fc8 <_svfiprintf_r+0x110>
 8007f9a:	9207      	str	r2, [sp, #28]
 8007f9c:	e014      	b.n	8007fc8 <_svfiprintf_r+0x110>
 8007f9e:	eba0 0308 	sub.w	r3, r0, r8
 8007fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	9304      	str	r3, [sp, #16]
 8007faa:	46a2      	mov	sl, r4
 8007fac:	e7d2      	b.n	8007f54 <_svfiprintf_r+0x9c>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	1d19      	adds	r1, r3, #4
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	9103      	str	r1, [sp, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfbb      	ittet	lt
 8007fba:	425b      	neglt	r3, r3
 8007fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8007fc0:	9307      	strge	r3, [sp, #28]
 8007fc2:	9307      	strlt	r3, [sp, #28]
 8007fc4:	bfb8      	it	lt
 8007fc6:	9204      	strlt	r2, [sp, #16]
 8007fc8:	7823      	ldrb	r3, [r4, #0]
 8007fca:	2b2e      	cmp	r3, #46	; 0x2e
 8007fcc:	d10c      	bne.n	8007fe8 <_svfiprintf_r+0x130>
 8007fce:	7863      	ldrb	r3, [r4, #1]
 8007fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd2:	d135      	bne.n	8008040 <_svfiprintf_r+0x188>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	1d1a      	adds	r2, r3, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	9203      	str	r2, [sp, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bfb8      	it	lt
 8007fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fe4:	3402      	adds	r4, #2
 8007fe6:	9305      	str	r3, [sp, #20]
 8007fe8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80080a8 <_svfiprintf_r+0x1f0>
 8007fec:	7821      	ldrb	r1, [r4, #0]
 8007fee:	2203      	movs	r2, #3
 8007ff0:	4650      	mov	r0, sl
 8007ff2:	f7f8 f8fd 	bl	80001f0 <memchr>
 8007ff6:	b140      	cbz	r0, 800800a <_svfiprintf_r+0x152>
 8007ff8:	2340      	movs	r3, #64	; 0x40
 8007ffa:	eba0 000a 	sub.w	r0, r0, sl
 8007ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8008002:	9b04      	ldr	r3, [sp, #16]
 8008004:	4303      	orrs	r3, r0
 8008006:	3401      	adds	r4, #1
 8008008:	9304      	str	r3, [sp, #16]
 800800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800e:	4827      	ldr	r0, [pc, #156]	; (80080ac <_svfiprintf_r+0x1f4>)
 8008010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008014:	2206      	movs	r2, #6
 8008016:	f7f8 f8eb 	bl	80001f0 <memchr>
 800801a:	2800      	cmp	r0, #0
 800801c:	d038      	beq.n	8008090 <_svfiprintf_r+0x1d8>
 800801e:	4b24      	ldr	r3, [pc, #144]	; (80080b0 <_svfiprintf_r+0x1f8>)
 8008020:	bb1b      	cbnz	r3, 800806a <_svfiprintf_r+0x1b2>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	3307      	adds	r3, #7
 8008026:	f023 0307 	bic.w	r3, r3, #7
 800802a:	3308      	adds	r3, #8
 800802c:	9303      	str	r3, [sp, #12]
 800802e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008030:	4433      	add	r3, r6
 8008032:	9309      	str	r3, [sp, #36]	; 0x24
 8008034:	e767      	b.n	8007f06 <_svfiprintf_r+0x4e>
 8008036:	fb0c 3202 	mla	r2, ip, r2, r3
 800803a:	460c      	mov	r4, r1
 800803c:	2001      	movs	r0, #1
 800803e:	e7a5      	b.n	8007f8c <_svfiprintf_r+0xd4>
 8008040:	2300      	movs	r3, #0
 8008042:	3401      	adds	r4, #1
 8008044:	9305      	str	r3, [sp, #20]
 8008046:	4619      	mov	r1, r3
 8008048:	f04f 0c0a 	mov.w	ip, #10
 800804c:	4620      	mov	r0, r4
 800804e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008052:	3a30      	subs	r2, #48	; 0x30
 8008054:	2a09      	cmp	r2, #9
 8008056:	d903      	bls.n	8008060 <_svfiprintf_r+0x1a8>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0c5      	beq.n	8007fe8 <_svfiprintf_r+0x130>
 800805c:	9105      	str	r1, [sp, #20]
 800805e:	e7c3      	b.n	8007fe8 <_svfiprintf_r+0x130>
 8008060:	fb0c 2101 	mla	r1, ip, r1, r2
 8008064:	4604      	mov	r4, r0
 8008066:	2301      	movs	r3, #1
 8008068:	e7f0      	b.n	800804c <_svfiprintf_r+0x194>
 800806a:	ab03      	add	r3, sp, #12
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	462a      	mov	r2, r5
 8008070:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <_svfiprintf_r+0x1fc>)
 8008072:	a904      	add	r1, sp, #16
 8008074:	4638      	mov	r0, r7
 8008076:	f7fd ffe3 	bl	8006040 <_printf_float>
 800807a:	1c42      	adds	r2, r0, #1
 800807c:	4606      	mov	r6, r0
 800807e:	d1d6      	bne.n	800802e <_svfiprintf_r+0x176>
 8008080:	89ab      	ldrh	r3, [r5, #12]
 8008082:	065b      	lsls	r3, r3, #25
 8008084:	f53f af2c 	bmi.w	8007ee0 <_svfiprintf_r+0x28>
 8008088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808a:	b01d      	add	sp, #116	; 0x74
 800808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008090:	ab03      	add	r3, sp, #12
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	462a      	mov	r2, r5
 8008096:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <_svfiprintf_r+0x1fc>)
 8008098:	a904      	add	r1, sp, #16
 800809a:	4638      	mov	r0, r7
 800809c:	f7fe fa68 	bl	8006570 <_printf_i>
 80080a0:	e7eb      	b.n	800807a <_svfiprintf_r+0x1c2>
 80080a2:	bf00      	nop
 80080a4:	08008f2c 	.word	0x08008f2c
 80080a8:	08008f32 	.word	0x08008f32
 80080ac:	08008f36 	.word	0x08008f36
 80080b0:	08006041 	.word	0x08006041
 80080b4:	08007e01 	.word	0x08007e01

080080b8 <_sbrk_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d06      	ldr	r5, [pc, #24]	; (80080d4 <_sbrk_r+0x1c>)
 80080bc:	2300      	movs	r3, #0
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	f7fa fa94 	bl	80025f0 <_sbrk>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_sbrk_r+0x1a>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_sbrk_r+0x1a>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	20000524 	.word	0x20000524

080080d8 <__assert_func>:
 80080d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080da:	4614      	mov	r4, r2
 80080dc:	461a      	mov	r2, r3
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <__assert_func+0x2c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4605      	mov	r5, r0
 80080e4:	68d8      	ldr	r0, [r3, #12]
 80080e6:	b14c      	cbz	r4, 80080fc <__assert_func+0x24>
 80080e8:	4b07      	ldr	r3, [pc, #28]	; (8008108 <__assert_func+0x30>)
 80080ea:	9100      	str	r1, [sp, #0]
 80080ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080f0:	4906      	ldr	r1, [pc, #24]	; (800810c <__assert_func+0x34>)
 80080f2:	462b      	mov	r3, r5
 80080f4:	f000 f80e 	bl	8008114 <fiprintf>
 80080f8:	f000 faaa 	bl	8008650 <abort>
 80080fc:	4b04      	ldr	r3, [pc, #16]	; (8008110 <__assert_func+0x38>)
 80080fe:	461c      	mov	r4, r3
 8008100:	e7f3      	b.n	80080ea <__assert_func+0x12>
 8008102:	bf00      	nop
 8008104:	20000020 	.word	0x20000020
 8008108:	08008f3d 	.word	0x08008f3d
 800810c:	08008f4a 	.word	0x08008f4a
 8008110:	08008f78 	.word	0x08008f78

08008114 <fiprintf>:
 8008114:	b40e      	push	{r1, r2, r3}
 8008116:	b503      	push	{r0, r1, lr}
 8008118:	4601      	mov	r1, r0
 800811a:	ab03      	add	r3, sp, #12
 800811c:	4805      	ldr	r0, [pc, #20]	; (8008134 <fiprintf+0x20>)
 800811e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008122:	6800      	ldr	r0, [r0, #0]
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	f000 f895 	bl	8008254 <_vfiprintf_r>
 800812a:	b002      	add	sp, #8
 800812c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008130:	b003      	add	sp, #12
 8008132:	4770      	bx	lr
 8008134:	20000020 	.word	0x20000020

08008138 <__ascii_mbtowc>:
 8008138:	b082      	sub	sp, #8
 800813a:	b901      	cbnz	r1, 800813e <__ascii_mbtowc+0x6>
 800813c:	a901      	add	r1, sp, #4
 800813e:	b142      	cbz	r2, 8008152 <__ascii_mbtowc+0x1a>
 8008140:	b14b      	cbz	r3, 8008156 <__ascii_mbtowc+0x1e>
 8008142:	7813      	ldrb	r3, [r2, #0]
 8008144:	600b      	str	r3, [r1, #0]
 8008146:	7812      	ldrb	r2, [r2, #0]
 8008148:	1e10      	subs	r0, r2, #0
 800814a:	bf18      	it	ne
 800814c:	2001      	movne	r0, #1
 800814e:	b002      	add	sp, #8
 8008150:	4770      	bx	lr
 8008152:	4610      	mov	r0, r2
 8008154:	e7fb      	b.n	800814e <__ascii_mbtowc+0x16>
 8008156:	f06f 0001 	mvn.w	r0, #1
 800815a:	e7f8      	b.n	800814e <__ascii_mbtowc+0x16>

0800815c <memmove>:
 800815c:	4288      	cmp	r0, r1
 800815e:	b510      	push	{r4, lr}
 8008160:	eb01 0402 	add.w	r4, r1, r2
 8008164:	d902      	bls.n	800816c <memmove+0x10>
 8008166:	4284      	cmp	r4, r0
 8008168:	4623      	mov	r3, r4
 800816a:	d807      	bhi.n	800817c <memmove+0x20>
 800816c:	1e43      	subs	r3, r0, #1
 800816e:	42a1      	cmp	r1, r4
 8008170:	d008      	beq.n	8008184 <memmove+0x28>
 8008172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800817a:	e7f8      	b.n	800816e <memmove+0x12>
 800817c:	4402      	add	r2, r0
 800817e:	4601      	mov	r1, r0
 8008180:	428a      	cmp	r2, r1
 8008182:	d100      	bne.n	8008186 <memmove+0x2a>
 8008184:	bd10      	pop	{r4, pc}
 8008186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800818a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800818e:	e7f7      	b.n	8008180 <memmove+0x24>

08008190 <__malloc_lock>:
 8008190:	4801      	ldr	r0, [pc, #4]	; (8008198 <__malloc_lock+0x8>)
 8008192:	f000 bc19 	b.w	80089c8 <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	20000528 	.word	0x20000528

0800819c <__malloc_unlock>:
 800819c:	4801      	ldr	r0, [pc, #4]	; (80081a4 <__malloc_unlock+0x8>)
 800819e:	f000 bc14 	b.w	80089ca <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	20000528 	.word	0x20000528

080081a8 <_realloc_r>:
 80081a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ac:	4680      	mov	r8, r0
 80081ae:	4614      	mov	r4, r2
 80081b0:	460e      	mov	r6, r1
 80081b2:	b921      	cbnz	r1, 80081be <_realloc_r+0x16>
 80081b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081b8:	4611      	mov	r1, r2
 80081ba:	f7ff bdad 	b.w	8007d18 <_malloc_r>
 80081be:	b92a      	cbnz	r2, 80081cc <_realloc_r+0x24>
 80081c0:	f7ff fd40 	bl	8007c44 <_free_r>
 80081c4:	4625      	mov	r5, r4
 80081c6:	4628      	mov	r0, r5
 80081c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081cc:	f000 fc64 	bl	8008a98 <_malloc_usable_size_r>
 80081d0:	4284      	cmp	r4, r0
 80081d2:	4607      	mov	r7, r0
 80081d4:	d802      	bhi.n	80081dc <_realloc_r+0x34>
 80081d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80081da:	d812      	bhi.n	8008202 <_realloc_r+0x5a>
 80081dc:	4621      	mov	r1, r4
 80081de:	4640      	mov	r0, r8
 80081e0:	f7ff fd9a 	bl	8007d18 <_malloc_r>
 80081e4:	4605      	mov	r5, r0
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d0ed      	beq.n	80081c6 <_realloc_r+0x1e>
 80081ea:	42bc      	cmp	r4, r7
 80081ec:	4622      	mov	r2, r4
 80081ee:	4631      	mov	r1, r6
 80081f0:	bf28      	it	cs
 80081f2:	463a      	movcs	r2, r7
 80081f4:	f7ff f986 	bl	8007504 <memcpy>
 80081f8:	4631      	mov	r1, r6
 80081fa:	4640      	mov	r0, r8
 80081fc:	f7ff fd22 	bl	8007c44 <_free_r>
 8008200:	e7e1      	b.n	80081c6 <_realloc_r+0x1e>
 8008202:	4635      	mov	r5, r6
 8008204:	e7df      	b.n	80081c6 <_realloc_r+0x1e>

08008206 <__sfputc_r>:
 8008206:	6893      	ldr	r3, [r2, #8]
 8008208:	3b01      	subs	r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	b410      	push	{r4}
 800820e:	6093      	str	r3, [r2, #8]
 8008210:	da07      	bge.n	8008222 <__sfputc_r+0x1c>
 8008212:	6994      	ldr	r4, [r2, #24]
 8008214:	42a3      	cmp	r3, r4
 8008216:	db01      	blt.n	800821c <__sfputc_r+0x16>
 8008218:	290a      	cmp	r1, #10
 800821a:	d102      	bne.n	8008222 <__sfputc_r+0x1c>
 800821c:	bc10      	pop	{r4}
 800821e:	f000 b949 	b.w	80084b4 <__swbuf_r>
 8008222:	6813      	ldr	r3, [r2, #0]
 8008224:	1c58      	adds	r0, r3, #1
 8008226:	6010      	str	r0, [r2, #0]
 8008228:	7019      	strb	r1, [r3, #0]
 800822a:	4608      	mov	r0, r1
 800822c:	bc10      	pop	{r4}
 800822e:	4770      	bx	lr

08008230 <__sfputs_r>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	4606      	mov	r6, r0
 8008234:	460f      	mov	r7, r1
 8008236:	4614      	mov	r4, r2
 8008238:	18d5      	adds	r5, r2, r3
 800823a:	42ac      	cmp	r4, r5
 800823c:	d101      	bne.n	8008242 <__sfputs_r+0x12>
 800823e:	2000      	movs	r0, #0
 8008240:	e007      	b.n	8008252 <__sfputs_r+0x22>
 8008242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008246:	463a      	mov	r2, r7
 8008248:	4630      	mov	r0, r6
 800824a:	f7ff ffdc 	bl	8008206 <__sfputc_r>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	d1f3      	bne.n	800823a <__sfputs_r+0xa>
 8008252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008254 <_vfiprintf_r>:
 8008254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008258:	460d      	mov	r5, r1
 800825a:	b09d      	sub	sp, #116	; 0x74
 800825c:	4614      	mov	r4, r2
 800825e:	4698      	mov	r8, r3
 8008260:	4606      	mov	r6, r0
 8008262:	b118      	cbz	r0, 800826c <_vfiprintf_r+0x18>
 8008264:	6983      	ldr	r3, [r0, #24]
 8008266:	b90b      	cbnz	r3, 800826c <_vfiprintf_r+0x18>
 8008268:	f000 fb10 	bl	800888c <__sinit>
 800826c:	4b89      	ldr	r3, [pc, #548]	; (8008494 <_vfiprintf_r+0x240>)
 800826e:	429d      	cmp	r5, r3
 8008270:	d11b      	bne.n	80082aa <_vfiprintf_r+0x56>
 8008272:	6875      	ldr	r5, [r6, #4]
 8008274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008276:	07d9      	lsls	r1, r3, #31
 8008278:	d405      	bmi.n	8008286 <_vfiprintf_r+0x32>
 800827a:	89ab      	ldrh	r3, [r5, #12]
 800827c:	059a      	lsls	r2, r3, #22
 800827e:	d402      	bmi.n	8008286 <_vfiprintf_r+0x32>
 8008280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008282:	f000 fba1 	bl	80089c8 <__retarget_lock_acquire_recursive>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	071b      	lsls	r3, r3, #28
 800828a:	d501      	bpl.n	8008290 <_vfiprintf_r+0x3c>
 800828c:	692b      	ldr	r3, [r5, #16]
 800828e:	b9eb      	cbnz	r3, 80082cc <_vfiprintf_r+0x78>
 8008290:	4629      	mov	r1, r5
 8008292:	4630      	mov	r0, r6
 8008294:	f000 f96e 	bl	8008574 <__swsetup_r>
 8008298:	b1c0      	cbz	r0, 80082cc <_vfiprintf_r+0x78>
 800829a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800829c:	07dc      	lsls	r4, r3, #31
 800829e:	d50e      	bpl.n	80082be <_vfiprintf_r+0x6a>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	b01d      	add	sp, #116	; 0x74
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	4b7b      	ldr	r3, [pc, #492]	; (8008498 <_vfiprintf_r+0x244>)
 80082ac:	429d      	cmp	r5, r3
 80082ae:	d101      	bne.n	80082b4 <_vfiprintf_r+0x60>
 80082b0:	68b5      	ldr	r5, [r6, #8]
 80082b2:	e7df      	b.n	8008274 <_vfiprintf_r+0x20>
 80082b4:	4b79      	ldr	r3, [pc, #484]	; (800849c <_vfiprintf_r+0x248>)
 80082b6:	429d      	cmp	r5, r3
 80082b8:	bf08      	it	eq
 80082ba:	68f5      	ldreq	r5, [r6, #12]
 80082bc:	e7da      	b.n	8008274 <_vfiprintf_r+0x20>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	0598      	lsls	r0, r3, #22
 80082c2:	d4ed      	bmi.n	80082a0 <_vfiprintf_r+0x4c>
 80082c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082c6:	f000 fb80 	bl	80089ca <__retarget_lock_release_recursive>
 80082ca:	e7e9      	b.n	80082a0 <_vfiprintf_r+0x4c>
 80082cc:	2300      	movs	r3, #0
 80082ce:	9309      	str	r3, [sp, #36]	; 0x24
 80082d0:	2320      	movs	r3, #32
 80082d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082da:	2330      	movs	r3, #48	; 0x30
 80082dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084a0 <_vfiprintf_r+0x24c>
 80082e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082e4:	f04f 0901 	mov.w	r9, #1
 80082e8:	4623      	mov	r3, r4
 80082ea:	469a      	mov	sl, r3
 80082ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f0:	b10a      	cbz	r2, 80082f6 <_vfiprintf_r+0xa2>
 80082f2:	2a25      	cmp	r2, #37	; 0x25
 80082f4:	d1f9      	bne.n	80082ea <_vfiprintf_r+0x96>
 80082f6:	ebba 0b04 	subs.w	fp, sl, r4
 80082fa:	d00b      	beq.n	8008314 <_vfiprintf_r+0xc0>
 80082fc:	465b      	mov	r3, fp
 80082fe:	4622      	mov	r2, r4
 8008300:	4629      	mov	r1, r5
 8008302:	4630      	mov	r0, r6
 8008304:	f7ff ff94 	bl	8008230 <__sfputs_r>
 8008308:	3001      	adds	r0, #1
 800830a:	f000 80aa 	beq.w	8008462 <_vfiprintf_r+0x20e>
 800830e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008310:	445a      	add	r2, fp
 8008312:	9209      	str	r2, [sp, #36]	; 0x24
 8008314:	f89a 3000 	ldrb.w	r3, [sl]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 80a2 	beq.w	8008462 <_vfiprintf_r+0x20e>
 800831e:	2300      	movs	r3, #0
 8008320:	f04f 32ff 	mov.w	r2, #4294967295
 8008324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008328:	f10a 0a01 	add.w	sl, sl, #1
 800832c:	9304      	str	r3, [sp, #16]
 800832e:	9307      	str	r3, [sp, #28]
 8008330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008334:	931a      	str	r3, [sp, #104]	; 0x68
 8008336:	4654      	mov	r4, sl
 8008338:	2205      	movs	r2, #5
 800833a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833e:	4858      	ldr	r0, [pc, #352]	; (80084a0 <_vfiprintf_r+0x24c>)
 8008340:	f7f7 ff56 	bl	80001f0 <memchr>
 8008344:	9a04      	ldr	r2, [sp, #16]
 8008346:	b9d8      	cbnz	r0, 8008380 <_vfiprintf_r+0x12c>
 8008348:	06d1      	lsls	r1, r2, #27
 800834a:	bf44      	itt	mi
 800834c:	2320      	movmi	r3, #32
 800834e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008352:	0713      	lsls	r3, r2, #28
 8008354:	bf44      	itt	mi
 8008356:	232b      	movmi	r3, #43	; 0x2b
 8008358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800835c:	f89a 3000 	ldrb.w	r3, [sl]
 8008360:	2b2a      	cmp	r3, #42	; 0x2a
 8008362:	d015      	beq.n	8008390 <_vfiprintf_r+0x13c>
 8008364:	9a07      	ldr	r2, [sp, #28]
 8008366:	4654      	mov	r4, sl
 8008368:	2000      	movs	r0, #0
 800836a:	f04f 0c0a 	mov.w	ip, #10
 800836e:	4621      	mov	r1, r4
 8008370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008374:	3b30      	subs	r3, #48	; 0x30
 8008376:	2b09      	cmp	r3, #9
 8008378:	d94e      	bls.n	8008418 <_vfiprintf_r+0x1c4>
 800837a:	b1b0      	cbz	r0, 80083aa <_vfiprintf_r+0x156>
 800837c:	9207      	str	r2, [sp, #28]
 800837e:	e014      	b.n	80083aa <_vfiprintf_r+0x156>
 8008380:	eba0 0308 	sub.w	r3, r0, r8
 8008384:	fa09 f303 	lsl.w	r3, r9, r3
 8008388:	4313      	orrs	r3, r2
 800838a:	9304      	str	r3, [sp, #16]
 800838c:	46a2      	mov	sl, r4
 800838e:	e7d2      	b.n	8008336 <_vfiprintf_r+0xe2>
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	1d19      	adds	r1, r3, #4
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	9103      	str	r1, [sp, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	bfbb      	ittet	lt
 800839c:	425b      	neglt	r3, r3
 800839e:	f042 0202 	orrlt.w	r2, r2, #2
 80083a2:	9307      	strge	r3, [sp, #28]
 80083a4:	9307      	strlt	r3, [sp, #28]
 80083a6:	bfb8      	it	lt
 80083a8:	9204      	strlt	r2, [sp, #16]
 80083aa:	7823      	ldrb	r3, [r4, #0]
 80083ac:	2b2e      	cmp	r3, #46	; 0x2e
 80083ae:	d10c      	bne.n	80083ca <_vfiprintf_r+0x176>
 80083b0:	7863      	ldrb	r3, [r4, #1]
 80083b2:	2b2a      	cmp	r3, #42	; 0x2a
 80083b4:	d135      	bne.n	8008422 <_vfiprintf_r+0x1ce>
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	1d1a      	adds	r2, r3, #4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	9203      	str	r2, [sp, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	bfb8      	it	lt
 80083c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80083c6:	3402      	adds	r4, #2
 80083c8:	9305      	str	r3, [sp, #20]
 80083ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80084a4 <_vfiprintf_r+0x250>
 80083ce:	7821      	ldrb	r1, [r4, #0]
 80083d0:	2203      	movs	r2, #3
 80083d2:	4650      	mov	r0, sl
 80083d4:	f7f7 ff0c 	bl	80001f0 <memchr>
 80083d8:	b140      	cbz	r0, 80083ec <_vfiprintf_r+0x198>
 80083da:	2340      	movs	r3, #64	; 0x40
 80083dc:	eba0 000a 	sub.w	r0, r0, sl
 80083e0:	fa03 f000 	lsl.w	r0, r3, r0
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	4303      	orrs	r3, r0
 80083e8:	3401      	adds	r4, #1
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f0:	482d      	ldr	r0, [pc, #180]	; (80084a8 <_vfiprintf_r+0x254>)
 80083f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083f6:	2206      	movs	r2, #6
 80083f8:	f7f7 fefa 	bl	80001f0 <memchr>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d03f      	beq.n	8008480 <_vfiprintf_r+0x22c>
 8008400:	4b2a      	ldr	r3, [pc, #168]	; (80084ac <_vfiprintf_r+0x258>)
 8008402:	bb1b      	cbnz	r3, 800844c <_vfiprintf_r+0x1f8>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	3307      	adds	r3, #7
 8008408:	f023 0307 	bic.w	r3, r3, #7
 800840c:	3308      	adds	r3, #8
 800840e:	9303      	str	r3, [sp, #12]
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	443b      	add	r3, r7
 8008414:	9309      	str	r3, [sp, #36]	; 0x24
 8008416:	e767      	b.n	80082e8 <_vfiprintf_r+0x94>
 8008418:	fb0c 3202 	mla	r2, ip, r2, r3
 800841c:	460c      	mov	r4, r1
 800841e:	2001      	movs	r0, #1
 8008420:	e7a5      	b.n	800836e <_vfiprintf_r+0x11a>
 8008422:	2300      	movs	r3, #0
 8008424:	3401      	adds	r4, #1
 8008426:	9305      	str	r3, [sp, #20]
 8008428:	4619      	mov	r1, r3
 800842a:	f04f 0c0a 	mov.w	ip, #10
 800842e:	4620      	mov	r0, r4
 8008430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008434:	3a30      	subs	r2, #48	; 0x30
 8008436:	2a09      	cmp	r2, #9
 8008438:	d903      	bls.n	8008442 <_vfiprintf_r+0x1ee>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0c5      	beq.n	80083ca <_vfiprintf_r+0x176>
 800843e:	9105      	str	r1, [sp, #20]
 8008440:	e7c3      	b.n	80083ca <_vfiprintf_r+0x176>
 8008442:	fb0c 2101 	mla	r1, ip, r1, r2
 8008446:	4604      	mov	r4, r0
 8008448:	2301      	movs	r3, #1
 800844a:	e7f0      	b.n	800842e <_vfiprintf_r+0x1da>
 800844c:	ab03      	add	r3, sp, #12
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	462a      	mov	r2, r5
 8008452:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <_vfiprintf_r+0x25c>)
 8008454:	a904      	add	r1, sp, #16
 8008456:	4630      	mov	r0, r6
 8008458:	f7fd fdf2 	bl	8006040 <_printf_float>
 800845c:	4607      	mov	r7, r0
 800845e:	1c78      	adds	r0, r7, #1
 8008460:	d1d6      	bne.n	8008410 <_vfiprintf_r+0x1bc>
 8008462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008464:	07d9      	lsls	r1, r3, #31
 8008466:	d405      	bmi.n	8008474 <_vfiprintf_r+0x220>
 8008468:	89ab      	ldrh	r3, [r5, #12]
 800846a:	059a      	lsls	r2, r3, #22
 800846c:	d402      	bmi.n	8008474 <_vfiprintf_r+0x220>
 800846e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008470:	f000 faab 	bl	80089ca <__retarget_lock_release_recursive>
 8008474:	89ab      	ldrh	r3, [r5, #12]
 8008476:	065b      	lsls	r3, r3, #25
 8008478:	f53f af12 	bmi.w	80082a0 <_vfiprintf_r+0x4c>
 800847c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800847e:	e711      	b.n	80082a4 <_vfiprintf_r+0x50>
 8008480:	ab03      	add	r3, sp, #12
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	462a      	mov	r2, r5
 8008486:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <_vfiprintf_r+0x25c>)
 8008488:	a904      	add	r1, sp, #16
 800848a:	4630      	mov	r0, r6
 800848c:	f7fe f870 	bl	8006570 <_printf_i>
 8008490:	e7e4      	b.n	800845c <_vfiprintf_r+0x208>
 8008492:	bf00      	nop
 8008494:	080090a4 	.word	0x080090a4
 8008498:	080090c4 	.word	0x080090c4
 800849c:	08009084 	.word	0x08009084
 80084a0:	08008f2c 	.word	0x08008f2c
 80084a4:	08008f32 	.word	0x08008f32
 80084a8:	08008f36 	.word	0x08008f36
 80084ac:	08006041 	.word	0x08006041
 80084b0:	08008231 	.word	0x08008231

080084b4 <__swbuf_r>:
 80084b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b6:	460e      	mov	r6, r1
 80084b8:	4614      	mov	r4, r2
 80084ba:	4605      	mov	r5, r0
 80084bc:	b118      	cbz	r0, 80084c6 <__swbuf_r+0x12>
 80084be:	6983      	ldr	r3, [r0, #24]
 80084c0:	b90b      	cbnz	r3, 80084c6 <__swbuf_r+0x12>
 80084c2:	f000 f9e3 	bl	800888c <__sinit>
 80084c6:	4b21      	ldr	r3, [pc, #132]	; (800854c <__swbuf_r+0x98>)
 80084c8:	429c      	cmp	r4, r3
 80084ca:	d12b      	bne.n	8008524 <__swbuf_r+0x70>
 80084cc:	686c      	ldr	r4, [r5, #4]
 80084ce:	69a3      	ldr	r3, [r4, #24]
 80084d0:	60a3      	str	r3, [r4, #8]
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	071a      	lsls	r2, r3, #28
 80084d6:	d52f      	bpl.n	8008538 <__swbuf_r+0x84>
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	b36b      	cbz	r3, 8008538 <__swbuf_r+0x84>
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	6820      	ldr	r0, [r4, #0]
 80084e0:	1ac0      	subs	r0, r0, r3
 80084e2:	6963      	ldr	r3, [r4, #20]
 80084e4:	b2f6      	uxtb	r6, r6
 80084e6:	4283      	cmp	r3, r0
 80084e8:	4637      	mov	r7, r6
 80084ea:	dc04      	bgt.n	80084f6 <__swbuf_r+0x42>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4628      	mov	r0, r5
 80084f0:	f000 f938 	bl	8008764 <_fflush_r>
 80084f4:	bb30      	cbnz	r0, 8008544 <__swbuf_r+0x90>
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	60a3      	str	r3, [r4, #8]
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	6022      	str	r2, [r4, #0]
 8008502:	701e      	strb	r6, [r3, #0]
 8008504:	6963      	ldr	r3, [r4, #20]
 8008506:	3001      	adds	r0, #1
 8008508:	4283      	cmp	r3, r0
 800850a:	d004      	beq.n	8008516 <__swbuf_r+0x62>
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	07db      	lsls	r3, r3, #31
 8008510:	d506      	bpl.n	8008520 <__swbuf_r+0x6c>
 8008512:	2e0a      	cmp	r6, #10
 8008514:	d104      	bne.n	8008520 <__swbuf_r+0x6c>
 8008516:	4621      	mov	r1, r4
 8008518:	4628      	mov	r0, r5
 800851a:	f000 f923 	bl	8008764 <_fflush_r>
 800851e:	b988      	cbnz	r0, 8008544 <__swbuf_r+0x90>
 8008520:	4638      	mov	r0, r7
 8008522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008524:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <__swbuf_r+0x9c>)
 8008526:	429c      	cmp	r4, r3
 8008528:	d101      	bne.n	800852e <__swbuf_r+0x7a>
 800852a:	68ac      	ldr	r4, [r5, #8]
 800852c:	e7cf      	b.n	80084ce <__swbuf_r+0x1a>
 800852e:	4b09      	ldr	r3, [pc, #36]	; (8008554 <__swbuf_r+0xa0>)
 8008530:	429c      	cmp	r4, r3
 8008532:	bf08      	it	eq
 8008534:	68ec      	ldreq	r4, [r5, #12]
 8008536:	e7ca      	b.n	80084ce <__swbuf_r+0x1a>
 8008538:	4621      	mov	r1, r4
 800853a:	4628      	mov	r0, r5
 800853c:	f000 f81a 	bl	8008574 <__swsetup_r>
 8008540:	2800      	cmp	r0, #0
 8008542:	d0cb      	beq.n	80084dc <__swbuf_r+0x28>
 8008544:	f04f 37ff 	mov.w	r7, #4294967295
 8008548:	e7ea      	b.n	8008520 <__swbuf_r+0x6c>
 800854a:	bf00      	nop
 800854c:	080090a4 	.word	0x080090a4
 8008550:	080090c4 	.word	0x080090c4
 8008554:	08009084 	.word	0x08009084

08008558 <__ascii_wctomb>:
 8008558:	4603      	mov	r3, r0
 800855a:	4608      	mov	r0, r1
 800855c:	b141      	cbz	r1, 8008570 <__ascii_wctomb+0x18>
 800855e:	2aff      	cmp	r2, #255	; 0xff
 8008560:	d904      	bls.n	800856c <__ascii_wctomb+0x14>
 8008562:	228a      	movs	r2, #138	; 0x8a
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	f04f 30ff 	mov.w	r0, #4294967295
 800856a:	4770      	bx	lr
 800856c:	700a      	strb	r2, [r1, #0]
 800856e:	2001      	movs	r0, #1
 8008570:	4770      	bx	lr
	...

08008574 <__swsetup_r>:
 8008574:	4b32      	ldr	r3, [pc, #200]	; (8008640 <__swsetup_r+0xcc>)
 8008576:	b570      	push	{r4, r5, r6, lr}
 8008578:	681d      	ldr	r5, [r3, #0]
 800857a:	4606      	mov	r6, r0
 800857c:	460c      	mov	r4, r1
 800857e:	b125      	cbz	r5, 800858a <__swsetup_r+0x16>
 8008580:	69ab      	ldr	r3, [r5, #24]
 8008582:	b913      	cbnz	r3, 800858a <__swsetup_r+0x16>
 8008584:	4628      	mov	r0, r5
 8008586:	f000 f981 	bl	800888c <__sinit>
 800858a:	4b2e      	ldr	r3, [pc, #184]	; (8008644 <__swsetup_r+0xd0>)
 800858c:	429c      	cmp	r4, r3
 800858e:	d10f      	bne.n	80085b0 <__swsetup_r+0x3c>
 8008590:	686c      	ldr	r4, [r5, #4]
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008598:	0719      	lsls	r1, r3, #28
 800859a:	d42c      	bmi.n	80085f6 <__swsetup_r+0x82>
 800859c:	06dd      	lsls	r5, r3, #27
 800859e:	d411      	bmi.n	80085c4 <__swsetup_r+0x50>
 80085a0:	2309      	movs	r3, #9
 80085a2:	6033      	str	r3, [r6, #0]
 80085a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	e03e      	b.n	800862e <__swsetup_r+0xba>
 80085b0:	4b25      	ldr	r3, [pc, #148]	; (8008648 <__swsetup_r+0xd4>)
 80085b2:	429c      	cmp	r4, r3
 80085b4:	d101      	bne.n	80085ba <__swsetup_r+0x46>
 80085b6:	68ac      	ldr	r4, [r5, #8]
 80085b8:	e7eb      	b.n	8008592 <__swsetup_r+0x1e>
 80085ba:	4b24      	ldr	r3, [pc, #144]	; (800864c <__swsetup_r+0xd8>)
 80085bc:	429c      	cmp	r4, r3
 80085be:	bf08      	it	eq
 80085c0:	68ec      	ldreq	r4, [r5, #12]
 80085c2:	e7e6      	b.n	8008592 <__swsetup_r+0x1e>
 80085c4:	0758      	lsls	r0, r3, #29
 80085c6:	d512      	bpl.n	80085ee <__swsetup_r+0x7a>
 80085c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ca:	b141      	cbz	r1, 80085de <__swsetup_r+0x6a>
 80085cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085d0:	4299      	cmp	r1, r3
 80085d2:	d002      	beq.n	80085da <__swsetup_r+0x66>
 80085d4:	4630      	mov	r0, r6
 80085d6:	f7ff fb35 	bl	8007c44 <_free_r>
 80085da:	2300      	movs	r3, #0
 80085dc:	6363      	str	r3, [r4, #52]	; 0x34
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085e4:	81a3      	strh	r3, [r4, #12]
 80085e6:	2300      	movs	r3, #0
 80085e8:	6063      	str	r3, [r4, #4]
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f043 0308 	orr.w	r3, r3, #8
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	b94b      	cbnz	r3, 800860e <__swsetup_r+0x9a>
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008604:	d003      	beq.n	800860e <__swsetup_r+0x9a>
 8008606:	4621      	mov	r1, r4
 8008608:	4630      	mov	r0, r6
 800860a:	f000 fa05 	bl	8008a18 <__smakebuf_r>
 800860e:	89a0      	ldrh	r0, [r4, #12]
 8008610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008614:	f010 0301 	ands.w	r3, r0, #1
 8008618:	d00a      	beq.n	8008630 <__swsetup_r+0xbc>
 800861a:	2300      	movs	r3, #0
 800861c:	60a3      	str	r3, [r4, #8]
 800861e:	6963      	ldr	r3, [r4, #20]
 8008620:	425b      	negs	r3, r3
 8008622:	61a3      	str	r3, [r4, #24]
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	b943      	cbnz	r3, 800863a <__swsetup_r+0xc6>
 8008628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800862c:	d1ba      	bne.n	80085a4 <__swsetup_r+0x30>
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	0781      	lsls	r1, r0, #30
 8008632:	bf58      	it	pl
 8008634:	6963      	ldrpl	r3, [r4, #20]
 8008636:	60a3      	str	r3, [r4, #8]
 8008638:	e7f4      	b.n	8008624 <__swsetup_r+0xb0>
 800863a:	2000      	movs	r0, #0
 800863c:	e7f7      	b.n	800862e <__swsetup_r+0xba>
 800863e:	bf00      	nop
 8008640:	20000020 	.word	0x20000020
 8008644:	080090a4 	.word	0x080090a4
 8008648:	080090c4 	.word	0x080090c4
 800864c:	08009084 	.word	0x08009084

08008650 <abort>:
 8008650:	b508      	push	{r3, lr}
 8008652:	2006      	movs	r0, #6
 8008654:	f000 fa50 	bl	8008af8 <raise>
 8008658:	2001      	movs	r0, #1
 800865a:	f7f9 ff56 	bl	800250a <_exit>
	...

08008660 <__sflush_r>:
 8008660:	898a      	ldrh	r2, [r1, #12]
 8008662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008664:	4605      	mov	r5, r0
 8008666:	0710      	lsls	r0, r2, #28
 8008668:	460c      	mov	r4, r1
 800866a:	d457      	bmi.n	800871c <__sflush_r+0xbc>
 800866c:	684b      	ldr	r3, [r1, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	dc04      	bgt.n	800867c <__sflush_r+0x1c>
 8008672:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	dc01      	bgt.n	800867c <__sflush_r+0x1c>
 8008678:	2000      	movs	r0, #0
 800867a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800867e:	2e00      	cmp	r6, #0
 8008680:	d0fa      	beq.n	8008678 <__sflush_r+0x18>
 8008682:	2300      	movs	r3, #0
 8008684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008688:	682f      	ldr	r7, [r5, #0]
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	d032      	beq.n	80086f4 <__sflush_r+0x94>
 800868e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	075a      	lsls	r2, r3, #29
 8008694:	d505      	bpl.n	80086a2 <__sflush_r+0x42>
 8008696:	6863      	ldr	r3, [r4, #4]
 8008698:	1ac0      	subs	r0, r0, r3
 800869a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800869c:	b10b      	cbz	r3, 80086a2 <__sflush_r+0x42>
 800869e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086a0:	1ac0      	subs	r0, r0, r3
 80086a2:	2300      	movs	r3, #0
 80086a4:	4602      	mov	r2, r0
 80086a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086a8:	6a21      	ldr	r1, [r4, #32]
 80086aa:	4628      	mov	r0, r5
 80086ac:	47b0      	blx	r6
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	d106      	bne.n	80086c2 <__sflush_r+0x62>
 80086b4:	6829      	ldr	r1, [r5, #0]
 80086b6:	291d      	cmp	r1, #29
 80086b8:	d82c      	bhi.n	8008714 <__sflush_r+0xb4>
 80086ba:	4a29      	ldr	r2, [pc, #164]	; (8008760 <__sflush_r+0x100>)
 80086bc:	40ca      	lsrs	r2, r1
 80086be:	07d6      	lsls	r6, r2, #31
 80086c0:	d528      	bpl.n	8008714 <__sflush_r+0xb4>
 80086c2:	2200      	movs	r2, #0
 80086c4:	6062      	str	r2, [r4, #4]
 80086c6:	04d9      	lsls	r1, r3, #19
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	6022      	str	r2, [r4, #0]
 80086cc:	d504      	bpl.n	80086d8 <__sflush_r+0x78>
 80086ce:	1c42      	adds	r2, r0, #1
 80086d0:	d101      	bne.n	80086d6 <__sflush_r+0x76>
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	b903      	cbnz	r3, 80086d8 <__sflush_r+0x78>
 80086d6:	6560      	str	r0, [r4, #84]	; 0x54
 80086d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086da:	602f      	str	r7, [r5, #0]
 80086dc:	2900      	cmp	r1, #0
 80086de:	d0cb      	beq.n	8008678 <__sflush_r+0x18>
 80086e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086e4:	4299      	cmp	r1, r3
 80086e6:	d002      	beq.n	80086ee <__sflush_r+0x8e>
 80086e8:	4628      	mov	r0, r5
 80086ea:	f7ff faab 	bl	8007c44 <_free_r>
 80086ee:	2000      	movs	r0, #0
 80086f0:	6360      	str	r0, [r4, #52]	; 0x34
 80086f2:	e7c2      	b.n	800867a <__sflush_r+0x1a>
 80086f4:	6a21      	ldr	r1, [r4, #32]
 80086f6:	2301      	movs	r3, #1
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b0      	blx	r6
 80086fc:	1c41      	adds	r1, r0, #1
 80086fe:	d1c7      	bne.n	8008690 <__sflush_r+0x30>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0c4      	beq.n	8008690 <__sflush_r+0x30>
 8008706:	2b1d      	cmp	r3, #29
 8008708:	d001      	beq.n	800870e <__sflush_r+0xae>
 800870a:	2b16      	cmp	r3, #22
 800870c:	d101      	bne.n	8008712 <__sflush_r+0xb2>
 800870e:	602f      	str	r7, [r5, #0]
 8008710:	e7b2      	b.n	8008678 <__sflush_r+0x18>
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	e7ae      	b.n	800867a <__sflush_r+0x1a>
 800871c:	690f      	ldr	r7, [r1, #16]
 800871e:	2f00      	cmp	r7, #0
 8008720:	d0aa      	beq.n	8008678 <__sflush_r+0x18>
 8008722:	0793      	lsls	r3, r2, #30
 8008724:	680e      	ldr	r6, [r1, #0]
 8008726:	bf08      	it	eq
 8008728:	694b      	ldreq	r3, [r1, #20]
 800872a:	600f      	str	r7, [r1, #0]
 800872c:	bf18      	it	ne
 800872e:	2300      	movne	r3, #0
 8008730:	1bf6      	subs	r6, r6, r7
 8008732:	608b      	str	r3, [r1, #8]
 8008734:	2e00      	cmp	r6, #0
 8008736:	dd9f      	ble.n	8008678 <__sflush_r+0x18>
 8008738:	6a21      	ldr	r1, [r4, #32]
 800873a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800873e:	4633      	mov	r3, r6
 8008740:	463a      	mov	r2, r7
 8008742:	4628      	mov	r0, r5
 8008744:	47e0      	blx	ip
 8008746:	2800      	cmp	r0, #0
 8008748:	dc06      	bgt.n	8008758 <__sflush_r+0xf8>
 800874a:	89a3      	ldrh	r3, [r4, #12]
 800874c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	f04f 30ff 	mov.w	r0, #4294967295
 8008756:	e790      	b.n	800867a <__sflush_r+0x1a>
 8008758:	4407      	add	r7, r0
 800875a:	1a36      	subs	r6, r6, r0
 800875c:	e7ea      	b.n	8008734 <__sflush_r+0xd4>
 800875e:	bf00      	nop
 8008760:	20400001 	.word	0x20400001

08008764 <_fflush_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	690b      	ldr	r3, [r1, #16]
 8008768:	4605      	mov	r5, r0
 800876a:	460c      	mov	r4, r1
 800876c:	b913      	cbnz	r3, 8008774 <_fflush_r+0x10>
 800876e:	2500      	movs	r5, #0
 8008770:	4628      	mov	r0, r5
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	b118      	cbz	r0, 800877e <_fflush_r+0x1a>
 8008776:	6983      	ldr	r3, [r0, #24]
 8008778:	b90b      	cbnz	r3, 800877e <_fflush_r+0x1a>
 800877a:	f000 f887 	bl	800888c <__sinit>
 800877e:	4b14      	ldr	r3, [pc, #80]	; (80087d0 <_fflush_r+0x6c>)
 8008780:	429c      	cmp	r4, r3
 8008782:	d11b      	bne.n	80087bc <_fflush_r+0x58>
 8008784:	686c      	ldr	r4, [r5, #4]
 8008786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0ef      	beq.n	800876e <_fflush_r+0xa>
 800878e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008790:	07d0      	lsls	r0, r2, #31
 8008792:	d404      	bmi.n	800879e <_fflush_r+0x3a>
 8008794:	0599      	lsls	r1, r3, #22
 8008796:	d402      	bmi.n	800879e <_fflush_r+0x3a>
 8008798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800879a:	f000 f915 	bl	80089c8 <__retarget_lock_acquire_recursive>
 800879e:	4628      	mov	r0, r5
 80087a0:	4621      	mov	r1, r4
 80087a2:	f7ff ff5d 	bl	8008660 <__sflush_r>
 80087a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087a8:	07da      	lsls	r2, r3, #31
 80087aa:	4605      	mov	r5, r0
 80087ac:	d4e0      	bmi.n	8008770 <_fflush_r+0xc>
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	059b      	lsls	r3, r3, #22
 80087b2:	d4dd      	bmi.n	8008770 <_fflush_r+0xc>
 80087b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087b6:	f000 f908 	bl	80089ca <__retarget_lock_release_recursive>
 80087ba:	e7d9      	b.n	8008770 <_fflush_r+0xc>
 80087bc:	4b05      	ldr	r3, [pc, #20]	; (80087d4 <_fflush_r+0x70>)
 80087be:	429c      	cmp	r4, r3
 80087c0:	d101      	bne.n	80087c6 <_fflush_r+0x62>
 80087c2:	68ac      	ldr	r4, [r5, #8]
 80087c4:	e7df      	b.n	8008786 <_fflush_r+0x22>
 80087c6:	4b04      	ldr	r3, [pc, #16]	; (80087d8 <_fflush_r+0x74>)
 80087c8:	429c      	cmp	r4, r3
 80087ca:	bf08      	it	eq
 80087cc:	68ec      	ldreq	r4, [r5, #12]
 80087ce:	e7da      	b.n	8008786 <_fflush_r+0x22>
 80087d0:	080090a4 	.word	0x080090a4
 80087d4:	080090c4 	.word	0x080090c4
 80087d8:	08009084 	.word	0x08009084

080087dc <std>:
 80087dc:	2300      	movs	r3, #0
 80087de:	b510      	push	{r4, lr}
 80087e0:	4604      	mov	r4, r0
 80087e2:	e9c0 3300 	strd	r3, r3, [r0]
 80087e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ea:	6083      	str	r3, [r0, #8]
 80087ec:	8181      	strh	r1, [r0, #12]
 80087ee:	6643      	str	r3, [r0, #100]	; 0x64
 80087f0:	81c2      	strh	r2, [r0, #14]
 80087f2:	6183      	str	r3, [r0, #24]
 80087f4:	4619      	mov	r1, r3
 80087f6:	2208      	movs	r2, #8
 80087f8:	305c      	adds	r0, #92	; 0x5c
 80087fa:	f7fd fb7b 	bl	8005ef4 <memset>
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <std+0x38>)
 8008800:	6263      	str	r3, [r4, #36]	; 0x24
 8008802:	4b05      	ldr	r3, [pc, #20]	; (8008818 <std+0x3c>)
 8008804:	62a3      	str	r3, [r4, #40]	; 0x28
 8008806:	4b05      	ldr	r3, [pc, #20]	; (800881c <std+0x40>)
 8008808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800880a:	4b05      	ldr	r3, [pc, #20]	; (8008820 <std+0x44>)
 800880c:	6224      	str	r4, [r4, #32]
 800880e:	6323      	str	r3, [r4, #48]	; 0x30
 8008810:	bd10      	pop	{r4, pc}
 8008812:	bf00      	nop
 8008814:	08008b31 	.word	0x08008b31
 8008818:	08008b53 	.word	0x08008b53
 800881c:	08008b8b 	.word	0x08008b8b
 8008820:	08008baf 	.word	0x08008baf

08008824 <_cleanup_r>:
 8008824:	4901      	ldr	r1, [pc, #4]	; (800882c <_cleanup_r+0x8>)
 8008826:	f000 b8af 	b.w	8008988 <_fwalk_reent>
 800882a:	bf00      	nop
 800882c:	08008765 	.word	0x08008765

08008830 <__sfmoreglue>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	2268      	movs	r2, #104	; 0x68
 8008834:	1e4d      	subs	r5, r1, #1
 8008836:	4355      	muls	r5, r2
 8008838:	460e      	mov	r6, r1
 800883a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800883e:	f7ff fa6b 	bl	8007d18 <_malloc_r>
 8008842:	4604      	mov	r4, r0
 8008844:	b140      	cbz	r0, 8008858 <__sfmoreglue+0x28>
 8008846:	2100      	movs	r1, #0
 8008848:	e9c0 1600 	strd	r1, r6, [r0]
 800884c:	300c      	adds	r0, #12
 800884e:	60a0      	str	r0, [r4, #8]
 8008850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008854:	f7fd fb4e 	bl	8005ef4 <memset>
 8008858:	4620      	mov	r0, r4
 800885a:	bd70      	pop	{r4, r5, r6, pc}

0800885c <__sfp_lock_acquire>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__sfp_lock_acquire+0x8>)
 800885e:	f000 b8b3 	b.w	80089c8 <__retarget_lock_acquire_recursive>
 8008862:	bf00      	nop
 8008864:	20000529 	.word	0x20000529

08008868 <__sfp_lock_release>:
 8008868:	4801      	ldr	r0, [pc, #4]	; (8008870 <__sfp_lock_release+0x8>)
 800886a:	f000 b8ae 	b.w	80089ca <__retarget_lock_release_recursive>
 800886e:	bf00      	nop
 8008870:	20000529 	.word	0x20000529

08008874 <__sinit_lock_acquire>:
 8008874:	4801      	ldr	r0, [pc, #4]	; (800887c <__sinit_lock_acquire+0x8>)
 8008876:	f000 b8a7 	b.w	80089c8 <__retarget_lock_acquire_recursive>
 800887a:	bf00      	nop
 800887c:	2000052a 	.word	0x2000052a

08008880 <__sinit_lock_release>:
 8008880:	4801      	ldr	r0, [pc, #4]	; (8008888 <__sinit_lock_release+0x8>)
 8008882:	f000 b8a2 	b.w	80089ca <__retarget_lock_release_recursive>
 8008886:	bf00      	nop
 8008888:	2000052a 	.word	0x2000052a

0800888c <__sinit>:
 800888c:	b510      	push	{r4, lr}
 800888e:	4604      	mov	r4, r0
 8008890:	f7ff fff0 	bl	8008874 <__sinit_lock_acquire>
 8008894:	69a3      	ldr	r3, [r4, #24]
 8008896:	b11b      	cbz	r3, 80088a0 <__sinit+0x14>
 8008898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800889c:	f7ff bff0 	b.w	8008880 <__sinit_lock_release>
 80088a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088a4:	6523      	str	r3, [r4, #80]	; 0x50
 80088a6:	4b13      	ldr	r3, [pc, #76]	; (80088f4 <__sinit+0x68>)
 80088a8:	4a13      	ldr	r2, [pc, #76]	; (80088f8 <__sinit+0x6c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80088ae:	42a3      	cmp	r3, r4
 80088b0:	bf04      	itt	eq
 80088b2:	2301      	moveq	r3, #1
 80088b4:	61a3      	streq	r3, [r4, #24]
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f820 	bl	80088fc <__sfp>
 80088bc:	6060      	str	r0, [r4, #4]
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 f81c 	bl	80088fc <__sfp>
 80088c4:	60a0      	str	r0, [r4, #8]
 80088c6:	4620      	mov	r0, r4
 80088c8:	f000 f818 	bl	80088fc <__sfp>
 80088cc:	2200      	movs	r2, #0
 80088ce:	60e0      	str	r0, [r4, #12]
 80088d0:	2104      	movs	r1, #4
 80088d2:	6860      	ldr	r0, [r4, #4]
 80088d4:	f7ff ff82 	bl	80087dc <std>
 80088d8:	68a0      	ldr	r0, [r4, #8]
 80088da:	2201      	movs	r2, #1
 80088dc:	2109      	movs	r1, #9
 80088de:	f7ff ff7d 	bl	80087dc <std>
 80088e2:	68e0      	ldr	r0, [r4, #12]
 80088e4:	2202      	movs	r2, #2
 80088e6:	2112      	movs	r1, #18
 80088e8:	f7ff ff78 	bl	80087dc <std>
 80088ec:	2301      	movs	r3, #1
 80088ee:	61a3      	str	r3, [r4, #24]
 80088f0:	e7d2      	b.n	8008898 <__sinit+0xc>
 80088f2:	bf00      	nop
 80088f4:	08008d08 	.word	0x08008d08
 80088f8:	08008825 	.word	0x08008825

080088fc <__sfp>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	4607      	mov	r7, r0
 8008900:	f7ff ffac 	bl	800885c <__sfp_lock_acquire>
 8008904:	4b1e      	ldr	r3, [pc, #120]	; (8008980 <__sfp+0x84>)
 8008906:	681e      	ldr	r6, [r3, #0]
 8008908:	69b3      	ldr	r3, [r6, #24]
 800890a:	b913      	cbnz	r3, 8008912 <__sfp+0x16>
 800890c:	4630      	mov	r0, r6
 800890e:	f7ff ffbd 	bl	800888c <__sinit>
 8008912:	3648      	adds	r6, #72	; 0x48
 8008914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008918:	3b01      	subs	r3, #1
 800891a:	d503      	bpl.n	8008924 <__sfp+0x28>
 800891c:	6833      	ldr	r3, [r6, #0]
 800891e:	b30b      	cbz	r3, 8008964 <__sfp+0x68>
 8008920:	6836      	ldr	r6, [r6, #0]
 8008922:	e7f7      	b.n	8008914 <__sfp+0x18>
 8008924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008928:	b9d5      	cbnz	r5, 8008960 <__sfp+0x64>
 800892a:	4b16      	ldr	r3, [pc, #88]	; (8008984 <__sfp+0x88>)
 800892c:	60e3      	str	r3, [r4, #12]
 800892e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008932:	6665      	str	r5, [r4, #100]	; 0x64
 8008934:	f000 f847 	bl	80089c6 <__retarget_lock_init_recursive>
 8008938:	f7ff ff96 	bl	8008868 <__sfp_lock_release>
 800893c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008944:	6025      	str	r5, [r4, #0]
 8008946:	61a5      	str	r5, [r4, #24]
 8008948:	2208      	movs	r2, #8
 800894a:	4629      	mov	r1, r5
 800894c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008950:	f7fd fad0 	bl	8005ef4 <memset>
 8008954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800895c:	4620      	mov	r0, r4
 800895e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008960:	3468      	adds	r4, #104	; 0x68
 8008962:	e7d9      	b.n	8008918 <__sfp+0x1c>
 8008964:	2104      	movs	r1, #4
 8008966:	4638      	mov	r0, r7
 8008968:	f7ff ff62 	bl	8008830 <__sfmoreglue>
 800896c:	4604      	mov	r4, r0
 800896e:	6030      	str	r0, [r6, #0]
 8008970:	2800      	cmp	r0, #0
 8008972:	d1d5      	bne.n	8008920 <__sfp+0x24>
 8008974:	f7ff ff78 	bl	8008868 <__sfp_lock_release>
 8008978:	230c      	movs	r3, #12
 800897a:	603b      	str	r3, [r7, #0]
 800897c:	e7ee      	b.n	800895c <__sfp+0x60>
 800897e:	bf00      	nop
 8008980:	08008d08 	.word	0x08008d08
 8008984:	ffff0001 	.word	0xffff0001

08008988 <_fwalk_reent>:
 8008988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800898c:	4606      	mov	r6, r0
 800898e:	4688      	mov	r8, r1
 8008990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008994:	2700      	movs	r7, #0
 8008996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800899a:	f1b9 0901 	subs.w	r9, r9, #1
 800899e:	d505      	bpl.n	80089ac <_fwalk_reent+0x24>
 80089a0:	6824      	ldr	r4, [r4, #0]
 80089a2:	2c00      	cmp	r4, #0
 80089a4:	d1f7      	bne.n	8008996 <_fwalk_reent+0xe>
 80089a6:	4638      	mov	r0, r7
 80089a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ac:	89ab      	ldrh	r3, [r5, #12]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d907      	bls.n	80089c2 <_fwalk_reent+0x3a>
 80089b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089b6:	3301      	adds	r3, #1
 80089b8:	d003      	beq.n	80089c2 <_fwalk_reent+0x3a>
 80089ba:	4629      	mov	r1, r5
 80089bc:	4630      	mov	r0, r6
 80089be:	47c0      	blx	r8
 80089c0:	4307      	orrs	r7, r0
 80089c2:	3568      	adds	r5, #104	; 0x68
 80089c4:	e7e9      	b.n	800899a <_fwalk_reent+0x12>

080089c6 <__retarget_lock_init_recursive>:
 80089c6:	4770      	bx	lr

080089c8 <__retarget_lock_acquire_recursive>:
 80089c8:	4770      	bx	lr

080089ca <__retarget_lock_release_recursive>:
 80089ca:	4770      	bx	lr

080089cc <__swhatbuf_r>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	460e      	mov	r6, r1
 80089d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d4:	2900      	cmp	r1, #0
 80089d6:	b096      	sub	sp, #88	; 0x58
 80089d8:	4614      	mov	r4, r2
 80089da:	461d      	mov	r5, r3
 80089dc:	da08      	bge.n	80089f0 <__swhatbuf_r+0x24>
 80089de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	602a      	str	r2, [r5, #0]
 80089e6:	061a      	lsls	r2, r3, #24
 80089e8:	d410      	bmi.n	8008a0c <__swhatbuf_r+0x40>
 80089ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ee:	e00e      	b.n	8008a0e <__swhatbuf_r+0x42>
 80089f0:	466a      	mov	r2, sp
 80089f2:	f000 f903 	bl	8008bfc <_fstat_r>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	dbf1      	blt.n	80089de <__swhatbuf_r+0x12>
 80089fa:	9a01      	ldr	r2, [sp, #4]
 80089fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a04:	425a      	negs	r2, r3
 8008a06:	415a      	adcs	r2, r3
 8008a08:	602a      	str	r2, [r5, #0]
 8008a0a:	e7ee      	b.n	80089ea <__swhatbuf_r+0x1e>
 8008a0c:	2340      	movs	r3, #64	; 0x40
 8008a0e:	2000      	movs	r0, #0
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	b016      	add	sp, #88	; 0x58
 8008a14:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a18 <__smakebuf_r>:
 8008a18:	898b      	ldrh	r3, [r1, #12]
 8008a1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a1c:	079d      	lsls	r5, r3, #30
 8008a1e:	4606      	mov	r6, r0
 8008a20:	460c      	mov	r4, r1
 8008a22:	d507      	bpl.n	8008a34 <__smakebuf_r+0x1c>
 8008a24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	6163      	str	r3, [r4, #20]
 8008a30:	b002      	add	sp, #8
 8008a32:	bd70      	pop	{r4, r5, r6, pc}
 8008a34:	ab01      	add	r3, sp, #4
 8008a36:	466a      	mov	r2, sp
 8008a38:	f7ff ffc8 	bl	80089cc <__swhatbuf_r>
 8008a3c:	9900      	ldr	r1, [sp, #0]
 8008a3e:	4605      	mov	r5, r0
 8008a40:	4630      	mov	r0, r6
 8008a42:	f7ff f969 	bl	8007d18 <_malloc_r>
 8008a46:	b948      	cbnz	r0, 8008a5c <__smakebuf_r+0x44>
 8008a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4c:	059a      	lsls	r2, r3, #22
 8008a4e:	d4ef      	bmi.n	8008a30 <__smakebuf_r+0x18>
 8008a50:	f023 0303 	bic.w	r3, r3, #3
 8008a54:	f043 0302 	orr.w	r3, r3, #2
 8008a58:	81a3      	strh	r3, [r4, #12]
 8008a5a:	e7e3      	b.n	8008a24 <__smakebuf_r+0xc>
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <__smakebuf_r+0x7c>)
 8008a5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	6020      	str	r0, [r4, #0]
 8008a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a68:	81a3      	strh	r3, [r4, #12]
 8008a6a:	9b00      	ldr	r3, [sp, #0]
 8008a6c:	6163      	str	r3, [r4, #20]
 8008a6e:	9b01      	ldr	r3, [sp, #4]
 8008a70:	6120      	str	r0, [r4, #16]
 8008a72:	b15b      	cbz	r3, 8008a8c <__smakebuf_r+0x74>
 8008a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 f8d1 	bl	8008c20 <_isatty_r>
 8008a7e:	b128      	cbz	r0, 8008a8c <__smakebuf_r+0x74>
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	f023 0303 	bic.w	r3, r3, #3
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	89a0      	ldrh	r0, [r4, #12]
 8008a8e:	4305      	orrs	r5, r0
 8008a90:	81a5      	strh	r5, [r4, #12]
 8008a92:	e7cd      	b.n	8008a30 <__smakebuf_r+0x18>
 8008a94:	08008825 	.word	0x08008825

08008a98 <_malloc_usable_size_r>:
 8008a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a9c:	1f18      	subs	r0, r3, #4
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bfbc      	itt	lt
 8008aa2:	580b      	ldrlt	r3, [r1, r0]
 8008aa4:	18c0      	addlt	r0, r0, r3
 8008aa6:	4770      	bx	lr

08008aa8 <_raise_r>:
 8008aa8:	291f      	cmp	r1, #31
 8008aaa:	b538      	push	{r3, r4, r5, lr}
 8008aac:	4604      	mov	r4, r0
 8008aae:	460d      	mov	r5, r1
 8008ab0:	d904      	bls.n	8008abc <_raise_r+0x14>
 8008ab2:	2316      	movs	r3, #22
 8008ab4:	6003      	str	r3, [r0, #0]
 8008ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008abe:	b112      	cbz	r2, 8008ac6 <_raise_r+0x1e>
 8008ac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ac4:	b94b      	cbnz	r3, 8008ada <_raise_r+0x32>
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f830 	bl	8008b2c <_getpid_r>
 8008acc:	462a      	mov	r2, r5
 8008ace:	4601      	mov	r1, r0
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ad6:	f000 b817 	b.w	8008b08 <_kill_r>
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d00a      	beq.n	8008af4 <_raise_r+0x4c>
 8008ade:	1c59      	adds	r1, r3, #1
 8008ae0:	d103      	bne.n	8008aea <_raise_r+0x42>
 8008ae2:	2316      	movs	r3, #22
 8008ae4:	6003      	str	r3, [r0, #0]
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	e7e7      	b.n	8008aba <_raise_r+0x12>
 8008aea:	2400      	movs	r4, #0
 8008aec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008af0:	4628      	mov	r0, r5
 8008af2:	4798      	blx	r3
 8008af4:	2000      	movs	r0, #0
 8008af6:	e7e0      	b.n	8008aba <_raise_r+0x12>

08008af8 <raise>:
 8008af8:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <raise+0xc>)
 8008afa:	4601      	mov	r1, r0
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	f7ff bfd3 	b.w	8008aa8 <_raise_r>
 8008b02:	bf00      	nop
 8008b04:	20000020 	.word	0x20000020

08008b08 <_kill_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d07      	ldr	r5, [pc, #28]	; (8008b28 <_kill_r+0x20>)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	4611      	mov	r1, r2
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	f7f9 fce8 	bl	80024ea <_kill>
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	d102      	bne.n	8008b24 <_kill_r+0x1c>
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	b103      	cbz	r3, 8008b24 <_kill_r+0x1c>
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	bd38      	pop	{r3, r4, r5, pc}
 8008b26:	bf00      	nop
 8008b28:	20000524 	.word	0x20000524

08008b2c <_getpid_r>:
 8008b2c:	f7f9 bcd6 	b.w	80024dc <_getpid>

08008b30 <__sread>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	460c      	mov	r4, r1
 8008b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b38:	f000 f894 	bl	8008c64 <_read_r>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	bfab      	itete	ge
 8008b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b42:	89a3      	ldrhlt	r3, [r4, #12]
 8008b44:	181b      	addge	r3, r3, r0
 8008b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b4a:	bfac      	ite	ge
 8008b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b4e:	81a3      	strhlt	r3, [r4, #12]
 8008b50:	bd10      	pop	{r4, pc}

08008b52 <__swrite>:
 8008b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b56:	461f      	mov	r7, r3
 8008b58:	898b      	ldrh	r3, [r1, #12]
 8008b5a:	05db      	lsls	r3, r3, #23
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	4616      	mov	r6, r2
 8008b62:	d505      	bpl.n	8008b70 <__swrite+0x1e>
 8008b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b68:	2302      	movs	r3, #2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f000 f868 	bl	8008c40 <_lseek_r>
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	4628      	mov	r0, r5
 8008b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b86:	f000 b817 	b.w	8008bb8 <_write_r>

08008b8a <__sseek>:
 8008b8a:	b510      	push	{r4, lr}
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b92:	f000 f855 	bl	8008c40 <_lseek_r>
 8008b96:	1c43      	adds	r3, r0, #1
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	bf15      	itete	ne
 8008b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ba6:	81a3      	strheq	r3, [r4, #12]
 8008ba8:	bf18      	it	ne
 8008baa:	81a3      	strhne	r3, [r4, #12]
 8008bac:	bd10      	pop	{r4, pc}

08008bae <__sclose>:
 8008bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb2:	f000 b813 	b.w	8008bdc <_close_r>
	...

08008bb8 <_write_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4d07      	ldr	r5, [pc, #28]	; (8008bd8 <_write_r+0x20>)
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	602a      	str	r2, [r5, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f7f9 fcc6 	bl	8002558 <_write>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_write_r+0x1e>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_write_r+0x1e>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	20000524 	.word	0x20000524

08008bdc <_close_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d06      	ldr	r5, [pc, #24]	; (8008bf8 <_close_r+0x1c>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7f9 fcd2 	bl	8002590 <_close>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_close_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_close_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	20000524 	.word	0x20000524

08008bfc <_fstat_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4d07      	ldr	r5, [pc, #28]	; (8008c1c <_fstat_r+0x20>)
 8008c00:	2300      	movs	r3, #0
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	f7f9 fccc 	bl	80025a6 <_fstat>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	d102      	bne.n	8008c18 <_fstat_r+0x1c>
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	b103      	cbz	r3, 8008c18 <_fstat_r+0x1c>
 8008c16:	6023      	str	r3, [r4, #0]
 8008c18:	bd38      	pop	{r3, r4, r5, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000524 	.word	0x20000524

08008c20 <_isatty_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d06      	ldr	r5, [pc, #24]	; (8008c3c <_isatty_r+0x1c>)
 8008c24:	2300      	movs	r3, #0
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	602b      	str	r3, [r5, #0]
 8008c2c:	f7f9 fcca 	bl	80025c4 <_isatty>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_isatty_r+0x1a>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_isatty_r+0x1a>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	20000524 	.word	0x20000524

08008c40 <_lseek_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4d07      	ldr	r5, [pc, #28]	; (8008c60 <_lseek_r+0x20>)
 8008c44:	4604      	mov	r4, r0
 8008c46:	4608      	mov	r0, r1
 8008c48:	4611      	mov	r1, r2
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	602a      	str	r2, [r5, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f7f9 fcc2 	bl	80025d8 <_lseek>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d102      	bne.n	8008c5e <_lseek_r+0x1e>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	b103      	cbz	r3, 8008c5e <_lseek_r+0x1e>
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	20000524 	.word	0x20000524

08008c64 <_read_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d07      	ldr	r5, [pc, #28]	; (8008c84 <_read_r+0x20>)
 8008c68:	4604      	mov	r4, r0
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	602a      	str	r2, [r5, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	f7f9 fc53 	bl	800251e <_read>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_read_r+0x1e>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_read_r+0x1e>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20000524 	.word	0x20000524

08008c88 <_init>:
 8008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8a:	bf00      	nop
 8008c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8e:	bc08      	pop	{r3}
 8008c90:	469e      	mov	lr, r3
 8008c92:	4770      	bx	lr

08008c94 <_fini>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr
